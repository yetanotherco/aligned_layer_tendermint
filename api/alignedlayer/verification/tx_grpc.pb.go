// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: alignedlayer/verification/tx.proto

package verification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName = "/alignedlayer.verification.Msg/UpdateParams"
	Msg_VerifyPlonk_FullMethodName  = "/alignedlayer.verification.Msg/VerifyPlonk"
	Msg_VerifyCairo_FullMethodName  = "/alignedlayer.verification.Msg/VerifyCairo"
	Msg_VerifySp1_FullMethodName    = "/alignedlayer.verification.Msg/VerifySp1"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	VerifyPlonk(ctx context.Context, in *MsgVerifyPlonk, opts ...grpc.CallOption) (*MsgVerifyPlonkResponse, error)
	VerifyCairo(ctx context.Context, in *MsgVerifyCairo, opts ...grpc.CallOption) (*MsgVerifyCairoResponse, error)
	VerifySp1(ctx context.Context, in *MsgVerifySp1, opts ...grpc.CallOption) (*MsgVerifySp1Response, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyPlonk(ctx context.Context, in *MsgVerifyPlonk, opts ...grpc.CallOption) (*MsgVerifyPlonkResponse, error) {
	out := new(MsgVerifyPlonkResponse)
	err := c.cc.Invoke(ctx, Msg_VerifyPlonk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyCairo(ctx context.Context, in *MsgVerifyCairo, opts ...grpc.CallOption) (*MsgVerifyCairoResponse, error) {
	out := new(MsgVerifyCairoResponse)
	err := c.cc.Invoke(ctx, Msg_VerifyCairo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifySp1(ctx context.Context, in *MsgVerifySp1, opts ...grpc.CallOption) (*MsgVerifySp1Response, error) {
	out := new(MsgVerifySp1Response)
	err := c.cc.Invoke(ctx, Msg_VerifySp1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	VerifyPlonk(context.Context, *MsgVerifyPlonk) (*MsgVerifyPlonkResponse, error)
	VerifyCairo(context.Context, *MsgVerifyCairo) (*MsgVerifyCairoResponse, error)
	VerifySp1(context.Context, *MsgVerifySp1) (*MsgVerifySp1Response, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) VerifyPlonk(context.Context, *MsgVerifyPlonk) (*MsgVerifyPlonkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPlonk not implemented")
}
func (UnimplementedMsgServer) VerifyCairo(context.Context, *MsgVerifyCairo) (*MsgVerifyCairoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCairo not implemented")
}
func (UnimplementedMsgServer) VerifySp1(context.Context, *MsgVerifySp1) (*MsgVerifySp1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySp1 not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyPlonk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyPlonk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyPlonk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_VerifyPlonk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyPlonk(ctx, req.(*MsgVerifyPlonk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyCairo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyCairo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyCairo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_VerifyCairo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyCairo(ctx, req.(*MsgVerifyCairo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifySp1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifySp1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifySp1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_VerifySp1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifySp1(ctx, req.(*MsgVerifySp1))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alignedlayer.verification.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "VerifyPlonk",
			Handler:    _Msg_VerifyPlonk_Handler,
		},
		{
			MethodName: "VerifyCairo",
			Handler:    _Msg_VerifyCairo_Handler,
		},
		{
			MethodName: "VerifySp1",
			Handler:    _Msg_VerifySp1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alignedlayer/verification/tx.proto",
}
