{
  "version": 3,
  "sources": ["../../long/index.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n"],
  "mappings": "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",
  "names": []
}
