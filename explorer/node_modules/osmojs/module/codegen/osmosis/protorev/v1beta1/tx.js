import { TokenPairArbRoutes } from "./protorev";
import * as _m0 from "protobufjs/minimal";
/** MsgSetHotRoutes defines the Msg/SetHotRoutes request type. */

function createBaseMsgSetHotRoutes() {
  return {
    admin: "",
    hotRoutes: []
  };
}

export const MsgSetHotRoutes = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }

    for (const v of message.hotRoutes) {
      TokenPairArbRoutes.encode(v, writer.uint32(18).fork()).ldelim();
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetHotRoutes();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.admin = reader.string();
          break;

        case 2:
          message.hotRoutes.push(TokenPairArbRoutes.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$admin, _object$hotRoutes;

    const message = createBaseMsgSetHotRoutes();
    message.admin = (_object$admin = object.admin) !== null && _object$admin !== void 0 ? _object$admin : "";
    message.hotRoutes = ((_object$hotRoutes = object.hotRoutes) === null || _object$hotRoutes === void 0 ? void 0 : _object$hotRoutes.map(e => TokenPairArbRoutes.fromPartial(e))) || [];
    return message;
  }

};

function createBaseMsgSetHotRoutesResponse() {
  return {};
}

export const MsgSetHotRoutesResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetHotRoutesResponse();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(_) {
    const message = createBaseMsgSetHotRoutesResponse();
    return message;
  }

};

function createBaseMsgSetDeveloperAccount() {
  return {
    admin: "",
    developerAccount: ""
  };
}

export const MsgSetDeveloperAccount = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }

    if (message.developerAccount !== "") {
      writer.uint32(18).string(message.developerAccount);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDeveloperAccount();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.admin = reader.string();
          break;

        case 2:
          message.developerAccount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$admin2, _object$developerAcco;

    const message = createBaseMsgSetDeveloperAccount();
    message.admin = (_object$admin2 = object.admin) !== null && _object$admin2 !== void 0 ? _object$admin2 : "";
    message.developerAccount = (_object$developerAcco = object.developerAccount) !== null && _object$developerAcco !== void 0 ? _object$developerAcco : "";
    return message;
  }

};

function createBaseMsgSetDeveloperAccountResponse() {
  return {};
}

export const MsgSetDeveloperAccountResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDeveloperAccountResponse();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(_) {
    const message = createBaseMsgSetDeveloperAccountResponse();
    return message;
  }

};