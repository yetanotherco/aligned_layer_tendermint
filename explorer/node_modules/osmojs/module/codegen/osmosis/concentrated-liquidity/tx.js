import { Coin } from "../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";
import { Long } from "../../helpers";
/** ===================== MsgCreatePosition */

function createBaseMsgCreatePosition() {
  return {
    poolId: Long.UZERO,
    sender: "",
    lowerTick: Long.ZERO,
    upperTick: Long.ZERO,
    tokenDesired0: undefined,
    tokenDesired1: undefined,
    tokenMinAmount0: "",
    tokenMinAmount1: ""
  };
}

export const MsgCreatePosition = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }

    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }

    if (!message.lowerTick.isZero()) {
      writer.uint32(24).int64(message.lowerTick);
    }

    if (!message.upperTick.isZero()) {
      writer.uint32(32).int64(message.upperTick);
    }

    if (message.tokenDesired0 !== undefined) {
      Coin.encode(message.tokenDesired0, writer.uint32(42).fork()).ldelim();
    }

    if (message.tokenDesired1 !== undefined) {
      Coin.encode(message.tokenDesired1, writer.uint32(50).fork()).ldelim();
    }

    if (message.tokenMinAmount0 !== "") {
      writer.uint32(58).string(message.tokenMinAmount0);
    }

    if (message.tokenMinAmount1 !== "") {
      writer.uint32(66).string(message.tokenMinAmount1);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePosition();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;

        case 2:
          message.sender = reader.string();
          break;

        case 3:
          message.lowerTick = reader.int64();
          break;

        case 4:
          message.upperTick = reader.int64();
          break;

        case 5:
          message.tokenDesired0 = Coin.decode(reader, reader.uint32());
          break;

        case 6:
          message.tokenDesired1 = Coin.decode(reader, reader.uint32());
          break;

        case 7:
          message.tokenMinAmount0 = reader.string();
          break;

        case 8:
          message.tokenMinAmount1 = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$sender, _object$tokenMinAmoun, _object$tokenMinAmoun2;

    const message = createBaseMsgCreatePosition();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.sender = (_object$sender = object.sender) !== null && _object$sender !== void 0 ? _object$sender : "";
    message.lowerTick = object.lowerTick !== undefined && object.lowerTick !== null ? Long.fromValue(object.lowerTick) : Long.ZERO;
    message.upperTick = object.upperTick !== undefined && object.upperTick !== null ? Long.fromValue(object.upperTick) : Long.ZERO;
    message.tokenDesired0 = object.tokenDesired0 !== undefined && object.tokenDesired0 !== null ? Coin.fromPartial(object.tokenDesired0) : undefined;
    message.tokenDesired1 = object.tokenDesired1 !== undefined && object.tokenDesired1 !== null ? Coin.fromPartial(object.tokenDesired1) : undefined;
    message.tokenMinAmount0 = (_object$tokenMinAmoun = object.tokenMinAmount0) !== null && _object$tokenMinAmoun !== void 0 ? _object$tokenMinAmoun : "";
    message.tokenMinAmount1 = (_object$tokenMinAmoun2 = object.tokenMinAmount1) !== null && _object$tokenMinAmoun2 !== void 0 ? _object$tokenMinAmoun2 : "";
    return message;
  }

};

function createBaseMsgCreatePositionResponse() {
  return {
    amount0: "",
    amount1: "",
    liquidityCreated: ""
  };
}

export const MsgCreatePositionResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.amount0 !== "") {
      writer.uint32(10).string(message.amount0);
    }

    if (message.amount1 !== "") {
      writer.uint32(18).string(message.amount1);
    }

    if (message.liquidityCreated !== "") {
      writer.uint32(42).string(message.liquidityCreated);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePositionResponse();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.amount0 = reader.string();
          break;

        case 2:
          message.amount1 = reader.string();
          break;

        case 5:
          message.liquidityCreated = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$amount, _object$amount2, _object$liquidityCrea;

    const message = createBaseMsgCreatePositionResponse();
    message.amount0 = (_object$amount = object.amount0) !== null && _object$amount !== void 0 ? _object$amount : "";
    message.amount1 = (_object$amount2 = object.amount1) !== null && _object$amount2 !== void 0 ? _object$amount2 : "";
    message.liquidityCreated = (_object$liquidityCrea = object.liquidityCreated) !== null && _object$liquidityCrea !== void 0 ? _object$liquidityCrea : "";
    return message;
  }

};

function createBaseMsgWithdrawPosition() {
  return {
    poolId: Long.UZERO,
    sender: "",
    lowerTick: Long.ZERO,
    upperTick: Long.ZERO,
    liquidityAmount: ""
  };
}

export const MsgWithdrawPosition = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }

    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }

    if (!message.lowerTick.isZero()) {
      writer.uint32(24).int64(message.lowerTick);
    }

    if (!message.upperTick.isZero()) {
      writer.uint32(32).int64(message.upperTick);
    }

    if (message.liquidityAmount !== "") {
      writer.uint32(42).string(message.liquidityAmount);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawPosition();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;

        case 2:
          message.sender = reader.string();
          break;

        case 3:
          message.lowerTick = reader.int64();
          break;

        case 4:
          message.upperTick = reader.int64();
          break;

        case 5:
          message.liquidityAmount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$sender2, _object$liquidityAmou;

    const message = createBaseMsgWithdrawPosition();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.sender = (_object$sender2 = object.sender) !== null && _object$sender2 !== void 0 ? _object$sender2 : "";
    message.lowerTick = object.lowerTick !== undefined && object.lowerTick !== null ? Long.fromValue(object.lowerTick) : Long.ZERO;
    message.upperTick = object.upperTick !== undefined && object.upperTick !== null ? Long.fromValue(object.upperTick) : Long.ZERO;
    message.liquidityAmount = (_object$liquidityAmou = object.liquidityAmount) !== null && _object$liquidityAmou !== void 0 ? _object$liquidityAmou : "";
    return message;
  }

};

function createBaseMsgWithdrawPositionResponse() {
  return {
    amount0: "",
    amount1: ""
  };
}

export const MsgWithdrawPositionResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.amount0 !== "") {
      writer.uint32(10).string(message.amount0);
    }

    if (message.amount1 !== "") {
      writer.uint32(18).string(message.amount1);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawPositionResponse();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.amount0 = reader.string();
          break;

        case 2:
          message.amount1 = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$amount3, _object$amount4;

    const message = createBaseMsgWithdrawPositionResponse();
    message.amount0 = (_object$amount3 = object.amount0) !== null && _object$amount3 !== void 0 ? _object$amount3 : "";
    message.amount1 = (_object$amount4 = object.amount1) !== null && _object$amount4 !== void 0 ? _object$amount4 : "";
    return message;
  }

};

function createBaseMsgCollectFees() {
  return {
    poolId: Long.UZERO,
    sender: "",
    lowerTick: Long.ZERO,
    upperTick: Long.ZERO
  };
}

export const MsgCollectFees = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }

    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }

    if (!message.lowerTick.isZero()) {
      writer.uint32(24).int64(message.lowerTick);
    }

    if (!message.upperTick.isZero()) {
      writer.uint32(32).int64(message.upperTick);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCollectFees();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;

        case 2:
          message.sender = reader.string();
          break;

        case 3:
          message.lowerTick = reader.int64();
          break;

        case 4:
          message.upperTick = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$sender3;

    const message = createBaseMsgCollectFees();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.sender = (_object$sender3 = object.sender) !== null && _object$sender3 !== void 0 ? _object$sender3 : "";
    message.lowerTick = object.lowerTick !== undefined && object.lowerTick !== null ? Long.fromValue(object.lowerTick) : Long.ZERO;
    message.upperTick = object.upperTick !== undefined && object.upperTick !== null ? Long.fromValue(object.upperTick) : Long.ZERO;
    return message;
  }

};

function createBaseMsgCollectFeesResponse() {
  return {
    tokenOut: []
  };
}

export const MsgCollectFeesResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.tokenOut) {
      Coin.encode(v, writer.uint32(10).fork()).ldelim();
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCollectFeesResponse();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.tokenOut.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$tokenOut;

    const message = createBaseMsgCollectFeesResponse();
    message.tokenOut = ((_object$tokenOut = object.tokenOut) === null || _object$tokenOut === void 0 ? void 0 : _object$tokenOut.map(e => Coin.fromPartial(e))) || [];
    return message;
  }

};