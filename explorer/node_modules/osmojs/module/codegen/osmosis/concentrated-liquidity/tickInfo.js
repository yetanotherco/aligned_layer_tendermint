import { DecCoin } from "../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";

function createBaseTickInfo() {
  return {
    liquidityGross: "",
    liquidityNet: "",
    feeGrowthOutside: []
  };
}

export const TickInfo = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.liquidityGross !== "") {
      writer.uint32(10).string(message.liquidityGross);
    }

    if (message.liquidityNet !== "") {
      writer.uint32(18).string(message.liquidityNet);
    }

    for (const v of message.feeGrowthOutside) {
      DecCoin.encode(v, writer.uint32(26).fork()).ldelim();
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickInfo();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.liquidityGross = reader.string();
          break;

        case 2:
          message.liquidityNet = reader.string();
          break;

        case 3:
          message.feeGrowthOutside.push(DecCoin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$liquidityGros, _object$liquidityNet, _object$feeGrowthOuts;

    const message = createBaseTickInfo();
    message.liquidityGross = (_object$liquidityGros = object.liquidityGross) !== null && _object$liquidityGros !== void 0 ? _object$liquidityGros : "";
    message.liquidityNet = (_object$liquidityNet = object.liquidityNet) !== null && _object$liquidityNet !== void 0 ? _object$liquidityNet : "";
    message.feeGrowthOutside = ((_object$feeGrowthOuts = object.feeGrowthOutside) === null || _object$feeGrowthOuts === void 0 ? void 0 : _object$feeGrowthOuts.map(e => DecCoin.fromPartial(e))) || [];
    return message;
  }

};