"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PoolTypeSDKType = exports.PoolType = exports.ModuleRoute = void 0;
exports.poolTypeFromJSON = poolTypeFromJSON;
exports.poolTypeToJSON = poolTypeToJSON;

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** PoolType is an enumeration of all supported pool types. */
var PoolType;
/** PoolType is an enumeration of all supported pool types. */

exports.PoolType = PoolType;

(function (PoolType) {
  PoolType[PoolType["Balancer"] = 0] = "Balancer";
  PoolType[PoolType["Stableswap"] = 1] = "Stableswap";
  PoolType[PoolType["Concentrated"] = 2] = "Concentrated";
  PoolType[PoolType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PoolType || (exports.PoolType = PoolType = {}));

var PoolTypeSDKType;
exports.PoolTypeSDKType = PoolTypeSDKType;

(function (PoolTypeSDKType) {
  PoolTypeSDKType[PoolTypeSDKType["Balancer"] = 0] = "Balancer";
  PoolTypeSDKType[PoolTypeSDKType["Stableswap"] = 1] = "Stableswap";
  PoolTypeSDKType[PoolTypeSDKType["Concentrated"] = 2] = "Concentrated";
  PoolTypeSDKType[PoolTypeSDKType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PoolTypeSDKType || (exports.PoolTypeSDKType = PoolTypeSDKType = {}));

function poolTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "Balancer":
      return PoolType.Balancer;

    case 1:
    case "Stableswap":
      return PoolType.Stableswap;

    case 2:
    case "Concentrated":
      return PoolType.Concentrated;

    case -1:
    case "UNRECOGNIZED":
    default:
      return PoolType.UNRECOGNIZED;
  }
}

function poolTypeToJSON(object) {
  switch (object) {
    case PoolType.Balancer:
      return "Balancer";

    case PoolType.Stableswap:
      return "Stableswap";

    case PoolType.Concentrated:
      return "Concentrated";

    case PoolType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
/**
 * ModuleRouter defines a route encapsulating pool type.
 * It is used as the value of a mapping from pool id to the pool type,
 * allowing the pool manager to know which module to route swaps to given the
 * pool id.
 */


function createBaseModuleRoute() {
  return {
    poolType: 0
  };
}

var ModuleRoute = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.poolType !== 0) {
      writer.uint32(8).int32(message.poolType);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseModuleRoute();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.poolType = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$poolType;

    var message = createBaseModuleRoute();
    message.poolType = (_object$poolType = object.poolType) !== null && _object$poolType !== void 0 ? _object$poolType : 0;
    return message;
  }
};
exports.ModuleRoute = ModuleRoute;