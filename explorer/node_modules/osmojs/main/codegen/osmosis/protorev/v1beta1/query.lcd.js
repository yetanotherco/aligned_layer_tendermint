"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LCDQueryClient = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var LCDQueryClient = /*#__PURE__*/function () {
  function LCDQueryClient(_ref) {
    var requestClient = _ref.requestClient;
    (0, _classCallCheck2["default"])(this, LCDQueryClient);
    (0, _defineProperty2["default"])(this, "req", void 0);
    this.req = requestClient;
    this.params = this.params.bind(this);
    this.getProtoRevNumberOfTrades = this.getProtoRevNumberOfTrades.bind(this);
    this.getProtoRevProfitsByDenom = this.getProtoRevProfitsByDenom.bind(this);
    this.getProtoRevAllProfits = this.getProtoRevAllProfits.bind(this);
    this.getProtoRevStatisticsByPool = this.getProtoRevStatisticsByPool.bind(this);
    this.getProtoRevAllStatistics = this.getProtoRevAllStatistics.bind(this);
    this.getProtoRevTokenPairArbRoutes = this.getProtoRevTokenPairArbRoutes.bind(this);
  }
  /* Params queries the parameters of the module. */


  (0, _createClass2["default"])(LCDQueryClient, [{
    key: "params",
    value: function () {
      var _params2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _params,
            endpoint,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                endpoint = "osmosis/v13/protorev/params";
                _context.next = 4;
                return this.req.get(endpoint);

              case 4:
                return _context.abrupt("return", _context.sent);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function params() {
        return _params2.apply(this, arguments);
      }

      return params;
    }()
    /* GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
     has executed */

  }, {
    key: "getProtoRevNumberOfTrades",
    value: function () {
      var _getProtoRevNumberOfTrades = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _params,
            endpoint,
            _args2 = arguments;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _params = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                endpoint = "osmosis/v13/protorev/number_of_trades";
                _context2.next = 4;
                return this.req.get(endpoint);

              case 4:
                return _context2.abrupt("return", _context2.sent);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getProtoRevNumberOfTrades() {
        return _getProtoRevNumberOfTrades.apply(this, arguments);
      }

      return getProtoRevNumberOfTrades;
    }()
    /* GetProtoRevProfitsByDenom queries the profits of the module by denom */

  }, {
    key: "getProtoRevProfitsByDenom",
    value: function () {
      var _getProtoRevProfitsByDenom = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.denom) !== "undefined") {
                  options.params.denom = params.denom;
                }

                endpoint = "osmosis/v13/protorev/profits_by_denom";
                _context3.next = 5;
                return this.req.get(endpoint, options);

              case 5:
                return _context3.abrupt("return", _context3.sent);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getProtoRevProfitsByDenom(_x) {
        return _getProtoRevProfitsByDenom.apply(this, arguments);
      }

      return getProtoRevProfitsByDenom;
    }()
    /* GetProtoRevAllProfits queries all of the profits from the module */

  }, {
    key: "getProtoRevAllProfits",
    value: function () {
      var _getProtoRevAllProfits = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        var _params,
            endpoint,
            _args4 = arguments;

        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _params = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
                endpoint = "osmosis/v13/protorev/all_profits";
                _context4.next = 4;
                return this.req.get(endpoint);

              case 4:
                return _context4.abrupt("return", _context4.sent);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getProtoRevAllProfits() {
        return _getProtoRevAllProfits.apply(this, arguments);
      }

      return getProtoRevAllProfits;
    }()
    /* GetProtoRevStatisticsByPool queries the number of arbitrages and profits
     that have been executed for a given pool */

  }, {
    key: "getProtoRevStatisticsByPool",
    value: function () {
      var _getProtoRevStatisticsByPool = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
                  options.params.pool_id = params.poolId;
                }

                endpoint = "osmosis/v13/protorev/statistics_by_pool";
                _context5.next = 5;
                return this.req.get(endpoint, options);

              case 5:
                return _context5.abrupt("return", _context5.sent);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getProtoRevStatisticsByPool(_x2) {
        return _getProtoRevStatisticsByPool.apply(this, arguments);
      }

      return getProtoRevStatisticsByPool;
    }()
    /* GetProtoRevAllStatistics queries all of pools that the module has arbitrage
     against and the number of trades and profits that have been executed for
     each pool */

  }, {
    key: "getProtoRevAllStatistics",
    value: function () {
      var _getProtoRevAllStatistics = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        var _params,
            endpoint,
            _args6 = arguments;

        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _params = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
                endpoint = "osmosis/v13/protorev/all_statistics";
                _context6.next = 4;
                return this.req.get(endpoint);

              case 4:
                return _context6.abrupt("return", _context6.sent);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getProtoRevAllStatistics() {
        return _getProtoRevAllStatistics.apply(this, arguments);
      }

      return getProtoRevAllStatistics;
    }()
    /* GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
     is currently arbitraging */

  }, {
    key: "getProtoRevTokenPairArbRoutes",
    value: function () {
      var _getProtoRevTokenPairArbRoutes = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
        var _params,
            endpoint,
            _args7 = arguments;

        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _params = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                endpoint = "osmosis/v13/protorev/token_pair_arb_routes";
                _context7.next = 4;
                return this.req.get(endpoint);

              case 4:
                return _context7.abrupt("return", _context7.sent);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getProtoRevTokenPairArbRoutes() {
        return _getProtoRevTokenPairArbRoutes.apply(this, arguments);
      }

      return getProtoRevTokenPairArbRoutes;
    }()
  }]);
  return LCDQueryClient;
}();

exports.LCDQueryClient = LCDQueryClient;