 
 
import { SignDoc } from 'cosmjs-types/cosmos/tx/v1beta1/tx';
import { AccountData, AminoSignResponse } from '@cosmjs/amino';
import { DirectSignResponse, OfflineDirectSigner } from '@cosmjs/proto-signing';
import { SignAminoOptions, StdSignDoc } from './types';
export declare class CosmjsOfflineSigner implements OfflineDirectSigner {
    readonly chainId: string;
    constructor(chainId: string);
    getAccounts(): Promise<AccountData[]>;
    signDirect(signerAddress: string, signDoc: SignDoc): Promise<DirectSignResponse>;
    signAmino(signerAddress: string, signDoc: StdSignDoc, options?: SignAminoOptions): Promise<AminoSignResponse>;
}
/**
 * Gives the cosmos Offline signer
 *
 * @param chainId - chainId
 * @returns CosmjsOfflineSigner
 */
export declare function getOfflineSigner(chainId: string): CosmjsOfflineSigner;
/**
 * Helps to do signArbitrary of the data provided
 *
 * @param chainId - chainId
 * @param signer - signer
 * @param data - data
 * @returns signature
 */
export declare function signArbitrary(chainId: string, signer: string, data: string): Promise<import("@cosmjs/amino").StdSignature>;
