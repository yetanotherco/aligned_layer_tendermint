"use strict";
/* eslint jsdoc/match-description: 0 */ // --> OFF
/* eslint require-atomic-updates: 0 */ // --> OFF
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signArbitrary = exports.getOfflineSigner = exports.CosmjsOfflineSigner = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const snap_1 = require("./snap");
const gas_1 = require("./helper/gas");
const chainInfo_1 = __importDefault(require("./constants/chainInfo"));
class CosmjsOfflineSigner {
    constructor(chainId) {
        this.chainId = chainId;
    }
    async getAccounts() {
        const key = await (0, snap_1.getKey)(this.chainId);
        return [
            {
                address: key.address,
                algo: 'secp256k1',
                pubkey: key.pubkey,
            },
        ];
    }
    async signDirect(signerAddress, signDoc) {
        if (this.chainId !== signDoc.chainId) {
            throw new Error('Chain ID does not match signer chain ID');
        }
        const accounts = await this.getAccounts();
        if (accounts.find((account) => account.address !== signerAddress)) {
            throw new Error('Signer address does not match wallet address');
        }
        return (0, snap_1.requestSignature)(this.chainId, signerAddress, signDoc);
    }
    // This has been added as a placeholder.
    async signAmino(signerAddress, signDoc, options) {
        if (this.chainId !== signDoc.chain_id) {
            throw new Error('Chain ID does not match signer chain ID');
        }
        const accounts = await this.getAccounts();
        if (accounts.find((account) => account.address !== signerAddress)) {
            throw new Error('Signer address does not match wallet address');
        }
        const chain = chainInfo_1.default[this.chainId];
        // Override gasPrice
        if (!(options === null || options === void 0 ? void 0 : options.preferNoSetFee) && chain && chain.denom) {
            const gasPriceFromRegistry = await (0, gas_1.getGasPriceForChainName)(chain.chainName);
            const gas = 'gasLimit' in signDoc.fee ? signDoc.fee.gasLimit : signDoc.fee.gas;
            if (gasPriceFromRegistry) {
                const amount = [
                    {
                        amount: new bignumber_js_1.default(gasPriceFromRegistry)
                            .multipliedBy(new bignumber_js_1.default(gas))
                            .decimalPlaces(0, 1)
                            .toString(),
                        denom: chain.denom,
                    },
                ];
                signDoc.fee.amount = amount;
            }
        }
        return (0, snap_1.requestSignAmino)(this.chainId, signerAddress, signDoc);
    }
}
exports.CosmjsOfflineSigner = CosmjsOfflineSigner;
/**
 * Gives the cosmos Offline signer
 *
 * @param chainId - chainId
 * @returns CosmjsOfflineSigner
 */
function getOfflineSigner(chainId) {
    return new CosmjsOfflineSigner(chainId);
}
exports.getOfflineSigner = getOfflineSigner;
/**
 * Helps to do signArbitrary of the data provided
 *
 * @param chainId - chainId
 * @param signer - signer
 * @param data - data
 * @returns signature
 */
async function signArbitrary(chainId, signer, data) {
    const { signDoc } = getADR36SignDoc(signer, data);
    const result = await (0, snap_1.requestSignAmino)(chainId, signer, signDoc, {
        isADR36: true,
    });
    return result.signature;
}
exports.signArbitrary = signArbitrary;
/**
 *
 * Gets the getADR36SignDoc of the signer and data
 *
 * @param signer - signer
 * @param data - data
 * @returns SignDoc and isADR36WithString
 */
function getADR36SignDoc(signer, data) {
    let isADR36WithString = false;
    let b64Data = '';
    if (typeof data === 'string') {
        b64Data = Buffer.from(data).toString('base64');
        isADR36WithString = true;
    }
    else {
        b64Data = Buffer.from(data).toString('base64');
    }
    const signDoc = {
        chain_id: '',
        account_number: '0',
        sequence: '0',
        fee: {
            gas: '0',
            amount: [],
        },
        msgs: [
            {
                type: 'sign/MsgSignData',
                value: {
                    signer,
                    b64Data,
                },
            },
        ],
        memo: '',
    };
    return { signDoc, isADR36WithString };
}
//# sourceMappingURL=cosmjs-offline-signer.js.map