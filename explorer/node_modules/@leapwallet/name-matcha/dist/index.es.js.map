{"version":3,"file":"index.es.js","sources":["../node_modules/bech32/index.js","../src/registry/name-service.ts","../src/registry/icns.ts","../src/registry/ibc-domains.ts","../src/registry/stargaze-names.ts","../src/registry/arch-id.ts","../src/utils/domain.ts","../src/registry/registry.ts","../src/index.ts"],"sourcesContent":["'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n","import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate'\n/**\n * Types of errors\n */\nexport enum MatchaErrorType {\n  NETWORK = 'network',\n  NOT_FOUND = 'not-found',\n  UNREGISTERED_SERVICE = 'unregistered-service',\n  DUPLICATE_SERVICE = 'duplicate-service',\n  INVALID_ADDRESS = 'invalid-address'\n}\n\n/**\n * Custom error class\n */\nexport class MatchaError extends Error {\n  public type: MatchaErrorType\n  constructor(message: string, errorType: MatchaErrorType) {\n    super(message)\n    this.name = 'MatchaError'\n    this.type = errorType\n  }\n}\n\nexport type Addr = {\n  prefix: string | null\n  words: number[] | null\n}\n\nexport type Network = 'mainnet' | 'testnet'\n\nexport type AllowedTopLevelDomains = {\n  icns?: string[]\n  ibcDomains?: string[]\n  archIds?: string[]\n  stargazeNames?: string[]\n}\n\nclass CosmWasmClientHandler {\n  private static clients: { [key: string]: CosmWasmClient } = {}\n\n  static getClient = async (rpcUrl: string) => {\n    let _client = this.clients[rpcUrl]\n    if (_client === undefined) {\n      _client = await CosmWasmClient.connect(rpcUrl)\n      this.clients[rpcUrl] = _client\n    }\n    return _client\n  }\n}\n\n/**\n * What a NameService class needs to implement\n */\nexport abstract class NameService {\n  /**\n   * The unique identifier of the name service\n   */\n  abstract serviceID: string\n  /**\n   * The chain on which the name service is deployed\n   */\n  abstract chain: string\n  /**\n   * The contract address of the name service\n   */\n  abstract contractAddress: {\n    [key in Network]: string\n  }\n  /**\n   * @param name Resolve this name into an address\n   */\n  abstract resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string>\n  /**\n   * @param address Lookup this address and returns primary name\n   */\n  abstract lookup(address: string, network: Network): Promise<string>\n  /**\n   * @param network The network to use\n   */\n  getCosmWasmClient(rpcUrl: string): Promise<CosmWasmClient> {\n    return CosmWasmClientHandler.getClient(rpcUrl)\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/osmosis',\n  testnet: 'https://rpc-test.osmosis.zone'\n}\n\nexport const serviceID = 'icns'\n\nexport class ICNS extends NameService {\n  serviceID = serviceID\n  chain = 'osmosis'\n  contractAddress = {\n    mainnet: 'osmo1xk0s8xgktn9x5vwcgtjdxqzadg88fgn33p8u9cnpdxwemvxscvast52cdd',\n    testnet: 'osmo1q2qpencrnnlamwalxt6tac2ytl35z5jejn0v4frnp6jff7gwp37sjcnhu5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          address: {\n            name: username,\n            bech32_prefix: prefix\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        allowedTopLevelDomains?.icns?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_name: {\n            address\n          }\n        }\n      )\n      if (!res?.name) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.name}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/juno',\n  testnet: 'https://rpc.uni.kingnodes.com'\n}\n\nexport const serviceID = 'ibcDomains'\n\nexport class IBCDomains extends NameService {\n  serviceID = serviceID\n  chain = 'juno'\n  contractAddress = {\n    mainnet: 'juno1ce7wjfsuk79t2mdvpdjtv8280pcc64yh9mh62qptuvxe64twt4pqa68z2a',\n    testnet: 'juno19al2ptpxz3xk6q8nl3eyvyslkz8g6nz25w48dfpaepwaxavq3mhqsjjqe5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          owner_of: {\n            token_id: username\n          }\n        }\n      )\n      if (\n        !res?.owner ||\n        allowedTopLevelDomains?.ibcDomains?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res.owner)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    const junoAddress = encode('juno', addr.words)\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_domain: {\n            address: junoAddress\n          }\n        }\n      )\n      if (!res?.domain) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.domain}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/stargaze',\n  testnet: 'https://rpc.elgafar-1.stargaze-apis.com'\n}\n\nexport const serviceID = 'stargazeNames'\n\nexport class StargazeNames extends NameService {\n  serviceID = serviceID\n  chain = 'stargaze'\n  contractAddress = {\n    mainnet: 'stars1fx74nkqkw2748av8j7ew7r3xt9cgjqduwn8m0ur5lhe49uhlsasszc5fhr',\n    testnet: 'stars1rp5ttjvd5g0vlpltrkyvq62tcrdz949gjtpah000ynh4n2laz52qarz2z8'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          associated_address: {\n            name: username\n          }\n        }\n      )\n\n      if (\n        !res ||\n        allowedTopLevelDomains?.stargazeNames?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          name: {\n            address\n          }\n        }\n      )\n      return `${res}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.mainnet.archway.io',\n  testnet: 'https://rpc.constantine.archway.tech'\n}\n\nexport const serviceID = 'archIds'\n\nexport class ArchIdNames extends NameService {\n  serviceID = serviceID\n  chain = 'archway'\n  contractAddress = {\n    mainnet:\n      'archway1275jwjpktae4y4y0cdq274a2m0jnpekhttnfuljm6n59wnpyd62qppqxq0',\n    testnet:\n      'archway1lr8rstt40s697hqpedv2nvt27f4cuccqwvly9gnvuszxmcevrlns60xw4r'\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-resolve-address-js\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const [, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_record: {\n            name: name\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        allowedTopLevelDomains?.archIds?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-check-domains-resolve-to-address-js\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_address: {\n            address: address\n          }\n        }\n      )\n      if (!res?.names || !res?.names?.length) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.names.join(', ')\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { AllowedTopLevelDomains } from '../registry/name-service'\n\nexport const supportedTopLevelDomainListForAllChains = [\n  'agoric',\n  'akash',\n  'arkh',\n  'axelar',\n  'band',\n  'bcna',\n  'bitsong',\n  'bostrom',\n  'cerberus',\n  'certik',\n  'cheqd',\n  'chihuahua',\n  'chronic',\n  'comdex',\n  'cosmos',\n  'crc',\n  'cre',\n  'cro',\n  'cudos',\n  'darc',\n  'decentr',\n  'desmos',\n  'dig',\n  'echelon',\n  'emoney',\n  'evmos',\n  'fetch',\n  'firma',\n  'galaxy',\n  'genesis',\n  'gravity',\n  'iaa',\n  'inj',\n  'ixo',\n  'juno',\n  'kava',\n  'ki',\n  'like',\n  'logos',\n  'lum',\n  'mantle',\n  'mars',\n  'meme',\n  'micro',\n  'mythos',\n  'nomic',\n  'octa',\n  'odin',\n  'orai',\n  'osmo',\n  'panacea',\n  'pb',\n  'persistence',\n  'regen',\n  'rizon',\n  'secret',\n  'sent',\n  'sif',\n  'somm',\n  'star',\n  'stars',\n  'swth',\n  'terra',\n  'thor',\n  'umee',\n  'vdl',\n  'kujira',\n  'sei',\n  'stride',\n  'jkl',\n  'tori',\n  'omniflix',\n  'canto',\n  'pasg',\n  'archway',\n  'quasar',\n  'neutron',\n  'testcore',\n  'core',\n  'quick',\n  'migaloo',\n  'kyve',\n  'onomy',\n  'noble',\n  'plq',\n  'nolus',\n  'c4e',\n  'gitopia',\n  'nibi',\n  'maya',\n  'empower',\n  'dydx'\n]\n\nexport const allowedTopLevelDomains: AllowedTopLevelDomains = {\n  icns: supportedTopLevelDomainListForAllChains,\n  ibcDomains: supportedTopLevelDomainListForAllChains,\n  stargazeNames: supportedTopLevelDomainListForAllChains,\n  archIds: ['arch']\n}\n","import { ICNS, serviceID as _icnsID } from './icns'\nimport { IBCDomains, serviceID as _ibcDomainsID } from './ibc-domains'\nimport { StargazeNames, serviceID as _stargazeNamesID } from './stargaze-names'\nimport { ArchIdNames, serviceID as _archId } from './arch-id'\nimport {\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\nimport { allowedTopLevelDomains as allowedTopLevelDomainData } from '../utils/domain'\n\nexport const services = {\n  icns: _icnsID,\n  ibcDomains: _ibcDomainsID,\n  stargazeNames: _stargazeNamesID,\n  archIds: _archId\n}\n\nexport const allowedTopLevelDomains = allowedTopLevelDomainData\n\nexport class Registry {\n  private services: { [key: string]: NameService } = {}\n\n  constructor(private network: Network) {\n    this.network = network\n    this.registerService(new ICNS())\n    this.registerService(new IBCDomains())\n    this.registerService(new StargazeNames())\n    this.registerService(new ArchIdNames())\n  }\n\n  registerService(service: NameService) {\n    if (this.services[service.serviceID]) {\n      throw new MatchaError(\n        'Service already registered',\n        MatchaErrorType.DUPLICATE_SERVICE\n      )\n    }\n    this.services[service.serviceID] = service\n  }\n\n  private getService(serviceID: string): NameService {\n    const service = this.services[serviceID]\n    if (!service) {\n      throw new MatchaError(\n        'Service not registered',\n        MatchaErrorType.UNREGISTERED_SERVICE\n      )\n    }\n    return service\n  }\n\n  listServices(): string[] {\n    return Object.keys(this.services)\n  }\n\n  setNetwork(network: Network) {\n    this.network = network\n  }\n\n  getNetwork(): Network {\n    return this.network\n  }\n\n  async resolve(\n    name: string,\n    serviceID: string,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.resolve(name, this.network, allowedTopLevelDomains)\n  }\n\n  async lookup(address: string, serviceID: string): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.lookup(address, this.network)\n  }\n\n  async resolveAll(\n    name: string,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.resolve(\n            name,\n            this.network,\n            allowedTopLevelDomains\n          )\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n\n  async lookupAll(address: string) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.lookup(address, this.network)\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n}\n","import {\n  Registry,\n  NameService,\n  MatchaError,\n  MatchaErrorType,\n  services,\n  allowedTopLevelDomains\n} from './registry'\n\n/**\n * Instance of registry class\n *\n * It has all required methods - resolve, lookup, resolveAll, lookupAll\n *\n * For advanced users: you can register your own name service via registerService method. It\n * accepts NameService (abstract) class instance as an argument.\n */\nconst registry = new Registry('mainnet')\n\nexport type { Registry, NameService, MatchaError, MatchaErrorType }\n\nexport { services, allowedTopLevelDomains, registry as default }\n"],"names":["ALPHABET","ALPHABET_MAP","z","x","polymodStep","pre","b","prefixChk","prefix","chk","i","c","v","encode","words","LIMIT","result","__decode","str","lowered","uppered","split","wordChars","decodeUnsafe","res","decode","convert","data","inBits","outBits","pad","value","bits","maxV","toWordsUnsafe","bytes","toWords","fromWordsUnsafe","fromWords","bech32","MatchaErrorType","MatchaError","message","errorType","__publicField","_CosmWasmClientHandler","CosmWasmClientHandler","rpcUrl","_client","CosmWasmClient","NameService","rpcUrls","serviceID","ICNS","name","network","allowedTopLevelDomains","client","username","_a","address","addr","IBCDomains","junoAddress","StargazeNames","ArchIdNames","supportedTopLevelDomainListForAllChains","services","_icnsID","_ibcDomainsID","_stargazeNamesID","_archId","allowedTopLevelDomainData","Registry","service","record","registry"],"mappings":"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","x_google_ignoreList":[0]}