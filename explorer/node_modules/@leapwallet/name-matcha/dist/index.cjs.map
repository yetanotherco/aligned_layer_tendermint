{"version":3,"file":"index.cjs","sources":["../node_modules/bech32/index.js","../src/registry/name-service.ts","../src/registry/icns.ts","../src/registry/ibc-domains.ts","../src/registry/stargaze-names.ts","../src/registry/arch-id.ts","../src/utils/domain.ts","../src/registry/registry.ts","../src/index.ts"],"sourcesContent":["'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n","import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate'\n/**\n * Types of errors\n */\nexport enum MatchaErrorType {\n  NETWORK = 'network',\n  NOT_FOUND = 'not-found',\n  UNREGISTERED_SERVICE = 'unregistered-service',\n  DUPLICATE_SERVICE = 'duplicate-service',\n  INVALID_ADDRESS = 'invalid-address'\n}\n\n/**\n * Custom error class\n */\nexport class MatchaError extends Error {\n  public type: MatchaErrorType\n  constructor(message: string, errorType: MatchaErrorType) {\n    super(message)\n    this.name = 'MatchaError'\n    this.type = errorType\n  }\n}\n\nexport type Addr = {\n  prefix: string | null\n  words: number[] | null\n}\n\nexport type Network = 'mainnet' | 'testnet'\n\nexport type AllowedTopLevelDomains = {\n  icns?: string[]\n  ibcDomains?: string[]\n  archIds?: string[]\n  stargazeNames?: string[]\n}\n\nclass CosmWasmClientHandler {\n  private static clients: { [key: string]: CosmWasmClient } = {}\n\n  static getClient = async (rpcUrl: string) => {\n    let _client = this.clients[rpcUrl]\n    if (_client === undefined) {\n      _client = await CosmWasmClient.connect(rpcUrl)\n      this.clients[rpcUrl] = _client\n    }\n    return _client\n  }\n}\n\n/**\n * What a NameService class needs to implement\n */\nexport abstract class NameService {\n  /**\n   * The unique identifier of the name service\n   */\n  abstract serviceID: string\n  /**\n   * The chain on which the name service is deployed\n   */\n  abstract chain: string\n  /**\n   * The contract address of the name service\n   */\n  abstract contractAddress: {\n    [key in Network]: string\n  }\n  /**\n   * @param name Resolve this name into an address\n   */\n  abstract resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string>\n  /**\n   * @param address Lookup this address and returns primary name\n   */\n  abstract lookup(address: string, network: Network): Promise<string>\n  /**\n   * @param network The network to use\n   */\n  getCosmWasmClient(rpcUrl: string): Promise<CosmWasmClient> {\n    return CosmWasmClientHandler.getClient(rpcUrl)\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/osmosis',\n  testnet: 'https://rpc-test.osmosis.zone'\n}\n\nexport const serviceID = 'icns'\n\nexport class ICNS extends NameService {\n  serviceID = serviceID\n  chain = 'osmosis'\n  contractAddress = {\n    mainnet: 'osmo1xk0s8xgktn9x5vwcgtjdxqzadg88fgn33p8u9cnpdxwemvxscvast52cdd',\n    testnet: 'osmo1q2qpencrnnlamwalxt6tac2ytl35z5jejn0v4frnp6jff7gwp37sjcnhu5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          address: {\n            name: username,\n            bech32_prefix: prefix\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        allowedTopLevelDomains?.icns?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_name: {\n            address\n          }\n        }\n      )\n      if (!res?.name) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.name}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/juno',\n  testnet: 'https://rpc.uni.kingnodes.com'\n}\n\nexport const serviceID = 'ibcDomains'\n\nexport class IBCDomains extends NameService {\n  serviceID = serviceID\n  chain = 'juno'\n  contractAddress = {\n    mainnet: 'juno1ce7wjfsuk79t2mdvpdjtv8280pcc64yh9mh62qptuvxe64twt4pqa68z2a',\n    testnet: 'juno19al2ptpxz3xk6q8nl3eyvyslkz8g6nz25w48dfpaepwaxavq3mhqsjjqe5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          owner_of: {\n            token_id: username\n          }\n        }\n      )\n      if (\n        !res?.owner ||\n        allowedTopLevelDomains?.ibcDomains?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res.owner)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    const junoAddress = encode('juno', addr.words)\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_domain: {\n            address: junoAddress\n          }\n        }\n      )\n      if (!res?.domain) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.domain}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/stargaze',\n  testnet: 'https://rpc.elgafar-1.stargaze-apis.com'\n}\n\nexport const serviceID = 'stargazeNames'\n\nexport class StargazeNames extends NameService {\n  serviceID = serviceID\n  chain = 'stargaze'\n  contractAddress = {\n    mainnet: 'stars1fx74nkqkw2748av8j7ew7r3xt9cgjqduwn8m0ur5lhe49uhlsasszc5fhr',\n    testnet: 'stars1rp5ttjvd5g0vlpltrkyvq62tcrdz949gjtpah000ynh4n2laz52qarz2z8'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          associated_address: {\n            name: username\n          }\n        }\n      )\n\n      if (\n        !res ||\n        allowedTopLevelDomains?.stargazeNames?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          name: {\n            address\n          }\n        }\n      )\n      return `${res}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.mainnet.archway.io',\n  testnet: 'https://rpc.constantine.archway.tech'\n}\n\nexport const serviceID = 'archIds'\n\nexport class ArchIdNames extends NameService {\n  serviceID = serviceID\n  chain = 'archway'\n  contractAddress = {\n    mainnet:\n      'archway1275jwjpktae4y4y0cdq274a2m0jnpekhttnfuljm6n59wnpyd62qppqxq0',\n    testnet:\n      'archway1lr8rstt40s697hqpedv2nvt27f4cuccqwvly9gnvuszxmcevrlns60xw4r'\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-resolve-address-js\n\n  async resolve(\n    name: string,\n    network: Network,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const [, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_record: {\n            name: name\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        allowedTopLevelDomains?.archIds?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-check-domains-resolve-to-address-js\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_address: {\n            address: address\n          }\n        }\n      )\n      if (!res?.names || !res?.names?.length) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.names.join(', ')\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { AllowedTopLevelDomains } from '../registry/name-service'\n\nexport const supportedTopLevelDomainListForAllChains = [\n  'agoric',\n  'akash',\n  'arkh',\n  'axelar',\n  'band',\n  'bcna',\n  'bitsong',\n  'bostrom',\n  'cerberus',\n  'certik',\n  'cheqd',\n  'chihuahua',\n  'chronic',\n  'comdex',\n  'cosmos',\n  'crc',\n  'cre',\n  'cro',\n  'cudos',\n  'darc',\n  'decentr',\n  'desmos',\n  'dig',\n  'echelon',\n  'emoney',\n  'evmos',\n  'fetch',\n  'firma',\n  'galaxy',\n  'genesis',\n  'gravity',\n  'iaa',\n  'inj',\n  'ixo',\n  'juno',\n  'kava',\n  'ki',\n  'like',\n  'logos',\n  'lum',\n  'mantle',\n  'mars',\n  'meme',\n  'micro',\n  'mythos',\n  'nomic',\n  'octa',\n  'odin',\n  'orai',\n  'osmo',\n  'panacea',\n  'pb',\n  'persistence',\n  'regen',\n  'rizon',\n  'secret',\n  'sent',\n  'sif',\n  'somm',\n  'star',\n  'stars',\n  'swth',\n  'terra',\n  'thor',\n  'umee',\n  'vdl',\n  'kujira',\n  'sei',\n  'stride',\n  'jkl',\n  'tori',\n  'omniflix',\n  'canto',\n  'pasg',\n  'archway',\n  'quasar',\n  'neutron',\n  'testcore',\n  'core',\n  'quick',\n  'migaloo',\n  'kyve',\n  'onomy',\n  'noble',\n  'plq',\n  'nolus',\n  'c4e',\n  'gitopia',\n  'nibi',\n  'maya',\n  'empower',\n  'dydx'\n]\n\nexport const allowedTopLevelDomains: AllowedTopLevelDomains = {\n  icns: supportedTopLevelDomainListForAllChains,\n  ibcDomains: supportedTopLevelDomainListForAllChains,\n  stargazeNames: supportedTopLevelDomainListForAllChains,\n  archIds: ['arch']\n}\n","import { ICNS, serviceID as _icnsID } from './icns'\nimport { IBCDomains, serviceID as _ibcDomainsID } from './ibc-domains'\nimport { StargazeNames, serviceID as _stargazeNamesID } from './stargaze-names'\nimport { ArchIdNames, serviceID as _archId } from './arch-id'\nimport {\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\nimport { allowedTopLevelDomains as allowedTopLevelDomainData } from '../utils/domain'\n\nexport const services = {\n  icns: _icnsID,\n  ibcDomains: _ibcDomainsID,\n  stargazeNames: _stargazeNamesID,\n  archIds: _archId\n}\n\nexport const allowedTopLevelDomains = allowedTopLevelDomainData\n\nexport class Registry {\n  private services: { [key: string]: NameService } = {}\n\n  constructor(private network: Network) {\n    this.network = network\n    this.registerService(new ICNS())\n    this.registerService(new IBCDomains())\n    this.registerService(new StargazeNames())\n    this.registerService(new ArchIdNames())\n  }\n\n  registerService(service: NameService) {\n    if (this.services[service.serviceID]) {\n      throw new MatchaError(\n        'Service already registered',\n        MatchaErrorType.DUPLICATE_SERVICE\n      )\n    }\n    this.services[service.serviceID] = service\n  }\n\n  private getService(serviceID: string): NameService {\n    const service = this.services[serviceID]\n    if (!service) {\n      throw new MatchaError(\n        'Service not registered',\n        MatchaErrorType.UNREGISTERED_SERVICE\n      )\n    }\n    return service\n  }\n\n  listServices(): string[] {\n    return Object.keys(this.services)\n  }\n\n  setNetwork(network: Network) {\n    this.network = network\n  }\n\n  getNetwork(): Network {\n    return this.network\n  }\n\n  async resolve(\n    name: string,\n    serviceID: string,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.resolve(name, this.network, allowedTopLevelDomains)\n  }\n\n  async lookup(address: string, serviceID: string): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.lookup(address, this.network)\n  }\n\n  async resolveAll(\n    name: string,\n    allowedTopLevelDomains?: AllowedTopLevelDomains\n  ) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.resolve(\n            name,\n            this.network,\n            allowedTopLevelDomains\n          )\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n\n  async lookupAll(address: string) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.lookup(address, this.network)\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n}\n","import {\n  Registry,\n  NameService,\n  MatchaError,\n  MatchaErrorType,\n  services,\n  allowedTopLevelDomains\n} from './registry'\n\n/**\n * Instance of registry class\n *\n * It has all required methods - resolve, lookup, resolveAll, lookupAll\n *\n * For advanced users: you can register your own name service via registerService method. It\n * accepts NameService (abstract) class instance as an argument.\n */\nconst registry = new Registry('mainnet')\n\nexport type { Registry, NameService, MatchaError, MatchaErrorType }\n\nexport { services, allowedTopLevelDomains, registry as default }\n"],"names":["ALPHABET","ALPHABET_MAP","z","x","polymodStep","pre","b","prefixChk","prefix","chk","i","c","v","encode","words","LIMIT","result","__decode","str","lowered","uppered","split","wordChars","decodeUnsafe","res","decode","convert","data","inBits","outBits","pad","value","bits","maxV","toWordsUnsafe","bytes","toWords","fromWordsUnsafe","fromWords","bech32","MatchaErrorType","MatchaError","message","errorType","__publicField","_CosmWasmClientHandler","CosmWasmClientHandler","rpcUrl","_client","CosmWasmClient","NameService","rpcUrls","serviceID","ICNS","name","network","allowedTopLevelDomains","client","username","_a","address","addr","IBCDomains","junoAddress","StargazeNames","ArchIdNames","supportedTopLevelDomainListForAllChains","services","_icnsID","_ibcDomainsID","_stargazeNamesID","_archId","allowedTopLevelDomainData","Registry","service","record","registry"],"mappings":"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CjB,OAAQ,KACR,MAAO,IAAA,EAEL,GAAA,CACF,KAAM,CAAE,OAAArD,EAAQ,MAAAM,CAAM,EAAIW,SAAOmC,CAAO,EACxCC,EAAK,OAASrD,EACdqD,EAAK,MAAQ/C,QAEb,MAAM,IAAI2B,EAAY,GAAID,EAAgB,eAAe,CAC3D,CACI,GAAA,CACI,MAAAhB,EAAM,MAAMiC,GAAA,YAAAA,EAAQ,mBACxB,KAAK,gBAAgBF,CAAO,EAC5B,CACE,gBAAiB,CACf,QAAAK,CACF,CACF,IAEF,GAAI,EAACpC,GAAA,MAAAA,EAAK,QAAS,GAACmC,EAAAnC,GAAA,YAAAA,EAAK,QAAL,MAAAmC,EAAY,QAC9B,MAAM,IAAIlB,EAAY,GAAID,EAAgB,SAAS,EAE9C,OAAAhB,EAAI,MAAM,KAAK,IAAI,QAE1B,MAAM,IAAIiB,EAAY,GAAID,EAAgB,SAAS,CACrD,CACF,CACF,CCzFO,MAAM0B,EAA0C,CACrD,SACA,QACA,OACA,SACA,OACA,OACA,UACA,UACA,WACA,SACA,QACA,YACA,UACA,SACA,SACA,MACA,MACA,MACA,QACA,OACA,UACA,SACA,MACA,UACA,SACA,QACA,QACA,QACA,SACA,UACA,UACA,MACA,MACA,MACA,OACA,OACA,KACA,OACA,QACA,MACA,SACA,OACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,OACA,UACA,KACA,cACA,QACA,QACA,SACA,OACA,MACA,OACA,OACA,QACA,OACA,QACA,OACA,OACA,MACA,SACA,MACA,SACA,MACA,OACA,WACA,QACA,OACA,UACA,SACA,UACA,WACA,OACA,QACA,UACA,OACA,QACA,QACA,MACA,QACA,MACA,UACA,OACA,OACA,UACA,MACF,EAEaV,EAAiD,CAC5D,KAAMU,EACN,WAAYA,EACZ,cAAeA,EACf,QAAS,CAAC,MAAM,CAClB,ECzFaC,EAAW,CACtB,KAAMC,EACN,WAAYC,EACZ,cAAeC,EACf,QAASC,CACX,EAEaf,EAAyBgB,EAE/B,MAAMC,CAAS,CAGpB,YAAoBlB,EAAkB,CAF9BX,EAAA,gBAA2C,CAAA,GAE/B,KAAA,QAAAW,EAClB,KAAK,QAAUA,EACV,KAAA,gBAAgB,IAAIF,CAAM,EAC1B,KAAA,gBAAgB,IAAIS,CAAY,EAChC,KAAA,gBAAgB,IAAIE,CAAe,EACnC,KAAA,gBAAgB,IAAIC,CAAa,CACxC,CAEA,gBAAgBS,EAAsB,CACpC,GAAI,KAAK,SAASA,EAAQ,SAAS,EACjC,MAAM,IAAIjC,EACR,6BACAD,EAAgB,iBAAA,EAGf,KAAA,SAASkC,EAAQ,SAAS,EAAIA,CACrC,CAEQ,WAAWtB,EAAgC,CAC3C,MAAAsB,EAAU,KAAK,SAAStB,CAAS,EACvC,GAAI,CAACsB,EACH,MAAM,IAAIjC,EACR,yBACAD,EAAgB,oBAAA,EAGb,OAAAkC,CACT,CAEA,cAAyB,CAChB,OAAA,OAAO,KAAK,KAAK,QAAQ,CAClC,CAEA,WAAWnB,EAAkB,CAC3B,KAAK,QAAUA,CACjB,CAEA,YAAsB,CACpB,OAAO,KAAK,OACd,CAEA,MAAM,QACJD,EACAF,EACAI,EACiB,CAEjB,OADgB,KAAK,WAAWJ,CAAS,EAC1B,QAAQE,EAAM,KAAK,QAASE,CAAsB,CACnE,CAEA,MAAM,OAAOI,EAAiBR,EAAoC,CAEhE,OADgB,KAAK,WAAWA,CAAS,EAC1B,OAAOQ,EAAS,KAAK,OAAO,CAC7C,CAEA,MAAM,WACJN,EACAE,EACA,CACA,MAAMmB,EAAwC,CAAA,EAC9C,aAAM,QAAQ,IACZ,OAAO,QAAQ,KAAK,QAAQ,EAAE,IAAI,MAAO,CAACvB,EAAWsB,CAAO,IAAM,CAC5D,GAAA,CACI,MAAA1D,EAAS,MAAM0D,EAAQ,QAC3BpB,EACA,KAAK,QACLE,CAAA,EAEFmB,EAAOvB,CAAS,EAAIpC,QAEpB2D,EAAOvB,CAAS,EAAI,IACtB,CAAA,CACD,CAAA,EAEIuB,CACT,CAEA,MAAM,UAAUf,EAAiB,CAC/B,MAAMe,EAAwC,CAAA,EAC9C,aAAM,QAAQ,IACZ,OAAO,QAAQ,KAAK,QAAQ,EAAE,IAAI,MAAO,CAACvB,EAAWsB,CAAO,IAAM,CAC5D,GAAA,CACF,MAAM1D,EAAS,MAAM0D,EAAQ,OAAOd,EAAS,KAAK,OAAO,EACzDe,EAAOvB,CAAS,EAAIpC,QAEpB2D,EAAOvB,CAAS,EAAI,IACtB,CAAA,CACD,CAAA,EAEIuB,CACT,CACF,CCnGM,MAAAC,GAAW,IAAIH,EAAS,SAAS","x_google_ignoreList":[0]}