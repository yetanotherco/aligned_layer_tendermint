"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _prompt = require("../utils/prompt");

var _index = _interopRequireDefault(require("../index"));

var _default = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(argv) {
    var questions, _yield$prompt, schema, out, name, plugin, bundle, questions2, _yield$prompt2, optionalClient, version, queryKeys, questions3, _yield$prompt3, mutations, queryFactoryQuestions, _yield$prompt4, queryFactory, questions4, _yield$prompt5, bundleFile, bundleScope, options;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            questions = [{
              _: true,
              type: 'path',
              name: 'schema',
              message: 'which directory contains the the Rust contracts?',
              "default": './schema'
            }, {
              _: true,
              type: 'path',
              name: 'out',
              message: 'where is the output directory?',
              "default": './ts'
            }, {
              _: true,
              type: 'string',
              name: 'name',
              message: 'contract name?'
            }, {
              type: 'checkbox',
              name: 'plugin',
              message: 'which plugins?',
              choices: ['client', 'recoil', 'react-query', 'message-composer']
            }, {
              type: 'confirm',
              name: 'bundle',
              message: 'enable bundle?',
              "default": true
            }];

            if (argv.typesOnly) {
              argv.plugin = 'types';
            }

            _context.next = 4;
            return (0, _prompt.prompt)(questions, argv);

          case 4:
            _yield$prompt = _context.sent;
            schema = _yield$prompt.schema;
            out = _yield$prompt.out;
            name = _yield$prompt.name;
            plugin = _yield$prompt.plugin;
            bundle = _yield$prompt.bundle;
            if (!Array.isArray(plugin)) plugin = [plugin]; ///////// REACT QUERY

            questions2 = [];

            if (plugin.includes('react-query')) {
              [].push.apply(questions2, [{
                type: 'confirm',
                name: 'optionalClient',
                message: 'optionalClient?',
                "default": false
              }, {
                type: 'list',
                name: 'version',
                message: 'which react-query version?',
                "default": 'v3',
                choices: ['v3', 'v4']
              }, {
                type: 'confirm',
                name: 'queryKeys',
                message: 'queryKeys?',
                "default": false
              }]);
            }

            ;
            _context.next = 16;
            return (0, _prompt.prompt)(questions2, argv);

          case 16:
            _yield$prompt2 = _context.sent;
            optionalClient = _yield$prompt2.optionalClient;
            version = _yield$prompt2.version;
            queryKeys = _yield$prompt2.queryKeys;
            questions3 = [];

            if (version === 'v4') {
              [].push.apply(questions3, [// currently we only support v4 for useMutation
              {
                type: 'confirm',
                name: 'mutations',
                message: 'Generate useMutation hooks?',
                "default": false
              }]);
            }

            ;
            _context.next = 25;
            return (0, _prompt.prompt)(questions3, argv);

          case 25:
            _yield$prompt3 = _context.sent;
            mutations = _yield$prompt3.mutations;
            queryFactoryQuestions = [];

            if (queryKeys) {
              [].push.apply(queryFactoryQuestions, [// Only can use queryFactory if queryKeys is enabled
              {
                type: 'confirm',
                name: 'queryFactory',
                message: 'queryFactory? ',
                "default": false
              }]);
            }

            ;
            _context.next = 32;
            return (0, _prompt.prompt)(queryFactoryQuestions, argv);

          case 32:
            _yield$prompt4 = _context.sent;
            queryFactory = _yield$prompt4.queryFactory;
            ///////// END REACT QUERY
            ///////// BUNDLE
            questions4 = [];

            if (bundle) {
              [].push.apply(questions4, [{
                type: 'string',
                name: 'bundleFile',
                message: 'bundleFile?',
                "default": 'index.ts'
              }, {
                type: 'string',
                name: 'bundleScope',
                message: 'bundleScope?',
                "default": 'contracts'
              }]);
            }

            ;
            _context.next = 39;
            return (0, _prompt.prompt)(questions4, argv);

          case 39:
            _yield$prompt5 = _context.sent;
            bundleFile = _yield$prompt5.bundleFile;
            bundleScope = _yield$prompt5.bundleScope;
            ///////// END BUNDLE
            options = {
              types: {
                enabled: true
              },
              client: {
                enabled: plugin.includes('client') || plugin.includes('recoil') || plugin.includes('react-query')
              },
              reactQuery: {
                enabled: plugin.includes('react-query'),
                optionalClient: optionalClient,
                queryKeys: queryKeys,
                version: version,
                mutations: mutations,
                queryFactory: queryFactory
              },
              recoil: {
                enabled: plugin.includes('recoil')
              },
              messageComposer: {
                enabled: plugin.includes('message-composer')
              },
              bundle: {
                enabled: bundle,
                scope: bundleScope,
                bundleFile: bundleFile
              }
            };
            _context.next = 45;
            return (0, _index["default"])({
              contracts: [{
                name: name,
                dir: schema
              }],
              outPath: out,
              options: options
            });

          case 45:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;