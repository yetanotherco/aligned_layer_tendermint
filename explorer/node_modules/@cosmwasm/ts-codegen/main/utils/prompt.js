"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prompt = exports.getFuzzySearchNames = exports.getFuzzySearch = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fuzzy = require("fuzzy");

var _inquirerer = require("inquirerer");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getFuzzySearch = function getFuzzySearch(list) {
  return function (answers, input) {
    input = input || '';
    return new Promise(function (resolve) {
      setTimeout(function () {
        var fuzzyResult = (0, _fuzzy.filter)(input, list);
        resolve(fuzzyResult.map(function (el) {
          return el.original;
        }));
      }, 25);
    });
  };
};

exports.getFuzzySearch = getFuzzySearch;

var getFuzzySearchNames = function getFuzzySearchNames(nameValueItemList) {
  var list = nameValueItemList.map(function (_ref) {
    var name = _ref.name,
        value = _ref.value;
    return name;
  });
  return function (answers, input) {
    input = input || '';
    return new Promise(function (resolve) {
      setTimeout(function () {
        var fuzzyResult = (0, _fuzzy.filter)(input, list);
        resolve(fuzzyResult.map(function (el) {
          return nameValueItemList.find(function (_ref2) {
            var name = _ref2.name,
                value = _ref2.value;
            return el.original == name;
          });
        }));
      }, 25);
    });
  };
};

exports.getFuzzySearchNames = getFuzzySearchNames;

var transform = function transform(questions) {
  return questions.map(function (q) {
    if (q.type === 'fuzzy') {
      var choices = q.choices;
      delete q.choices;
      return _objectSpread(_objectSpread({}, q), {}, {
        type: 'autocomplete',
        source: getFuzzySearch(choices)
      });
    } else if (q.type === 'fuzzy:objects') {
      var _choices = q.choices;
      delete q.choices;
      return _objectSpread(_objectSpread({}, q), {}, {
        type: 'autocomplete',
        source: getFuzzySearchNames(_choices)
      });
    } else {
      return q;
    }
  });
};

var prompt = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var questions,
        argv,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            questions = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];
            argv = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            questions = transform(questions);
            _context.next = 5;
            return (0, _inquirerer.prompt)(questions, argv);

          case 5:
            return _context.abrupt("return", _context.sent);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function prompt() {
    return _ref3.apply(this, arguments);
  };
}();

exports.prompt = prompt;