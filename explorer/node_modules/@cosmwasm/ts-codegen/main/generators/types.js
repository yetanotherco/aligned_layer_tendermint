"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _case = require("case");

var _header = require("../utils/header");

var _path = require("path");

var _mkdirp = require("mkdirp");

var t = _interopRequireWildcard(require("@babel/types"));

var _fs = require("fs");

var _generator = _interopRequireDefault(require("@babel/generator"));

var _clean = require("../utils/clean");

var _utils = require("../utils");

var _wasmAstTypes = require("wasm-ast-types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(name, contractInfo, outPath, tsTypesOptions) {
    var schemas, context, options, localname, ExecuteMsg, typeHash, body, imports, code, filename;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            schemas = contractInfo.schemas;
            context = new _wasmAstTypes.RenderContext(contractInfo, {
              types: tsTypesOptions !== null && tsTypesOptions !== void 0 ? tsTypesOptions : {}
            });
            options = context.options.types;
            localname = (0, _case.pascal)(name) + '.types.ts';
            ExecuteMsg = (0, _utils.findExecuteMsg)(schemas);
            _context.next = 7;
            return (0, _utils.findAndParseTypes)(schemas);

          case 7:
            typeHash = _context.sent;
            body = []; // TYPES

            Object.values(typeHash).forEach(function (type) {
              body.push((0, _clean.clean)(type));
            }); // alias the ExecuteMsg

            if (options.aliasExecuteMsg && ExecuteMsg) {
              body.push(t.exportNamedDeclaration(t.tsTypeAliasDeclaration(t.identifier("".concat(name, "ExecuteMsg")), null, t.tsTypeReference(t.identifier('ExecuteMsg')))));
            }

            imports = context.getImports();
            code = _header.header + (0, _generator["default"])(t.program([].concat((0, _toConsumableArray2["default"])(imports), body))).code;
            (0, _mkdirp.sync)(outPath);
            filename = (0, _path.join)(outPath, localname);
            (0, _fs.writeFileSync)(filename, code);
            return _context.abrupt("return", [{
              type: 'type',
              contract: name,
              localname: localname,
              filename: filename
            }]);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;