"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProtoResolver = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function depResolve(deps, protofile, resolved, unresolved) {
  var _dep$imports;

  unresolved.push(protofile);
  var dep = deps.find(function (dep) {
    return dep.filename === protofile;
  });

  if (!dep) {
    throw new Error("Dependency Not Found ".concat(protofile));
  }

  var imports = (_dep$imports = dep.imports) !== null && _dep$imports !== void 0 ? _dep$imports : [];

  for (var i = 0; i < imports.length; i++) {
    var _dep = imports[i];

    if (!resolved.includes(_dep)) {
      if (unresolved.includes(_dep)) {
        throw new Error("Circular reference detected ".concat(protofile, ", ").concat(_dep));
      }

      depResolve(deps, _dep, resolved, unresolved);
    }
  }

  resolved.push(protofile);
  var index = unresolved.indexOf(protofile);
  unresolved.splice(index);
}

var ProtoResolver = /*#__PURE__*/function () {
  function ProtoResolver(deps) {
    (0, _classCallCheck2["default"])(this, ProtoResolver);
    (0, _defineProperty2["default"])(this, "deps", void 0);
    this.deps = deps;
  }

  (0, _createClass2["default"])(ProtoResolver, [{
    key: "resolve",
    value: function resolve(proto) {
      var resolved = [];
      var unresolved = [];
      depResolve(this.deps, proto, resolved, unresolved);
      return resolved;
    }
  }, {
    key: "resolveAll",
    value: function resolveAll() {
      var resolved = [];
      var unresolved = [];
      var allFiles = this.deps.map(function (_ref) {
        var filename = _ref.filename;
        return filename;
      });
      var imports = (0, _toConsumableArray2["default"])(new Set(allFiles));
      var deps = [].concat((0, _toConsumableArray2["default"])(this.deps), [{
        "package": '_root',
        filename: '_root',
        imports: imports
      }]);
      depResolve(deps, '_root', resolved, unresolved);
      resolved.pop(); // pull _root off

      return resolved;
    }
  }]);
  return ProtoResolver;
}();

exports.ProtoResolver = ProtoResolver;