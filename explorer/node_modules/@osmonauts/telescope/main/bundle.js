"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parsePackage = exports.parseContextsForRegistry = exports.getPackagesBundled = exports.getPackages = exports.createFileBundle = exports.bundleRegistries = exports.bundlePackages = exports.bundleBaseRegistries = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _ast = require("@osmonauts/ast");
var dotty = _interopRequireWildcard(require("dotty"));
var _path = require("path");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// TODO move to store
var getPackages = function getPackages(store) {
  return store.getProtos().reduce(function (m, proto) {
    if (proto.proto["package"]) {
      m[proto.proto["package"]] = m[proto.proto["package"]] || [];
      m[proto.proto["package"]].push(proto);
    }
    return m;
  }, {});
};
exports.getPackages = getPackages;
var getPackagesBundled = function getPackagesBundled(store) {
  var objectified = {};
  var pkgs = getPackages(store);
  Object.keys(pkgs).forEach(function (key) {
    var _store$options$protot, _store$options$protot2, _store$options$protot3, _store$options$protot4;
    if ((_store$options$protot = store.options.prototypes) !== null && _store$options$protot !== void 0 && (_store$options$protot2 = _store$options$protot.excluded) !== null && _store$options$protot2 !== void 0 && (_store$options$protot3 = _store$options$protot2.packages) !== null && _store$options$protot3 !== void 0 && (_store$options$protot4 = _store$options$protot3.includes) !== null && _store$options$protot4 !== void 0 && _store$options$protot4.call(_store$options$protot3, key)) return;
    var files = pkgs[key];
    dotty.put(objectified, key, {
      pkg: key,
      files: files.filter(function (file) {
        var _store$options$protot5, _store$options$protot6, _store$options$protot7, _store$options$protot8;
        // TODO implement pattern
        var val = (_store$options$protot5 = store.options.prototypes) === null || _store$options$protot5 === void 0 ? void 0 : (_store$options$protot6 = _store$options$protot5.excluded) === null || _store$options$protot6 === void 0 ? void 0 : (_store$options$protot7 = _store$options$protot6.protos) === null || _store$options$protot7 === void 0 ? void 0 : (_store$options$protot8 = _store$options$protot7.includes) === null || _store$options$protot8 === void 0 ? void 0 : _store$options$protot8.call(_store$options$protot7, file.filename);
        if (typeof val === 'undefined') return true;
        return !val;
      })
    });
  });
  return objectified;
};
exports.getPackagesBundled = getPackagesBundled;
var bundlePackages = function bundlePackages(store) {
  var allPackages = getPackagesBundled(store);
  return Object.keys(allPackages).map(function (base) {
    var pkgs = allPackages[base];
    var bundleVariables = {};
    var bundleFile = (0, _path.join)(base, 'bundle.ts');
    var importPaths = [];
    parsePackage(store.options, pkgs, bundleFile, importPaths, bundleVariables);
    return {
      bundleVariables: bundleVariables,
      bundleFile: bundleFile,
      importPaths: importPaths,
      base: base
    };
  });
};

// TODO review bundle registry methods 
exports.bundlePackages = bundlePackages;
var bundleRegistries = function bundleRegistries(telescope) {
  var withMutations = telescope.contexts.filter(function (ctx) {
    return ctx.mutations.length;
  });
  var obj = withMutations.reduce(function (m, ctx) {
    var _m$ctx$ref$proto$pack;
    m[ctx.ref.proto["package"]] = (_m$ctx$ref$proto$pack = m[ctx.ref.proto["package"]]) !== null && _m$ctx$ref$proto$pack !== void 0 ? _m$ctx$ref$proto$pack : [];
    m[ctx.ref.proto["package"]].push(ctx);
    return m;
  }, {});
  return Object.entries(obj).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      pkg = _ref2[0],
      serviceProtos = _ref2[1];
    return {
      "package": pkg,
      contexts: serviceProtos
    };
  });
};
exports.bundleRegistries = bundleRegistries;
var bundleBaseRegistries = function bundleBaseRegistries(telescope) {
  var withMutations = telescope.contexts.filter(function (ctx) {
    return ctx.mutations.length;
  });
  var obj = withMutations.reduce(function (m, ctx) {
    var _m$base, _m$base$ctx$ref$proto;
    var base = ctx.ref.proto["package"].split('.')[0];
    m[base] = (_m$base = m[base]) !== null && _m$base !== void 0 ? _m$base : {};
    m[base][ctx.ref.proto["package"]] = (_m$base$ctx$ref$proto = m[base][ctx.ref.proto["package"]]) !== null && _m$base$ctx$ref$proto !== void 0 ? _m$base$ctx$ref$proto : [];
    m[base][ctx.ref.proto["package"]].push(ctx);
    return m;
  }, {});
  return Object.entries(obj).map(function (_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
      pkg = _ref4[0],
      withServices = _ref4[1];
    var serviceProtos = Object.entries(withServices).map(function (_ref5) {
      var _ref6 = (0, _slicedToArray2["default"])(_ref5, 2),
        pkg = _ref6[0],
        withServices = _ref6[1];
      return {
        "package": pkg,
        contexts: withServices
      };
    });
    return {
      base: pkg,
      pkgs: serviceProtos
    };
  });
};
exports.bundleBaseRegistries = bundleBaseRegistries;
var parseContextsForRegistry = function parseContextsForRegistry(contexts) {
  return contexts.map(function (ctx) {
    var responses = ctx.mutations.map(function (m) {
      return m.response;
    });
    var imports = ctx.mutations.reduce(function (m, msg) {
      var _m$msg$messageImport;
      m[msg.messageImport] = (_m$msg$messageImport = m[msg.messageImport]) !== null && _m$msg$messageImport !== void 0 ? _m$msg$messageImport : [];
      m[msg.messageImport].push(msg.message);
      return m;
    }, {});
    return {
      filename: ctx.ref.filename,
      imports: imports,
      objects: ctx.types.filter(function (type) {
        return !type.isNested;
      }).filter(function (type) {
        return !responses.includes(type.name);
      }).map(function (type) {
        return type.name;
      })
    };
  });
};
exports.parseContextsForRegistry = parseContextsForRegistry;
var parsePackage = function parsePackage(options, obj, bundleFile, importPaths, bundleVariables) {
  if (!obj) return;
  if (obj.pkg && obj.files) {
    obj.files.forEach(function (file) {
      createFileBundle(options, obj.pkg, file.filename, bundleFile, importPaths, bundleVariables);
    });
    return;
  }
  Object.keys(obj).forEach(function (mini) {
    parsePackage(options, obj[mini], bundleFile, importPaths, bundleVariables);
  });
};
exports.parsePackage = parsePackage;
var counter = 0;
var createFileBundle = function createFileBundle(options, pkg, filename, bundleFile, importPaths, bundleVariables) {
  var rel = (0, _path.relative)((0, _path.dirname)(bundleFile), filename);
  if (!rel.startsWith('.')) rel = "./".concat(rel);
  var variable = "_".concat(counter++);
  importPaths.push((0, _ast.importNamespace)(variable, rel));
  dotty.put(bundleVariables, pkg + '.__export', true);
  dotty.put(bundleVariables, pkg + '.' + variable, true);
};
exports.createFileBundle = createFileBundle;