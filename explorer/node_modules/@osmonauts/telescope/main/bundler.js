"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bundler = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _path = require("path");
var _build = require("./build");
var _bundle = require("./bundle");
var _files = require("./utils/files");
var Bundler = /*#__PURE__*/function () {
  function Bundler(builder, bundle) {
    (0, _classCallCheck2["default"])(this, Bundler);
    (0, _defineProperty2["default"])(this, "builder", void 0);
    (0, _defineProperty2["default"])(this, "contexts", []);
    (0, _defineProperty2["default"])(this, "bundle", void 0);
    (0, _defineProperty2["default"])(this, "files", void 0);
    (0, _defineProperty2["default"])(this, "converters", []);
    (0, _defineProperty2["default"])(this, "lcdClients", []);
    (0, _defineProperty2["default"])(this, "rpcQueryClients", []);
    (0, _defineProperty2["default"])(this, "rpcMsgClients", []);
    (0, _defineProperty2["default"])(this, "registries", []);
    (0, _defineProperty2["default"])(this, "stateManagers", {});
    this.builder = builder;
    this.bundle = bundle;
    this.files = [bundle.bundleFile];
  }
  (0, _createClass2["default"])(Bundler, [{
    key: "addStateManagers",
    value: function addStateManagers(type, files) {
      var state = this.stateManagers[type];
      if (!state) {
        this.stateManagers[type] = [];
      }
      [].push.apply(this.stateManagers[type], files);
      this.builder.addStateManagers(type, files);
    }
  }, {
    key: "addLCDClients",
    value: function addLCDClients(files) {
      [].push.apply(this.lcdClients, files);
      this.builder.addLCDClients(files);
    }
  }, {
    key: "addRPCQueryClients",
    value: function addRPCQueryClients(files) {
      [].push.apply(this.rpcQueryClients, files);
      this.builder.addRPCQueryClients(files);
    }
  }, {
    key: "addRPCMsgClients",
    value: function addRPCMsgClients(files) {
      [].push.apply(this.rpcMsgClients, files);
      this.builder.addRPCMsgClients(files);
    }
  }, {
    key: "addRegistries",
    value: function addRegistries(files) {
      [].push.apply(this.registries, files);
      this.builder.addRegistries(files);
    }
  }, {
    key: "addConverters",
    value: function addConverters(files) {
      [].push.apply(this.converters, files);
      this.builder.addConverters(files);
    }
  }, {
    key: "getFreshContext",
    value: function getFreshContext(context) {
      return new _build.TelescopeParseContext(context.ref, context.store, this.builder.options);
    }
  }, {
    key: "getLocalFilename",
    value: function getLocalFilename(ref, suffix) {
      return suffix ? ref.filename.replace(/\.proto$/, ".".concat(suffix, ".ts")) : ref.filename.replace(/\.proto$/, ".ts");
    }
  }, {
    key: "getFilename",
    value: function getFilename(localname) {
      return (0, _path.resolve)((0, _path.join)(this.builder.outPath, localname));
    }
  }, {
    key: "writeAst",
    value: function writeAst(program, filename) {
      (0, _files.writeAstToFile)(this.builder.outPath, this.builder.options, program, filename);
    }

    // addToBundle adds the path into the namespaced bundle object
  }, {
    key: "addToBundle",
    value: function addToBundle(context, localname) {
      (0, _bundle.createFileBundle)(this.builder.options, context.ref.proto["package"], localname, this.bundle.bundleFile, this.bundle.importPaths, this.bundle.bundleVariables);
    }
  }, {
    key: "addToBundleToPackage",
    value: function addToBundleToPackage(packagename, localname) {
      (0, _bundle.createFileBundle)(this.builder.options, packagename, localname, this.bundle.bundleFile, this.bundle.importPaths, this.bundle.bundleVariables);
    }
  }]);
  return Bundler;
}();
exports.Bundler = Bundler;