"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cli = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _prompt = require("./prompt");
var _cmds = require("./cmds");
var cli = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(argv) {
    var _yield$prompt, _cmd, _yield$prompt2, cmd;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!argv.contract) {
              _context.next = 12;
              break;
            }
            _context.next = 3;
            return (0, _prompt.prompt)([{
              _: true,
              type: 'fuzzy',
              name: 'cmd',
              message: 'what do you want to do?',
              choices: Object.keys(_cmds.Contracts)
            }], argv);
          case 3:
            _yield$prompt = _context.sent;
            _cmd = _yield$prompt.cmd;
            if (!(typeof _cmds.Contracts[_cmd] === 'function')) {
              _context.next = 10;
              break;
            }
            _context.next = 8;
            return _cmds.Contracts[_cmd](argv);
          case 8:
            _context.next = 11;
            break;
          case 10:
            console.log('command not found.');
          case 11:
            return _context.abrupt("return");
          case 12:
            _context.next = 14;
            return (0, _prompt.prompt)([{
              _: true,
              type: 'fuzzy',
              name: 'cmd',
              message: 'what do you want to do?',
              choices: Object.keys(_cmds.Commands)
            }], argv);
          case 14:
            _yield$prompt2 = _context.sent;
            cmd = _yield$prompt2.cmd;
            if (!(typeof _cmds.Commands[cmd] === 'function')) {
              _context.next = 21;
              break;
            }
            _context.next = 19;
            return _cmds.Commands[cmd](argv);
          case 19:
            _context.next = 22;
            break;
          case 21:
            console.log('command not found.');
          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function cli(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.cli = cli;