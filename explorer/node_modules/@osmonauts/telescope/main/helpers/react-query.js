"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reactQuery = void 0;
var reactQuery = "import { getRpcClient } from './extern'\nimport {\n    useQuery,\n    UseQueryOptions,\n} from '@tanstack/react-query';\n\nimport { HttpEndpoint, ProtobufRpcClient } from '@cosmjs/stargate';\nimport { Tendermint34Client } from '@cosmjs/tendermint-rpc';\n\nexport interface ReactQueryParams<TResponse, TData = TResponse> {\n    options?: UseQueryOptions<TResponse, Error, TData>;\n}\n\nexport interface UseRpcClientQuery<TData> extends ReactQueryParams<ProtobufRpcClient, TData> {\n    rpcEndpoint: string | HttpEndpoint;\n}\n\nexport interface UseRpcEndpointQuery<TData> extends ReactQueryParams<string | HttpEndpoint, TData> {\n    getter: () => Promise<string | HttpEndpoint>;\n}\n\nexport const useRpcEndpoint = <TData = string | HttpEndpoint>({\n    getter,\n    options,\n}: UseRpcEndpointQuery<TData>) => {\n    return useQuery<string | HttpEndpoint, Error, TData>(['rpcEndpoint', getter], async () => {\n        return await getter();\n    }, options);\n};\n\nexport const useRpcClient = <TData = ProtobufRpcClient>({\n    rpcEndpoint,\n    options,\n}: UseRpcClientQuery<TData>) => {\n    return useQuery<ProtobufRpcClient, Error, TData>(['rpcClient', rpcEndpoint], async () => {\n        return await getRpcClient(rpcEndpoint);\n    }, options);\n};\n\ninterface UseTendermintClient extends ReactQueryParams<Tendermint34Client> {\n    rpcEndpoint: string | HttpEndpoint;\n}\n\n/**\n * Hook that uses react-query to cache a connected tendermint client.\n */\nexport const useTendermintClient = ({\n    rpcEndpoint,\n    options,\n}: UseTendermintClient) => {\n    const { data: client } = useQuery<Tendermint34Client, Error, Tendermint34Client>(\n        ['client', 'tendermint', rpcEndpoint],\n        () => Tendermint34Client.connect(rpcEndpoint),\n        {\n            // allow overriding\n            onError: (e) => {\n                throw new Error(`Failed to connect to ${rpcEndpoint}` + '\\n' + e)\n            },\n            ...options,\n        }\n    )\n    return { client }\n};\n";
exports.reactQuery = reactQuery;