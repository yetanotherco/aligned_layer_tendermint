"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _prompt = require("../prompt");
var _tsCodegen = require("@cosmwasm/ts-codegen");
var _contracts = require("../utils/contracts");
var _default = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(argv) {
    var contracts, questions, _yield$prompt, schema, out, s;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            contracts = (0, _contracts.getContracts)();
            questions = [{
              _: true,
              type: 'checkbox',
              name: 'schema',
              message: 'which directory contains the the Rust contracts?',
              choices: contracts
            }, {
              _: true,
              type: 'path',
              name: 'out',
              message: 'where is the output directory?',
              "default": './src/contracts'
            }];
            _context2.next = 4;
            return (0, _prompt.prompt)(questions, argv);
          case 4:
            _yield$prompt = _context2.sent;
            schema = _yield$prompt.schema;
            out = _yield$prompt.out;
            if (!Array.isArray(schema)) schema = [schema];
            _context2.next = 10;
            return schema, out, argv;
          case 10:
            s = _context2.sent;
            s.forEach( /*#__PURE__*/function () {
              var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
                var contractName, schemas, outPath;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        contractName = _ref2.contractName, schemas = _ref2.schemas, outPath = _ref2.outPath;
                        _context.next = 3;
                        return (0, _tsCodegen.generateReactQuery)(contractName, schemas, outPath);
                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return function (_x2) {
                return _ref3.apply(this, arguments);
              };
            }());
          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();
exports["default"] = _default;