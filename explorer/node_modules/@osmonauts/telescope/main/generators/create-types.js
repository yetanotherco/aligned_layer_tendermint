"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _imports = require("../imports");
var _parse = require("../parse");
var _fs = require("fs");
var _path = require("path");
var _mkdirp = require("mkdirp");
var _protoParser = require("@osmonauts/proto-parser");
var _ast = require("@osmonauts/ast");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var isExcluded = function isExcluded(builder, ref) {
  var _builder$options$prot, _builder$options$prot2, _builder$options$prot3, _builder$options$prot4, _builder$options$prot5, _builder$options$prot6;
  return ((_builder$options$prot = builder.options.prototypes) === null || _builder$options$prot === void 0 ? void 0 : (_builder$options$prot2 = _builder$options$prot.excluded) === null || _builder$options$prot2 === void 0 ? void 0 : (_builder$options$prot3 = _builder$options$prot2.protos) === null || _builder$options$prot3 === void 0 ? void 0 : _builder$options$prot3.includes(ref.filename)) || ((_builder$options$prot4 = builder.options.prototypes) === null || _builder$options$prot4 === void 0 ? void 0 : (_builder$options$prot5 = _builder$options$prot4.excluded) === null || _builder$options$prot5 === void 0 ? void 0 : (_builder$options$prot6 = _builder$options$prot5.packages) === null || _builder$options$prot6 === void 0 ? void 0 : _builder$options$prot6.includes(ref.proto["package"]));
};
var plugin = function plugin(builder, bundler) {
  // [x] search for all files that live in package
  var baseProtos = builder.store.getProtos().filter(function (ref) {
    return ref.proto["package"].split('.')[0] === bundler.bundle.base;
  });

  // [x] write out all TS files for package
  bundler.contexts = baseProtos.map(function (ref) {
    var context = builder.context(ref);
    if (isExcluded(builder, ref)) return;
    (0, _parse.parse)(context);
    context.buildBase();

    //// Anything except Msg Service OK...
    var allowedRpcServices = builder.options.rpcClients.enabledServices.filter(function (a) {
      return a !== 'Msg';
    });
    if (context.proto.pluginValue('rpcClients.inline')) {
      var proto = (0, _protoParser.getNestedProto)(context.ref.traversed);
      allowedRpcServices.forEach(function (svcKey) {
        if (proto[svcKey]) {
          context.body.push((0, _ast.createRpcClientInterface)(context.generic, proto[svcKey]));
          context.body.push((0, _ast.createRpcClientClass)(context.generic, proto[svcKey]));
          if (context.proto.pluginValue('rpcClients.extensions')) {
            context.body.push((0, _ast.createRpcQueryExtension)(context.generic, proto[svcKey]));
          }
        }
      });
      if (proto.Msg) {
        context.body.push((0, _ast.createRpcClientInterface)(context.generic, proto.Msg));
        context.body.push((0, _ast.createRpcClientClass)(context.generic, proto.Msg));
      }
    }

    // build BASE file
    var importStmts = (0, _imports.buildAllImports)(context, null, context.ref.filename);
    var prog = [].concat(importStmts);

    // package var
    if (context.proto.pluginValue('prototypes.includePackageVar')) {
      prog.push(t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier('protobufPackage'), t.stringLiteral(context.ref.proto["package"]))])));
    }

    // body
    prog.push.apply(prog, context.body);
    var localname = bundler.getLocalFilename(ref);
    var filename = bundler.getFilename(localname);
    if (context.body.length > 0) {
      bundler.writeAst(prog, filename);
    } else {
      (0, _mkdirp.sync)((0, _path.dirname)(filename));
      (0, _fs.writeFileSync)(filename, "export {}");
    }
    return context;
  }).filter(Boolean);
};
exports.plugin = plugin;