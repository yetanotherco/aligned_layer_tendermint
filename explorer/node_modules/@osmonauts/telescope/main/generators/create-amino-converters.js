"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _imports = require("../imports");
var _parse = require("../parse");
var plugin = function plugin(builder, bundler) {
  var aminoEncoding = builder.options.aminoEncoding;
  if (!aminoEncoding.enabled) {
    return;
  }
  var mutationContexts = bundler.contexts.filter(function (context) {
    return context.mutations.length > 0;
  });
  var converters = mutationContexts.map(function (c) {
    var aminoEncodingEnabled = c.amino.pluginValue('aminoEncoding.enabled');
    if (!aminoEncodingEnabled) {
      return;
    }
    if (c.proto.isExcluded()) {
      return;
    }
    var localname = bundler.getLocalFilename(c.ref, 'amino');
    var filename = bundler.getFilename(localname);
    var ctx = bundler.getFreshContext(c);

    // get mutations, services
    (0, _parse.parse)(ctx);

    // now let's amino...
    ctx.buildAminoInterfaces();
    ctx.buildAminoConverter();
    var serviceImports = (0, _imports.getDepsFromMutations)(ctx.mutations, localname);

    // build file
    var imports = (0, _imports.buildAllImports)(ctx, serviceImports, localname);
    var prog = [].concat(imports).concat(ctx.body);
    bundler.writeAst(prog, filename);
    bundler.addToBundle(c, localname);
    return {
      "package": c.ref.proto["package"],
      localname: localname,
      filename: filename
    };
  }).filter(Boolean);
  bundler.addConverters(converters);
};
exports.plugin = plugin;