"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _imports = require("../imports");
var _protoParser = require("@osmonauts/proto-parser");
var _parse = require("../parse");
var _ast = require("@osmonauts/ast");
var plugin = function plugin(builder, bundler) {
  if (!builder.options.lcdClients.enabled) {
    return;
  }
  var queryContexts = bundler.contexts.filter(function (context) {
    return context.queries.length > 0 || context.services.length > 0;
  });

  // [x] write out one registry helper for all contexts w/mutations
  var lcdClients = queryContexts.map(function (c) {
    var enabled = c.proto.pluginValue('lcdClients.enabled');
    if (!enabled) return;
    if (c.proto.isExcluded()) return;
    var ctx = bundler.getFreshContext(c);

    // get mutations, services
    (0, _parse.parse)(ctx);
    var proto = (0, _protoParser.getNestedProto)(c.ref.traversed);

    //// Anything except Msg Service OK...
    var allowedRpcServices = builder.options.rpcClients.enabledServices.filter(function (a) {
      return a !== 'Msg';
    });
    var found = allowedRpcServices.some(function (svc) {
      var _proto$svc;
      return (proto === null || proto === void 0 ? void 0 : proto[svc]) && ((_proto$svc = proto[svc]) === null || _proto$svc === void 0 ? void 0 : _proto$svc.type) === 'Service';
    });
    if (!found) {
      return;
    }
    ///

    var getImportsFrom;

    // get imports
    allowedRpcServices.forEach(function (svcKey) {
      if (proto[svcKey]) {
        if (svcKey === 'Query') {
          getImportsFrom = ctx.queries;
        } else {
          getImportsFrom = ctx.services;
        }
      }
    });
    var localname = bundler.getLocalFilename(c.ref, 'lcd');
    var filename = bundler.getFilename(localname);
    var ast = null;
    allowedRpcServices.forEach(function (svcKey) {
      if (proto[svcKey]) {
        ast = (0, _ast.createLCDClient)(ctx.generic, proto[svcKey]);
      }
    });
    if (!ast) {
      return;
    }
    var serviceImports = (0, _imports.getDepsFromQueries)(getImportsFrom, localname);
    var imports = (0, _imports.buildAllImports)(ctx, serviceImports, localname);
    var prog = [].concat(imports).concat(ctx.body).concat(ast);
    bundler.writeAst(prog, filename);
    bundler.addToBundle(c, localname);
    return {
      // TODO use this to build LCD aggregators with scopes
      "package": c.ref.proto["package"],
      localname: localname,
      filename: filename
    };
  }).filter(Boolean);
  bundler.addLCDClients(lcdClients);
};
exports.plugin = plugin;