"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _imports = require("../imports");
var _parse = require("../parse");
var plugin = function plugin(builder, bundler) {
  if (!builder.options.aminoEncoding.enabled) {
    return;
  }
  var mutationContexts = bundler.contexts.filter(function (context) {
    return context.mutations.length > 0;
  });

  // [x] write out one registry helper for all contexts w/mutations
  var registries = mutationContexts.map(function (c) {
    var enabled = c.amino.pluginValue('aminoEncoding.enabled');
    if (!enabled) return;
    if (c.proto.isExcluded()) return;
    var localname = bundler.getLocalFilename(c.ref, 'registry');
    var filename = bundler.getFilename(localname);
    var ctx = bundler.getFreshContext(c);

    // get mutations, services
    (0, _parse.parse)(ctx);
    ctx.buildRegistry();
    ctx.buildRegistryLoader();
    ctx.buildHelperObject();
    var serviceImports = (0, _imports.getDepsFromMutations)(ctx.mutations, localname);
    var imports = (0, _imports.buildAllImports)(ctx, serviceImports, localname);
    var prog = [].concat(imports).concat(ctx.body);
    bundler.writeAst(prog, filename);
    bundler.addToBundle(c, localname);
    return {
      "package": c.ref.proto["package"],
      localname: localname,
      filename: filename
    };
  }).filter(Boolean);
  bundler.addRegistries(registries);
};
exports.plugin = plugin;