"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _imports = require("../imports");
var _ast = require("@osmonauts/ast");
var _protoParser = require("@osmonauts/proto-parser");
var _parse = require("../parse");
var plugin = function plugin(builder, bundler) {
  // if (!builder.options.rpcClients.enabled) {
  //     return;
  // }

  var mutationContexts = bundler.contexts.filter(function (context) {
    return context.mutations.length > 0;
  });
  var clients = mutationContexts.map(function (c) {
    var _proto$Msg;
    var enabled = c.proto.pluginValue('rpcClients.enabled');
    if (!enabled) return;
    var inline = c.proto.pluginValue('rpcClients.inline');
    if (inline) return;
    if (c.proto.isExcluded()) return;
    var localname = bundler.getLocalFilename(c.ref, 'rpc.msg');
    var filename = bundler.getFilename(localname);
    var ctx = bundler.getFreshContext(c);

    // get mutations, services
    (0, _parse.parse)(ctx);
    var proto = (0, _protoParser.getNestedProto)(c.ref.traversed);
    // hard-coding, for now, only Msg service
    if (!(proto !== null && proto !== void 0 && proto.Msg) || ((_proto$Msg = proto.Msg) === null || _proto$Msg === void 0 ? void 0 : _proto$Msg.type) !== 'Service') {
      return;
    }

    //////// 
    var asts = [];
    switch (c.proto.pluginValue("rpcClients.type")) {
      case 'grpc-gateway':
        asts.push((0, _ast.createGRPCGatewayMsgClass)(ctx.generic, proto.Msg));
        break;
      case 'grpc-web':
        asts.push((0, _ast.createGrpcWebMsgInterface)(ctx.generic, proto.Msg));
        asts.push((0, _ast.createGrpcWebMsgClass)(ctx.generic, proto.Msg));
        asts.push((0, _ast.GetDesc)(ctx.generic, proto.Msg));
        var Desces = (0, _ast.getMethodDesc)(ctx.generic, proto.Msg);
        for (var i = 0; i < Desces.length; i++) {
          var element = Desces[i];
          asts.push(element);
        }
        asts.push((0, _ast.grpcWebRpcInterface)());
        asts.push((0, _ast.getGrpcWebImpl)(ctx.generic));
        break;
      case 'tendermint':
      default:
        asts.push((0, _ast.createRpcClientInterface)(ctx.generic, proto.Msg));
        asts.push((0, _ast.createRpcClientClass)(ctx.generic, proto.Msg));
    }

    ////////

    var serviceImports = (0, _imports.getDepsFromQueries)(ctx.mutations, localname);

    // TODO we do NOT need all imports...
    var imports = (0, _imports.buildAllImports)(ctx, serviceImports, localname);
    var prog = [].concat(imports).concat(ctx.body).concat(asts);
    bundler.writeAst(prog, filename);
    bundler.addToBundle(c, localname);
    return {
      "package": c.ref.proto["package"],
      localname: localname,
      filename: filename
    };
  }).filter(Boolean);
  bundler.addRPCMsgClients(clients);
};
exports.plugin = plugin;