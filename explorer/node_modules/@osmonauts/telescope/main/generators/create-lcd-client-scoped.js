"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var dotty = _interopRequireWildcard(require("dotty"));
var _protoParser = require("@osmonauts/proto-parser");
var _path = require("path");
var _ast = require("@osmonauts/ast");
var _utils = require("../utils");
var _build = require("../build");
var _imports = require("../imports");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var plugin = function plugin(builder, bundler) {
  var _builder$options, _builder$options$lcdC;
  // if not enabled, exit
  if (!((_builder$options = builder.options) !== null && _builder$options !== void 0 && (_builder$options$lcdC = _builder$options.lcdClients) !== null && _builder$options$lcdC !== void 0 && _builder$options$lcdC.enabled)) {
    return;
  }

  // if no scopes, do them all!
  if (!builder.options.lcdClients.scoped || !builder.options.lcdClients.scoped.length) {
    // TODO inefficient
    // WE SHOULD NOT DO THIS IN A BUNDLER LOOP
    // MAKE SEPARATE PLUGIN
    return createAllLCDBundles(builder, bundler);
  }
  if (!builder.options.lcdClients.scopedIsExclusive) {
    // TODO inefficient
    // WE SHOULD NOT DO THIS IN A BUNDLER LOOP
    // MAKE SEPARATE PLUGIN
    createAllLCDBundles(builder, bundler);
  }

  // we have scopes!
  builder.options.lcdClients.scoped.forEach(function (lcd) {
    if (lcd.dir !== bundler.bundle.base) return;
    makeLCD(builder, bundler, lcd);
  });
};
exports.plugin = plugin;
var getFileName = function getFileName(dir, filename) {
  var localname = (0, _path.join)(dir, filename !== null && filename !== void 0 ? filename : 'lcd.ts');
  if (localname.endsWith('.ts')) return localname;
  return localname + '.ts';
};
var makeLCD = function makeLCD(builder, bundler, lcd) {
  var _lcd$methodName;
  var dir = lcd.dir;
  var packages = lcd.packages;
  var methodName = (_lcd$methodName = lcd.methodName) !== null && _lcd$methodName !== void 0 ? _lcd$methodName : 'createLCDClient';
  var localname = getFileName(dir, lcd.filename);
  var obj = {};
  builder.lcdClients.forEach(function (file) {
    // ADD all option
    // which defaults to including cosmos 
    // and defaults to base for each
    if (!packages.includes(file["package"])) {
      return;
    }
    var f = localname;
    var f2 = file.localname;
    var importPath = (0, _utils.getRelativePath)(f, f2);
    dotty.put(obj, file["package"], importPath);
  });
  var ctx = new _build.TelescopeParseContext({
    absolute: '',
    filename: localname,
    proto: {
      "package": dir,
      imports: null,
      root: {},
      importNames: null
    },
    traversed: {
      "package": dir,
      imports: null,
      root: {},
      importNames: null
    }
  }, builder.store, builder.options);
  var lcdast = (0, _ast.createScopedLCDFactory)(ctx.proto, obj, methodName, 'LCDQueryClient' // make option later
  );

  var imports = (0, _imports.aggregateImports)(ctx, {}, localname);
  var importStmts = (0, _imports.getImportStatements)(localname, (0, _toConsumableArray2["default"])((0, _utils.fixlocalpaths)(imports)));
  var prog = [].concat(importStmts).concat(lcdast);
  var filename = bundler.getFilename(localname);
  bundler.writeAst(prog, filename);
  if (lcd.addToBundle) {
    bundler.addToBundleToPackage("".concat(dir, ".ClientFactory"), localname);
  }
};

// TODO
/*
 move all options for lcd into previous `lcd` prop and 
 clean up all these many options for one nested object full of options
*/

var createAllLCDBundles = function createAllLCDBundles(builder, bundler) {
  if (!builder.options.lcdClients.bundle) return;

  // [x] loop through every bundle 
  // [x] if not cosmos, add all cosmos
  // [x] call makeLCD
  // [x] add to bundle

  var dir = bundler.bundle.base;
  var filename = 'lcd.ts';

  ///
  ///
  ///

  // refs with services
  var refs = builder.store.getProtos().filter(function (ref) {
    var proto = (0, _protoParser.getNestedProto)(ref.traversed);
    //// Anything except Msg Service OK...
    var allowedRpcServices = builder.options.rpcClients.enabledServices.filter(function (a) {
      return a !== 'Msg';
    });
    var found = allowedRpcServices.some(function (svc) {
      var _proto$svc;
      return (proto === null || proto === void 0 ? void 0 : proto[svc]) && ((_proto$svc = proto[svc]) === null || _proto$svc === void 0 ? void 0 : _proto$svc.type) === 'Service';
    });
    if (!found) {
      return;
    }
    ///

    return true;
  });
  var check = refs.filter(function (ref) {
    var _ref$proto$package$sp = ref.proto["package"].split('.'),
      _ref$proto$package$sp2 = (0, _slicedToArray2["default"])(_ref$proto$package$sp, 1),
      base = _ref$proto$package$sp2[0];
    return base === bundler.bundle.base;
  });
  if (!check.length) {
    // if there are no services
    // exit the plugin
    return;
  }
  var packages = refs.reduce(function (m, ref) {
    var _ref$proto$package$sp3 = ref.proto["package"].split('.'),
      _ref$proto$package$sp4 = (0, _slicedToArray2["default"])(_ref$proto$package$sp3, 1),
      base = _ref$proto$package$sp4[0];
    if (base === 'cosmos' || base === bundler.bundle.base) return (0, _toConsumableArray2["default"])(new Set([].concat((0, _toConsumableArray2["default"])(m), [ref.proto["package"]])));
    return m;
  }, []);
  makeLCD(builder, bundler, {
    dir: dir,
    filename: filename,
    packages: packages,
    addToBundle: true,
    methodName: 'createLCDClient'
  });
};