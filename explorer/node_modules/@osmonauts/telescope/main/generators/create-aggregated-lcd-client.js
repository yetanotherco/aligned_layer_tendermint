"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _imports = require("../imports");
var _protoParser = require("@osmonauts/proto-parser");
var _parse = require("../parse");
var _path = require("path");
var _ast = require("@osmonauts/ast");
var _build = require("../build");
var _files = require("../utils/files");
var _utils = require("../utils");
var isExcluded = function isExcluded(builder, ref) {
  var _builder$options$prot, _builder$options$prot2, _builder$options$prot3, _builder$options$prot4, _builder$options$prot5, _builder$options$prot6;
  return ((_builder$options$prot = builder.options.prototypes) === null || _builder$options$prot === void 0 ? void 0 : (_builder$options$prot2 = _builder$options$prot.excluded) === null || _builder$options$prot2 === void 0 ? void 0 : (_builder$options$prot3 = _builder$options$prot2.protos) === null || _builder$options$prot3 === void 0 ? void 0 : _builder$options$prot3.includes(ref.filename)) || ((_builder$options$prot4 = builder.options.prototypes) === null || _builder$options$prot4 === void 0 ? void 0 : (_builder$options$prot5 = _builder$options$prot4.excluded) === null || _builder$options$prot5 === void 0 ? void 0 : (_builder$options$prot6 = _builder$options$prot5.packages) === null || _builder$options$prot6 === void 0 ? void 0 : _builder$options$prot6.includes(ref.proto["package"]));
};
var plugin = function plugin(builder) {
  if (!builder.options.aggregatedLCD) {
    return;
  }
  var opts = builder.options.aggregatedLCD;
  var dir = opts.dir,
    fname = opts.filename,
    packages = opts.packages;
  var localname = (0, _path.join)(dir, fname);
  var refs = builder.store.filterProtoWhere(function (ref) {
    return packages.includes(ref.proto["package"]) && !isExcluded(builder, ref);
  });
  var services = refs.map(function (ref) {
    var _proto$Query;
    var proto = (0, _protoParser.getNestedProto)(ref.traversed);
    if (!(proto !== null && proto !== void 0 && proto.Query) || ((_proto$Query = proto.Query) === null || _proto$Query === void 0 ? void 0 : _proto$Query.type) !== 'Service') {
      return;
    }
    return proto.Query;
  }).filter(Boolean);
  var tc = new _build.TelescopeParseContext(refs[0], builder.store, builder.options);
  var context = tc.proto;
  var lcdast = (0, _ast.createAggregatedLCDClient)(context, services, 'QueryClient');
  var importsForAggregator = (0, _imports.aggregateImports)(tc, {}, localname);

  /////////
  /////////
  /////////
  /////////

  var queryContexts = builder.contexts.filter(function (context) {
    return context.queries.length > 0 || context.services.length > 0;
  });
  var progImports = queryContexts.reduce(function (m, c) {
    if (!builder.options.aggregatedLCD.packages.includes(c.ref.proto["package"])) {
      return m;
    }
    var ctx = new _build.TelescopeParseContext(c.ref, c.store, builder.options);

    // get mutations, services
    (0, _parse.parse)(ctx);
    var proto = (0, _protoParser.getNestedProto)(c.ref.traversed);

    //// Anything except Msg Service OK...
    var allowedRpcServices = builder.options.rpcClients.enabledServices.filter(function (a) {
      return a !== 'Msg';
    });
    var found = allowedRpcServices.some(function (svc) {
      var _proto$svc;
      return (proto === null || proto === void 0 ? void 0 : proto[svc]) && ((_proto$svc = proto[svc]) === null || _proto$svc === void 0 ? void 0 : _proto$svc.type) === 'Service';
    });
    if (!found) {
      return;
    }
    ///

    var getImportsFrom;
    allowedRpcServices.forEach(function (svcKey) {
      if (proto[svcKey]) {
        if (svcKey === 'Query') {
          getImportsFrom = ctx.queries;
        } else {
          getImportsFrom = ctx.services;
        }
      }
    });
    var serviceImports = (0, _imports.getDepsFromQueries)(getImportsFrom, localname);
    var imports = (0, _imports.aggregateImports)(ctx, serviceImports, localname);
    return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])((0, _utils.fixlocalpaths)(imports)));
  }, []);
  var importStmts = (0, _imports.getImportStatements)(localname, [].concat((0, _toConsumableArray2["default"])(importsForAggregator), (0, _toConsumableArray2["default"])(progImports)));
  var prog = [].concat(importStmts).concat(lcdast);
  var filename = (0, _path.join)(builder.outPath, localname);
  (0, _files.writeAstToFile)(builder.outPath, builder.options, prog, filename);
};
exports.plugin = plugin;