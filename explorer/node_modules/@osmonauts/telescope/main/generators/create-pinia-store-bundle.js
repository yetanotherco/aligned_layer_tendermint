"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _utils = require("../utils");
var dotty = _interopRequireWildcard(require("dotty"));
var _ast = require("@osmonauts/ast");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var plugin = function plugin(builder) {
  var _builder$options, _builder$options$pini;
  // if not enabled, exit
  if (!((_builder$options = builder.options) !== null && _builder$options !== void 0 && (_builder$options$pini = _builder$options.pinia) !== null && _builder$options$pini !== void 0 && _builder$options$pini.enabled)) {
    return;
  }

  // get mapping of packages and rpc query filenames.
  var obj = {};
  var bundlerFiles = builder.stateManagers['pinia'];
  if (!bundlerFiles || !bundlerFiles.length) {
    return;
  }
  bundlerFiles.map(function (queryClient) {
    var path = "./".concat(queryClient.localname.replace(/\.ts$/, ''));
    dotty.put(obj, queryClient["package"], path);
  });
  (0, _utils.commonBundlePlugin)(builder, 'pinia.store.ts', obj, function (context, obj) {
    // generate code for createRpcQueryHooks and imports of related packages.
    return (0, _ast.createPiniaStoreFactory)(context, obj);
  });
};
exports.plugin = plugin;