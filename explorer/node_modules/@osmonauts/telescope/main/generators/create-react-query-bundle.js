"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _imports = require("../imports");
var _path = require("path");
var _ast = require("@osmonauts/ast");
var _build = require("../build");
var _files = require("../utils/files");
var _utils = require("../utils");
var dotty = _interopRequireWildcard(require("dotty"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var plugin = function plugin(builder) {
  // if react query is enabled
  // generate hooks.ts based on query hooks generated in each package.
  // eg: __fixtures__/output1/hooks.ts
  if (!builder.options.reactQuery.enabled) {
    return;
  }
  var localname = 'hooks.ts';

  // get mapping of packages and rpc query filenames.
  var obj = {};
  var bundlerFiles = builder.stateManagers["reactQuery"];
  if (!bundlerFiles || !bundlerFiles.length) {
    return;
  }
  bundlerFiles.map(function (bundlerFile) {
    var path = "./".concat(bundlerFile.localname.replace(/\.ts$/, ''));
    dotty.put(obj, bundlerFile["package"], path);
  });

  // create proto ref for context
  var pkg = '@root';
  var ref = {
    absolute: '',
    filename: localname,
    proto: {
      "package": pkg,
      imports: null,
      root: {},
      importNames: null
    },
    traversed: {
      "package": pkg,
      imports: null,
      root: {},
      importNames: null,
      acceptsInterface: {},
      implementsInterface: {},
      parsedExports: {},
      parsedImports: {},
      symbols: null
    }
  };

  // create context
  var pCtx = new _build.TelescopeParseContext(ref, builder.store, builder.options);

  // generate code for createRpcQueryHooks and imports of related packages.
  var ast = (0, _ast.createScopedRpcHookFactory)(pCtx.proto, obj, 'createRpcQueryHooks');

  // generate imports added by context.addUtil
  var imports = (0, _utils.fixlocalpaths)((0, _imports.aggregateImports)(pCtx, {}, localname));
  var importStmts = (0, _imports.getImportStatements)(localname, imports);

  // construct the AST
  var prog = [].concat(importStmts).concat(ast);

  // write the file.
  var filename = (0, _path.join)(builder.outPath, localname);
  builder.files.push(localname);
  (0, _files.writeAstToFile)(builder.outPath, builder.options, prog, filename);
};
exports.plugin = plugin;