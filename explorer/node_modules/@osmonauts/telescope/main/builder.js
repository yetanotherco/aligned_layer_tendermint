"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelescopeBuilder = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _protoParser = require("@osmonauts/proto-parser");
var _build2 = require("./build");
var _types = require("@osmonauts/types");
var _bundle = require("./bundle");
var _bundler = require("./bundler");
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _path = require("path");
var _createTypes = require("./generators/create-types");
var _createAminoConverters = require("./generators/create-amino-converters");
var _createRegistries = require("./generators/create-registries");
var _createLcdClients = require("./generators/create-lcd-clients");
var _createAggregatedLcdClient = require("./generators/create-aggregated-lcd-client");
var _createLcdClientScoped = require("./generators/create-lcd-client-scoped");
var _createRpcQueryClientScoped = require("./generators/create-rpc-query-client-scoped");
var _createRpcMsgClientScoped = require("./generators/create-rpc-msg-client-scoped");
var _createRpcQueryClients = require("./generators/create-rpc-query-clients");
var _createRpcMsgClients = require("./generators/create-rpc-msg-clients");
var _createReactQueryBundle = require("./generators/create-react-query-bundle");
var _createMobxBundle = require("./generators/create-mobx-bundle");
var _createStargateClients = require("./generators/create-stargate-clients");
var _createBundle = require("./generators/create-bundle");
var _createIndex = require("./generators/create-index");
var _createHelpers = require("./generators/create-helpers");
var _createCosmwasmBundle = require("./generators/create-cosmwasm-bundle");
var _createPiniaStore = require("./generators/create-pinia-store");
var _createPiniaStoreBundle = require("./generators/create-pinia-store-bundle");
var sanitizeOptions = function sanitizeOptions(options) {
  var _options;
  // If an element at the same key is present for both x and y, the value from y will appear in the result.
  options = (0, _deepmerge["default"])(_types.defaultTelescopeOptions, (_options = options) !== null && _options !== void 0 ? _options : {});
  // strip off leading slashes
  options.tsDisable.files = options.tsDisable.files.map(function (file) {
    return file.startsWith('/') ? file : file.replace(/^\//, '');
  });
  options.eslintDisable.files = options.eslintDisable.files.map(function (file) {
    return file.startsWith('/') ? file : file.replace(/^\//, '');
  });
  // uniq bc of deepmerge
  options.rpcClients.enabledServices = (0, _toConsumableArray2["default"])(new Set((0, _toConsumableArray2["default"])(options.rpcClients.enabledServices)));
  return options;
};
var TelescopeBuilder = /*#__PURE__*/function () {
  function TelescopeBuilder(_ref) {
    var protoDirs = _ref.protoDirs,
      outPath = _ref.outPath,
      store = _ref.store,
      options = _ref.options;
    (0, _classCallCheck2["default"])(this, TelescopeBuilder);
    (0, _defineProperty2["default"])(this, "store", void 0);
    (0, _defineProperty2["default"])(this, "protoDirs", void 0);
    (0, _defineProperty2["default"])(this, "outPath", void 0);
    (0, _defineProperty2["default"])(this, "options", void 0);
    (0, _defineProperty2["default"])(this, "contexts", []);
    (0, _defineProperty2["default"])(this, "files", []);
    (0, _defineProperty2["default"])(this, "converters", []);
    (0, _defineProperty2["default"])(this, "lcdClients", []);
    (0, _defineProperty2["default"])(this, "rpcQueryClients", []);
    (0, _defineProperty2["default"])(this, "rpcMsgClients", []);
    (0, _defineProperty2["default"])(this, "registries", []);
    (0, _defineProperty2["default"])(this, "stateManagers", {});
    this.protoDirs = protoDirs;
    this.outPath = (0, _path.resolve)(outPath);
    this.options = sanitizeOptions(options);
    this.store = store !== null && store !== void 0 ? store : new _protoParser.ProtoStore(protoDirs, this.options);
    this.store.traverseAll();
  }
  (0, _createClass2["default"])(TelescopeBuilder, [{
    key: "context",
    value: function context(ref) {
      var ctx = new _build2.TelescopeParseContext(ref, this.store, this.options);
      this.contexts.push(ctx);
      return ctx;
    }
  }, {
    key: "addStateManagers",
    value: function addStateManagers(type, files) {
      var state = this.stateManagers[type];
      if (!state) {
        this.stateManagers[type] = [];
      }
      [].push.apply(this.stateManagers[type], files);
    }
  }, {
    key: "addRPCQueryClients",
    value: function addRPCQueryClients(files) {
      [].push.apply(this.rpcQueryClients, files);
    }
  }, {
    key: "addRPCMsgClients",
    value: function addRPCMsgClients(files) {
      [].push.apply(this.rpcMsgClients, files);
    }
  }, {
    key: "addLCDClients",
    value: function addLCDClients(files) {
      [].push.apply(this.lcdClients, files);
    }
  }, {
    key: "addRegistries",
    value: function addRegistries(files) {
      [].push.apply(this.registries, files);
    }
  }, {
    key: "addConverters",
    value: function addConverters(files) {
      [].push.apply(this.converters, files);
    }
  }, {
    key: "build",
    value: function () {
      var _build = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this = this;
        var bundles;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // [x] get bundle of all packages
                bundles = (0, _bundle.bundlePackages)(this.store).map(function (bundle) {
                  // store bundleFile in filesToInclude
                  var bundler = new _bundler.Bundler(_this, bundle);

                  // [x] write out all TS files for package
                  (0, _createTypes.plugin)(_this, bundler);

                  // [x] write out one amino helper for all contexts w/mutations
                  (0, _createAminoConverters.plugin)(_this, bundler);

                  // [x] write out one registry helper for all contexts w/mutations
                  (0, _createRegistries.plugin)(_this, bundler);

                  // [x] write out one registry helper for all contexts w/mutations
                  (0, _createLcdClients.plugin)(_this, bundler);
                  (0, _createRpcQueryClients.plugin)(_this, bundler);
                  (0, _createRpcMsgClients.plugin)(_this, bundler);
                  (0, _createPiniaStore.plugin)(_this, bundler);

                  // [x] write out one client for each base package, referencing the last two steps
                  (0, _createStargateClients.plugin)(_this, bundler);
                  return bundler;
                }); // post run plugins
                bundles.forEach(function (bundler) {
                  (0, _createLcdClientScoped.plugin)(_this, bundler);
                  (0, _createRpcQueryClientScoped.plugin)(_this, bundler);
                  (0, _createRpcMsgClientScoped.plugin)(_this, bundler);
                  (0, _createBundle.plugin)(_this, bundler);
                });
                (0, _createReactQueryBundle.plugin)(this);
                (0, _createMobxBundle.plugin)(this);
                (0, _createAggregatedLcdClient.plugin)(this);
                _context.next = 7;
                return (0, _createCosmwasmBundle.plugin)(this);
              case 7:
                (0, _createHelpers.plugin)(this);
                (0, _createPiniaStoreBundle.plugin)(this);

                // finally, write one index file with all files, exported
                (0, _createIndex.plugin)(this);
              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function build() {
        return _build.apply(this, arguments);
      }
      return build;
    }()
  }]);
  return TelescopeBuilder;
}();
exports.TelescopeBuilder = TelescopeBuilder;