"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDirectories = exports.getContracts = exports.getContractSchemata = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _tsCodegen = require("@cosmwasm/ts-codegen");
var _case = require("case");
var _path = require("path");
var _fs = require("fs");
var getDirectories = function getDirectories(source) {
  return (0, _fs.readdirSync)(source, {
    withFileTypes: true
  }).filter(function (dirent) {
    return dirent.isDirectory();
  }).map(function (dirent) {
    return dirent.name;
  });
};
exports.getDirectories = getDirectories;
var getContracts = function getContracts() {
  var contracts = getDirectories('./contracts').map(function (contractDirname) {
    return {
      name: "".concat(contractDirname),
      value: "./contracts/".concat(contractDirname)
    };
  });
  return contracts;
};
exports.getContracts = getContracts;
var getContractSchemata = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(schemata, out, argv) {
    var s, i, path, pkg, name, folder, contractName, schemas, outPath;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            s = [];
            i = 0;
          case 2:
            if (!(i < schemata.length)) {
              _context.next = 16;
              break;
            }
            path = schemata[i];
            pkg = JSON.parse((0, _fs.readFileSync)((0, _path.join)(path, 'package.json'), 'utf-8'));
            name = (0, _path.basename)(path);
            folder = (0, _path.basename)((0, _path.dirname)(path));
            contractName = (0, _case.pascal)(pkg.contract) || (0, _case.pascal)(name);
            _context.next = 10;
            return (0, _tsCodegen.readSchemas)({
              schemaDir: path,
              schemaOptions: argv
            });
          case 10:
            schemas = _context.sent;
            outPath = (0, _path.join)(out, folder);
            s.push({
              contractName: contractName,
              schemas: schemas,
              outPath: outPath
            });
          case 13:
            i++;
            _context.next = 2;
            break;
          case 16:
            return _context.abrupt("return", s);
          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function getContractSchemata(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
exports.getContractSchemata = getContractSchemata;