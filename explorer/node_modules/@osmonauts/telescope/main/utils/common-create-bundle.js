"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commonBundlePlugin = void 0;
var _imports = require("../imports");
var _path = require("path");
var _build = require("../build");
var _files = require("../utils/files");
var _utils = require("../utils");
var commonBundlePlugin = function commonBundlePlugin(builder, bundleFilename, packageMappings, astFn) {
  var localname = bundleFilename;

  // create proto ref for context
  var pkg = '@root';
  var ref = {
    absolute: '',
    filename: localname,
    proto: {
      "package": pkg,
      imports: null,
      root: {},
      importNames: null
    },
    traversed: {
      "package": pkg,
      imports: null,
      root: {},
      importNames: null,
      acceptsInterface: {},
      implementsInterface: {},
      parsedExports: {},
      parsedImports: {},
      symbols: null
    }
  };

  // create context
  var pCtx = new _build.TelescopeParseContext(ref, builder.store, builder.options);

  // generate code for createRpcQueryHooks and imports of related packages.
  var ast = astFn(pCtx.proto, packageMappings);

  // generate imports added by context.addUtil
  var imports = (0, _utils.fixlocalpaths)((0, _imports.aggregateImports)(pCtx, {}, localname));
  var importStmts = (0, _imports.getImportStatements)(localname, imports);

  // construct the AST
  var prog = [].concat(importStmts).concat(ast);

  // write the file.
  var filename = (0, _path.join)(builder.outPath, localname);
  builder.files.push(localname);
  (0, _files.writeAstToFile)(builder.outPath, builder.options, prog, filename);
};
exports.commonBundlePlugin = commonBundlePlugin;