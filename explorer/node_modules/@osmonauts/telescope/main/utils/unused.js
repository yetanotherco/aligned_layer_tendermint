"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unused = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var t = _interopRequireWildcard(require("@babel/types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//@ts-nocheck

// https://github.com/chuyik/babel-plugin-danger-remove-unused-import
// https://github.com/chuyik/babel-plugin-danger-remove-unused-import/blob/c5454c21e94698a2464a12baa5590761932a71a8/License#L1

var unused = {
  Program: {
    exit: function exit(path) {
      var UnRefBindings = new Map();
      for (var _i = 0, _Object$entries = Object.entries(path.scope.bindings); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
          name = _Object$entries$_i[0],
          binding = _Object$entries$_i[1];
        if (!binding.path.parentPath || binding.kind !== 'module') continue;
        var source = binding.path.parentPath.get('source');
        var importName = source.node.value;
        if (!t.isStringLiteral(source)) continue;
        var key = "".concat(importName, "(").concat(source.node.loc && source.node.loc.start.line, ")");
        if (!UnRefBindings.has(key)) {
          UnRefBindings.set(key, binding);
        }
        if (binding.referenced) {
          UnRefBindings.set(key, null);
        } else {
          var nodeType = binding.path.node.type;
          if (nodeType === 'ImportSpecifier') {
            binding.path.remove();
          } else if (nodeType === 'ImportDefaultSpecifier') {
            binding.path.remove();
          } else if (nodeType === 'ImportNamespaceSpecifier') {
            binding.path.remove();
          } else if (binding.path.parentPath) {
            binding.path.parentPath.remove();
          }
        }
      }
      UnRefBindings.forEach(function (binding, key) {
        if (binding && binding.path.parentPath) {
          binding.path.parentPath.remove();
        }
      });
    }
  }
};
exports.unused = unused;