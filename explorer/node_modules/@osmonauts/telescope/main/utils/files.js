"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeContentToFile = exports.writeAstToFile = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _parser = require("@babel/parser");
var _mkdirp = require("mkdirp");
var _fs = require("fs");
var _path = require("path");
var _minimatch = _interopRequireDefault(require("minimatch"));
var _generator = _interopRequireDefault(require("@babel/generator"));
var _unused = require("./unused");
var _traverse = _interopRequireDefault(require("@babel/traverse"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var writeAstToFile = function writeAstToFile(outPath, options, program, filename) {
  var ast = t.program(program);
  var content = (0, _generator["default"])(ast).code;
  if (options.removeUnusedImports) {
    var plugins = ['typescript'];
    var newAst = (0, _parser.parse)(content, {
      sourceType: 'module',
      plugins: plugins
    });
    (0, _traverse["default"])(newAst, _unused.unused);
    var content2 = (0, _generator["default"])(newAst).code;
    writeContentToFile(outPath, options, content2, filename);
  } else {
    writeContentToFile(outPath, options, content, filename);
  }
};
exports.writeAstToFile = writeAstToFile;
var writeContentToFile = function writeContentToFile(outPath, options, content, filename) {
  var esLintPrefix = '';
  var tsLintPrefix = '';
  var nameWithoutPath = filename.replace(outPath, '');
  // strip off leading slash
  if (nameWithoutPath.startsWith('/')) nameWithoutPath = nameWithoutPath.replace(/^\//, '');
  options.tsDisable.patterns.forEach(function (pattern) {
    if ((0, _minimatch["default"])(nameWithoutPath, pattern)) {
      tsLintPrefix = "//@ts-nocheck\n";
    }
  });
  options.eslintDisable.patterns.forEach(function (pattern) {
    if ((0, _minimatch["default"])(nameWithoutPath, pattern)) {
      esLintPrefix = "/* eslint-disable */\n";
    }
  });
  if (options.tsDisable.files.includes(nameWithoutPath) || options.tsDisable.disableAll) {
    tsLintPrefix = "//@ts-nocheck\n";
  }
  if (options.eslintDisable.files.includes(nameWithoutPath) || options.eslintDisable.disableAll) {
    esLintPrefix = "/* eslint-disable */\n";
  }
  var text = tsLintPrefix + esLintPrefix + content;
  (0, _mkdirp.sync)((0, _path.dirname)(filename));
  (0, _fs.writeFileSync)(filename, text);
};
exports.writeContentToFile = writeContentToFile;