import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { resolve, join } from 'path';
import { TelescopeParseContext } from './build';
import { createFileBundle } from './bundle';
import { writeAstToFile } from './utils/files';
export class Bundler {
  constructor(builder, bundle) {
    _defineProperty(this, "builder", void 0);
    _defineProperty(this, "contexts", []);
    _defineProperty(this, "bundle", void 0);
    _defineProperty(this, "files", void 0);
    _defineProperty(this, "converters", []);
    _defineProperty(this, "lcdClients", []);
    _defineProperty(this, "rpcQueryClients", []);
    _defineProperty(this, "rpcMsgClients", []);
    _defineProperty(this, "registries", []);
    _defineProperty(this, "stateManagers", {});
    this.builder = builder;
    this.bundle = bundle;
    this.files = [bundle.bundleFile];
  }
  addStateManagers(type, files) {
    const state = this.stateManagers[type];
    if (!state) {
      this.stateManagers[type] = [];
    }
    [].push.apply(this.stateManagers[type], files);
    this.builder.addStateManagers(type, files);
  }
  addLCDClients(files) {
    [].push.apply(this.lcdClients, files);
    this.builder.addLCDClients(files);
  }
  addRPCQueryClients(files) {
    [].push.apply(this.rpcQueryClients, files);
    this.builder.addRPCQueryClients(files);
  }
  addRPCMsgClients(files) {
    [].push.apply(this.rpcMsgClients, files);
    this.builder.addRPCMsgClients(files);
  }
  addRegistries(files) {
    [].push.apply(this.registries, files);
    this.builder.addRegistries(files);
  }
  addConverters(files) {
    [].push.apply(this.converters, files);
    this.builder.addConverters(files);
  }
  getFreshContext(context) {
    return new TelescopeParseContext(context.ref, context.store, this.builder.options);
  }
  getLocalFilename(ref, suffix) {
    return suffix ? ref.filename.replace(/\.proto$/, `.${suffix}.ts`) : ref.filename.replace(/\.proto$/, `.ts`);
  }
  getFilename(localname) {
    return resolve(join(this.builder.outPath, localname));
  }
  writeAst(program, filename) {
    writeAstToFile(this.builder.outPath, this.builder.options, program, filename);
  }

  // addToBundle adds the path into the namespaced bundle object
  addToBundle(context, localname) {
    createFileBundle(this.builder.options, context.ref.proto.package, localname, this.bundle.bundleFile, this.bundle.importPaths, this.bundle.bundleVariables);
  }
  addToBundleToPackage(packagename, localname) {
    createFileBundle(this.builder.options, packagename, localname, this.bundle.bundleFile, this.bundle.importPaths, this.bundle.bundleVariables);
  }
}