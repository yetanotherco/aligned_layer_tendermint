"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _protoParser = require("@osmonauts/proto-parser");
var _testUtils = require("../../../test-utils/");
var _context = require("../context");
var _ = require("..");
var _object = require("../object");
var _index = require("../amino/index");
var _jestInCase = _interopRequireDefault(require("jest-in-case"));
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
(0, _jestInCase["default"])('cosmos/authz/v1beta1/authz', function (opts) {
  var ref = store.findProto('cosmos/authz/v1beta1/authz.proto');
  var context = new _context.ProtoParseContext(ref, store, _testUtils.defaultTelescopeOptions);
  var aminoCtx = new _context.AminoParseContext(ref, store, _testUtils.defaultTelescopeOptions);
  context.options.prototypes.typingsFormat.timestamp = opts.name;
  aminoCtx.options.prototypes.typingsFormat.timestamp = opts.name;
  (0, _testUtils.expectCode)((0, _.createProtoType)(context, 'Grant', (0, _protoParser.getNestedProto)(ref.traversed).Grant));
  (0, _testUtils.expectCode)((0, _object.createObjectWithMethods)(context, 'Grant', (0, _protoParser.getNestedProto)(ref.traversed).Grant));
  (0, _testUtils.expectCode)((0, _index.makeAminoTypeInterface)({
    context: aminoCtx,
    proto: (0, _protoParser.getNestedProto)(ref.traversed).Grant
  }));
  (0, _testUtils.expectCode)((0, _index.createAminoConverter)({
    context: aminoCtx,
    root: ref.proto,
    name: 'AminoConverter',
    protos: [(0, _protoParser.getNestedProto)(ref.traversed).Grant]
  }));
}, [{
  name: 'date'
}, {
  name: 'timestamp'
}]);