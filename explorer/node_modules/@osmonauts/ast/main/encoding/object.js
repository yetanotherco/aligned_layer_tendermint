"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createObjectWithMethods = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _fromPartial = require("./proto/from-partial");
var _decode = require("./proto/decode");
var _encode = require("./proto/encode");
var _fromJson = require("./proto/from-json");
var _toJson = require("./proto/to-json");
var _fromAmino = require("./proto/from-amino");
var _toAmino = require("./proto/to-amino");
var _toSdk = require("./proto/to-sdk");
var _fromSdk = require("./proto/from-sdk");
var _proto = require("./proto");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var createObjectWithMethods = function createObjectWithMethods(context, name, proto) {
  var methodsAndProps = [context.pluginValue('prototypes.addTypeUrlToObjects') && (0, _proto.createTypeUrlProperty)(context, proto), context.pluginValue('prototypes.addAminoTypeToObjects') && (0, _proto.createAminoTypeProperty)(context, proto), context.pluginValue('prototypes.methods.encode') && (0, _encode.encodeMethod)(context, name, proto), context.pluginValue('prototypes.methods.decode') && (0, _decode.decodeMethod)(context, name, proto), context.pluginValue('prototypes.methods.fromJSON') && (0, _fromJson.fromJSONMethod)(context, name, proto), context.pluginValue('prototypes.methods.toJSON') && (0, _toJson.toJSONMethod)(context, name, proto), context.pluginValue('prototypes.methods.fromPartial') && (0, _fromPartial.fromPartialMethod)(context, name, proto), context.pluginValue('prototypes.methods.fromSDK') && (0, _fromSdk.fromSDKMethod)(context, name, proto), context.pluginValue('prototypes.methods.toSDK') && (0, _toSdk.toSDKMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.fromAmino')) && (0, _fromAmino.fromAminoJSONMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.toAmino')) && (0, _toAmino.toAminoJSONMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.fromAmino')) && (0, _fromAmino.fromAminoMsgMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.toAmino')) && (0, _toAmino.toAminoMsgMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.fromProto')) && (0, _proto.fromProtoMsgMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.toProto')) && (0, _proto.toProtoMethod)(context, name, proto), (context.pluginValue('aminoEncoding.useRecursiveV2encoding') || context.pluginValue('prototypes.methods.toProto')) && (0, _proto.toProtoMsgMethod)(context, name, proto)
  // context.options.aminoEncoding.useRecursiveV2encoding && fromAminoJSONMethod(context, name, proto),
  // context.options.aminoEncoding.useRecursiveV2encoding && toAminoJSONMethod(context, name, proto),
  ].filter(Boolean);
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(name), t.objectExpression(methodsAndProps))]));
};
exports.createObjectWithMethods = createObjectWithMethods;