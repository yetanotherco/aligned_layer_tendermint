"use strict";

var _protoParser = require("@osmonauts/proto-parser");
var _testUtils = require("../../../../../test-utils/");
var _context = require("../../../context");
var _amino = require("../amino");
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
describe('MsgSend', function () {
  var ref = store.findProto('cosmos/bank/v1beta1/tx.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('amino interface', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'MsgSend', (0, _protoParser.getNestedProto)(ref.traversed).MsgSend));
  });
});
describe('PageRequest', function () {
  var ref = store.findProto('cosmos/base/query/v1beta1/pagination.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('interface', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'PageRequest', (0, _protoParser.getNestedProto)(ref.traversed).PageRequest));
  });
});
describe('PageResponse', function () {
  var ref = store.findProto('cosmos/base/query/v1beta1/pagination.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('interface', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'PageResponse', (0, _protoParser.getNestedProto)(ref.traversed).PageResponse));
  });
});
describe('cosmos/auth/v1beta1/auth.proto', function () {
  var ref = store.findProto('cosmos/auth/v1beta1/auth.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('BaseAccount', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'BaseAccount', (0, _protoParser.getNestedProto)(ref.traversed).BaseAccount));
  });
});
describe('GenesisState', function () {
  var ref = store.findProto('cosmos/auth/v1beta1/genesis.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('interface', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'GenesisState', (0, _protoParser.getNestedProto)(ref.traversed).GenesisState));
  });
});
describe('cosmos/authz/v1beta1/authz.proto', function () {
  var ref = store.findProto('cosmos/authz/v1beta1/authz.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('Grant', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'Grant', (0, _protoParser.getNestedProto)(ref.traversed).Grant));
  });
  it('GrantAuthorization', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'GrantAuthorization', (0, _protoParser.getNestedProto)(ref.traversed).GrantAuthorization));
  });
});
describe('cosmos/authz/v1beta1/query.proto', function () {
  var ref = store.findProto('cosmos/authz/v1beta1/query.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('QueryGrantsRequest', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'QueryGrantsRequest', (0, _protoParser.getNestedProto)(ref.traversed).QueryGrantsRequest));
  });
});
describe('confio/proofs.proto', function () {
  var ref = store.findProto('confio/proofs.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('ExistenceProof', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'ExistenceProof', (0, _protoParser.getNestedProto)(ref.traversed).ExistenceProof));
  });
});
describe('osmosis/gamm/v1beta1/tx.proto', function () {
  var ref = store.findProto('osmosis/gamm/v1beta1/tx.proto');
  var context = new _context.ProtoParseContext(ref, store, store.options);
  it('MsgJoinPool', function () {
    (0, _testUtils.expectCode)((0, _amino.createAminoTypeType)(context, 'MsgJoinPool', (0, _protoParser.getNestedProto)(ref.traversed).MsgJoinPool));
  });
});