"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProtoTypeType = exports.createProtoType = exports.createProtoInterfaceEncodedType = exports.createCreateProtoType = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _types2 = require("@osmonauts/types");
var _utils = require("../../../utils");
var _types3 = require("../types");
var _types4 = require("../../types");
var _amino = require("../../amino");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var getProtoField = function getProtoField(context, field) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Msg';
  var ast = null;
  var fieldRef = (0, _types4.getFieldTypeReference)(context, field, type);
  ast = fieldRef.ast;
  var isTypeCastableAnyType = fieldRef.isTypeCastableAnyType;
  if (field.rule === 'repeated') {
    ast = t.tsArrayType(ast);
    if (isTypeCastableAnyType) {
      ast = t.tsUnionType([ast, t.tsArrayType(t.tsTypeReference(t.identifier('Any')))]);
    }
  }
  if (field.keyType) {
    ast = t.tsUnionType([t.tsTypeLiteral([t.tsIndexSignature([(0, _utils.identifier)('key', t.tsTypeAnnotation((0, _types4.getTSType)(context, field.keyType)))], t.tsTypeAnnotation(ast))])]);
  }
  return ast;
};
var createProtoType = function createProtoType(context, name, proto) {
  var _proto$options, _proto$options2;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Msg';
  var oneOfs = (0, _types3.getOneOfs)(proto);

  // MARKED AS COSMOS SDK specific code
  var optionalityMap = {};

  // if a param is found to be a route parameter, we assume it's required
  // if a param is found to be a query parameter, we assume it's optional
  if (context.pluginValue('prototypes.optionalQueryParams') && context.store.requests[name]) {
    var svc = context.store.requests[name];
    if (svc.info) {
      svc.info.queryParams.map(function (param) {
        optionalityMap[param] = true;
      });
    }
  }

  // hard-code optionality for pagination
  if (context.pluginValue('prototypes.optionalPageRequests')) {
    if (context.ref.proto["package"] === 'cosmos.base.query.v1beta1') {
      if (name === 'PageRequest') {
        optionalityMap['key'] = true;
        optionalityMap['offset'] = true;
        optionalityMap['limit'] = true;
        optionalityMap['count_total'] = true;
        optionalityMap['countTotal'] = true;
        optionalityMap['reverse'] = true;
      }
      if (name === 'PageResponse') {
        optionalityMap['next_key'] = true;
        optionalityMap['nextKey'] = true;
      }
    }
  }
  var MsgName = _types4.SymbolNames[type](name);
  var fields = [];
  if (context.pluginValue('prototypes.addTypeUrlToDecoders') && (context.pluginValue('interfaces.enabled') && (_proto$options = proto.options) !== null && _proto$options !== void 0 && _proto$options['(cosmos_proto.implements_interface)'] || context.ref.proto["package"] === 'google.protobuf' && name === 'Any')) {
    fields.push((0, _utils.tsPropertySignature)(t.identifier('$typeUrl'), t.tsTypeAnnotation(t.tsStringKeyword()), true));
  }

  // if (
  //     context.pluginValue('prototypes.addTypeUrlToDecoders') &&
  //     context.pluginValue('interfaces.enabled') &&
  //     proto.options?.['(cosmos_proto.implements_interface)']
  // ) {
  //     fields.push(tsPropertySignature(
  //         t.identifier('$typeUrl'),
  //         t.tsTypeAnnotation(t.tsStringKeyword()),
  //         true
  //     ));
  // }

  [].push.apply(fields, Object.keys(proto.fields).reduce(function (m, fieldName) {
    var _field$options$Teles, _field$options, _field$options2;
    var isOneOf = oneOfs.includes(fieldName);
    var field = proto.fields[fieldName];

    // optionalityMap is coupled to API requests
    var orig = (_field$options$Teles = (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options['(telescope:orig)']) !== null && _field$options$Teles !== void 0 ? _field$options$Teles : fieldName;
    var optional = false;
    if (optionalityMap[orig]) {
      optional = true;
    }

    // let fieldNameWithCase = options.useOriginalCase ? orig : fieldName;
    var fieldNameWithCase = type === 'SDKType' ? orig : fieldName;
    var protoField = getProtoField(context, field, type);
    var propSig = (0, _utils.tsPropertySignature)(t.identifier(fieldNameWithCase), t.tsTypeAnnotation(protoField), optional || (0, _types3.getFieldOptionality)(context, field, isOneOf));
    var comments = [];
    if (field.comment &&
    // no comment for derivative types
    type === 'Msg') {
      comments.push((0, _utils.makeCommentBlock)(field.comment));
    }
    if ((_field$options2 = field.options) !== null && _field$options2 !== void 0 && _field$options2.deprecated) {
      comments.push((0, _utils.makeCommentBlock)('@deprecated'));
    }
    if (comments.length) {
      propSig.leadingComments = comments;
    }
    m.push(propSig);
    return m;
  }, []));

  // declaration
  var declaration = t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(MsgName), null, [], t.tsInterfaceBody(fields)));
  var comments = [];
  if (proto.comment) {
    comments.push((0, _utils.makeCommentBlock)(proto.comment));
  }
  if ((_proto$options2 = proto.options) !== null && _proto$options2 !== void 0 && _proto$options2.deprecated) {
    comments.push((0, _utils.makeCommentBlock)('@deprecated'));
  }
  if (comments.length) {
    declaration.leadingComments = comments;
  }
  return declaration;
};
exports.createProtoType = createProtoType;
var createProtoTypeType = function createProtoTypeType(context, name, proto) {
  var ProtoMsgName = _types4.SymbolNames.ProtoMsg(name);
  var typeUrl = (0, _amino.getTypeUrl)(context.ref.proto, proto);
  var typ = typeUrl ? t.tsLiteralType(t.stringLiteral(typeUrl)) : t.tsTypeReference(t.identifier('string'));
  return t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(ProtoMsgName), null, [], t.tsInterfaceBody([(0, _utils.tsPropertySignature)(t.identifier(context.options.prototypes.parser.keepCase ? 'type_url' : 'typeUrl'), t.tsTypeAnnotation(typ), false), (0, _utils.tsPropertySignature)(t.identifier('value'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Uint8Array'))), false)])));
};
exports.createProtoTypeType = createProtoTypeType;
var createProtoInterfaceEncodedType = function createProtoInterfaceEncodedType(context, name, proto) {
  var MsgName = _types4.SymbolNames.Msg(name);
  var EncodedMsgName = _types4.SymbolNames.Encoded(name);
  var oneOfs = (0, _types3.getOneOfs)(proto);
  var implementsAcceptsAny = context.pluginValue('interfaces.enabled');
  var fieldsWithInfo = Object.keys(proto.fields).reduce(function (m, fieldName) {
    var _field$options3, _field$parsedType, _field$parsedType2;
    var isOneOf = oneOfs.includes(fieldName);
    var field = proto.fields[fieldName];
    var lookupInterface = (_field$options3 = field.options) === null || _field$options3 === void 0 ? void 0 : _field$options3['(cosmos_proto.accepts_interface)'];
    var isAnyType = ((_field$parsedType = field.parsedType) === null || _field$parsedType === void 0 ? void 0 : _field$parsedType.type) === 'Type' && ((_field$parsedType2 = field.parsedType) === null || _field$parsedType2 === void 0 ? void 0 : _field$parsedType2.name) === 'Any';

    // MARKED AS NOT DRY (symbols)
    var symbols = null;
    if (implementsAcceptsAny && lookupInterface) {
      symbols = context.store._symbols.filter(function (s) {
        return s.implementsType === lookupInterface && s.ref === context.ref.filename;
      });
      if (!symbols.length && context.options.logLevel >= _types2.TelescopeLogLevel.Warn) {
        console.warn("[WARN] ".concat(lookupInterface, " is accepted but not implemented"));
      }
    }
    var isAnyInterface = isAnyType && lookupInterface && implementsAcceptsAny && symbols;
    if (!isAnyInterface) return m;
    // ONLY INTERFACES!

    return [].concat((0, _toConsumableArray2["default"])(m), [{
      isOneOf: isOneOf,
      field: field,
      name: fieldName,
      lookupInterface: lookupInterface,
      isAnyType: isAnyType,
      symbols: symbols
    }]);
  }, []).filter(Boolean);
  if (!fieldsWithInfo.length) return;
  var interfaceFields = fieldsWithInfo.map(function (fieldInfo) {
    return t.tsLiteralType(t.stringLiteral(fieldInfo.name));
  });
  var fields = fieldsWithInfo.map(function (fieldsInfo) {
    var _field$options4;
    var field = fieldsInfo.field,
      isOneOf = fieldsInfo.isOneOf,
      fieldName = fieldsInfo.name;
    var optional = false;
    var protoField = getProtoField(context, field, 'ProtoMsg');
    var propSig = (0, _utils.tsPropertySignature)(t.identifier(fieldName), t.tsTypeAnnotation(protoField), optional || (0, _types3.getFieldOptionality)(context, field, isOneOf));
    var comments = [];
    if (field.comment) {
      comments.push((0, _utils.makeCommentBlock)(field.comment));
    }
    if ((_field$options4 = field.options) !== null && _field$options4 !== void 0 && _field$options4.deprecated) {
      comments.push((0, _utils.makeCommentBlock)('@deprecated'));
    }
    if (comments.length) {
      propSig.leadingComments = comments;
    }
    return propSig;
  });
  return t.exportNamedDeclaration(t.tsTypeAliasDeclaration(t.identifier(EncodedMsgName), null, t.tsIntersectionType([t.tsTypeReference(t.identifier('Omit'), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(MsgName)), interfaceFields.length > 1 ? t.tsUnionType((0, _toConsumableArray2["default"])(interfaceFields)) : interfaceFields[0]])), t.tsTypeLiteral((0, _toConsumableArray2["default"])(fields))])));
};
exports.createProtoInterfaceEncodedType = createProtoInterfaceEncodedType;
var createCreateProtoType = function createCreateProtoType(context, name, proto) {
  var _proto$options3;
  var oneOfs = (0, _types3.getOneOfs)(proto);
  var fields = [];
  if (context.pluginValue('prototypes.addTypeUrlToDecoders') && (context.pluginValue('interfaces.enabled') && (_proto$options3 = proto.options) !== null && _proto$options3 !== void 0 && _proto$options3['(cosmos_proto.implements_interface)'] || context.ref.proto["package"] === 'google.protobuf' && name === 'Any')) {
    var typeUrl = (0, _amino.getTypeUrlWithPkgAndName)(context.ref.proto["package"], name);
    fields.push(t.objectProperty(t.identifier('$typeUrl'), t.stringLiteral(typeUrl)));
  }
  // if (
  //     context.pluginValue('prototypes.addTypeUrlToDecoders') &&
  //     context.pluginValue('interfaces.enabled') &&
  //     proto.options?.['(cosmos_proto.implements_interface)']
  // ) {
  //     const typeUrl = getTypeUrlWithPkgAndName(context.ref.proto.package, name);
  //     fields.push(t.objectProperty(
  //         t.identifier('$typeUrl'),
  //         t.stringLiteral(typeUrl)
  //     ));
  // }

  [].push.apply(fields, Object.keys(proto.fields).map(function (key) {
    var isOneOf = oneOfs.includes(key);
    var isOptional = (0, _types3.getFieldOptionality)(context, proto.fields[key], isOneOf);
    return _objectSpread(_objectSpread({
      name: key
    }, proto.fields[key]), {}, {
      isOneOf: isOneOf,
      isOptional: isOptional
    });
  }).map(function (field) {
    return t.objectProperty(t.identifier(field.name), (0, _types4.getDefaultTSTypeFromProtoType)(context, field, field.isOneOf));
  }));
  return (0, _utils.functionDeclaration)(t.identifier((0, _types3.getBaseCreateTypeFuncName)(name)), [], t.blockStatement([t.returnStatement(t.objectExpression([].concat(fields)))]), false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))));
};
exports.createCreateProtoType = createCreateProtoType;