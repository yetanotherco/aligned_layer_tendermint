"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromProtoMsgMethod = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../../utils");
var _types2 = require("../../types");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var fromProtoMsgMethod = function fromProtoMsgMethod(context, name, proto) {
  var varName = 'message';
  var ReturnType = _types2.SymbolNames.Msg(name);
  var ProtoMsgName = _types2.SymbolNames.ProtoMsg(name);
  var TypeName = _types2.SymbolNames.Msg(name);
  var body = [];

  // body

  body.push(t.returnStatement(t.callExpression(t.memberExpression(t.identifier(TypeName), t.identifier('decode')), [t.memberExpression(t.identifier(varName), t.identifier('value'))])));
  return (0, _utils.objectMethod)('method', t.identifier('fromProtoMsg'), [(0, _utils.identifier)(varName, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(ProtoMsgName))))], t.blockStatement(body), false, false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(ReturnType))));
};
exports.fromProtoMsgMethod = fromProtoMsgMethod;