"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeMethodFields = exports.encodeMethod = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var t = _interopRequireWildcard(require("@babel/types"));
var _ = require("..");
var _utils = require("../../../utils");
var _utils2 = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var needsImplementation = function needsImplementation(name, field) {
  throw new Error("need to implement encode (".concat(field.type, " rules[").concat(field.rule, "] name[").concat(name, "])"));
};
var encodeMethodFields = function encodeMethodFields(context, name, proto) {
  var _proto$fields;
  var oneOfs = (0, _.getOneOfs)(proto);
  return Object.keys((_proto$fields = proto.fields) !== null && _proto$fields !== void 0 ? _proto$fields : {}).reduce(function (m, fieldName) {
    var field = _objectSpread({
      name: fieldName
    }, proto.fields[fieldName]);
    var isOneOf = oneOfs.includes(fieldName);
    var isOptional = (0, _.getFieldOptionalityForDefaults)(context, field, isOneOf);
    var args = {
      typeName: name,
      context: context,
      field: field,
      isOneOf: isOneOf,
      isOptional: isOptional
    };
    if (field.rule === 'repeated') {
      switch (field.type) {
        case 'string':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.array(args, _utils2.arrayTypes.string(args))));
        case 'bytes':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.array(args, _utils2.arrayTypes.bytes(args))));
        case 'bool':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.bool())));
        case 'double':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes["double"]())));
        case 'float':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes["float"]())));
        case 'int32':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.int32())));
        case 'sint32':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.sint32())));
        case 'uint32':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.uint32())));
        case 'fixed32':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.fixed32())));
        case 'sfixed32':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.sfixed32())));
        case 'int64':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.int64())));
        case 'sint64':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.sint64())));
        case 'uint64':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.uint64())));
        case 'fixed64':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.fixed64())));
        case 'sfixed64':
          return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes.sfixed64())));
        default:
          switch (field.parsedType.type) {
            case 'Enum':
              return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.forkDelimArray(args, _utils2.arrayTypes["enum"]())));
            case 'Type':
              return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(_utils2.encode.typeArray(args)));
          }
          return needsImplementation(fieldName, field);
      }
    }
    if (field.keyType) {
      // currently they all look the same for encode()
      return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.keyHash(args)]);
    }
    switch (field.type) {
      case 'string':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.string(args)]);
      case 'int32':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.int32(args)]);
      case 'sint32':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.sint32(args)]);
      case 'uint32':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.uint32(args)]);
      case 'fixed32':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.fixed32(args)]);
      case 'sfixed32':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.sfixed32(args)]);
      case 'int64':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.int64(args)]);
      case 'sint64':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.sint64(args)]);
      case 'uint64':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.uint64(args)]);
      case 'fixed64':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.fixed64(args)]);
      case 'sfixed64':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.sfixed64(args)]);
      case 'double':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode["double"](args)]);
      case 'float':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode["float"](args)]);
      case 'bool':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.bool(args)]);
      case 'bytes':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.bytes(args)]);
      case 'Duration':
      case 'google.protobuf.Duration':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.duration(args)]);
      case 'Timestamp':
      case 'google.protobuf.Timestamp':
        return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.timestamp(args)]);
      default:
        switch (field.parsedType.type) {
          case 'Enum':
            return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode["enum"](args)]);
          case 'Type':
            return [].concat((0, _toConsumableArray2["default"])(m), [_utils2.encode.type(args)]);
        }
        return needsImplementation(fieldName, field);
    }
  }, []);
};
exports.encodeMethodFields = encodeMethodFields;
var encodeMethod = function encodeMethod(context, name, proto) {
  context.addUtil('_m0');
  var fields = encodeMethodFields(context, name, proto);
  var varName = 'message';
  if (!fields.length) {
    varName = '_';
  }
  var body = [].concat((0, _toConsumableArray2["default"])(fields), [/* RETURN writer */
  t.returnStatement(t.identifier('writer'))]);
  try {
    t.blockStatement(body);
  } catch (e) {
    console.log(body);
    throw e;
  }
  return (0, _utils.objectMethod)('method', t.identifier('encode'), [
  // args

  (0, _utils.identifier)(varName, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))), false), t.assignmentPattern((0, _utils.identifier)('writer', t.tsTypeAnnotation(t.tsTypeReference(t.tsQualifiedName(t.identifier('_m0'), t.identifier('Writer'))))), t.callExpression(t.memberExpression(t.memberExpression(t.identifier('_m0'), t.identifier('Writer')), t.identifier('create')), []))],
  // body 
  t.blockStatement(body), false, false, false,
  // return type
  t.tsTypeAnnotation(t.tsTypeReference(t.tsQualifiedName(t.identifier('_m0'), t.identifier('Writer')))));
};
exports.encodeMethod = encodeMethod;