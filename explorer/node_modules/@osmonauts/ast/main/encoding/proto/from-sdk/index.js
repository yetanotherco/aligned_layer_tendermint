"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromSDKMethodFields = exports.fromSDKMethod = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var t = _interopRequireWildcard(require("@babel/types"));
var _ = require("..");
var _utils = require("../../../utils");
var _utils2 = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var needsImplementation = function needsImplementation(name, field) {
  throw new Error("need to implement fromSDK (".concat(field.type, " rules[").concat(field.rule, "] name[").concat(name, "])"));
};
var fromSDKMethodFields = function fromSDKMethodFields(context, name, proto) {
  var _proto$fields;
  var oneOfs = (0, _.getOneOfs)(proto);
  var fields = Object.keys((_proto$fields = proto.fields) !== null && _proto$fields !== void 0 ? _proto$fields : {}).map(function (fieldName) {
    var field = _objectSpread({
      name: fieldName
    }, proto.fields[fieldName]);
    var isOneOf = oneOfs.includes(fieldName);
    var isOptional = (0, _.getFieldOptionalityForDefaults)(context, field, isOneOf);
    var args = {
      context: context,
      field: field,
      isOptional: isOptional
    };
    if (field.rule === 'repeated') {
      switch (field.type) {
        case 'string':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.string());
        case 'bytes':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.bytes(args));
        case 'bool':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.bool());
        case 'float':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes["float"]());
        case 'double':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes["double"]());
        case 'int32':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.int32());
        case 'sint32':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.sint32());
        case 'uint32':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.uint32());
        case 'fixed32':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.fixed32());
        case 'sfixed32':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.sfixed32());
        case 'int64':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.int64());
        case 'sint64':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.sint64());
        case 'uint64':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.uint64());
        case 'fixed64':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.fixed64());
        case 'sfixed64':
          return _utils2.fromSDK.array(args, _utils2.arrayTypes.sfixed64());
        default:
          switch (field.parsedType.type) {
            case 'Enum':
              return _utils2.fromSDK.array(args, _utils2.arrayTypes["enum"](args));
            case 'Type':
              return _utils2.fromSDK.array(args, _utils2.arrayTypes.type(args));
          }
          return needsImplementation(fieldName, field);
      }
    }
    if (field.keyType) {
      switch (field.keyType) {
        case 'string':
        case 'int64':
        case 'sint64':
        case 'uint64':
        case 'fixed64':
        case 'sfixed64':
        case 'int32':
        case 'sint32':
        case 'uint32':
        case 'fixed32':
        case 'sfixed32':
          return _utils2.fromSDK.keyHash(args);
        default:
          return needsImplementation(fieldName, field);
      }
    }
    switch (field.type) {
      case 'string':
        return _utils2.fromSDK.string(args);
      case 'bytes':
        return _utils2.fromSDK.bytes(args);
      case 'bool':
        return _utils2.fromSDK.bool(args);
      case 'double':
        return _utils2.fromSDK["double"](args);
      case 'float':
        return _utils2.fromSDK["float"](args);
      case 'int32':
        return _utils2.fromSDK.int32(args);
      case 'sint32':
        return _utils2.fromSDK.sint32(args);
      case 'uint32':
        return _utils2.fromSDK.uint32(args);
      case 'fixed32':
        return _utils2.fromSDK.fixed32(args);
      case 'sfixed32':
        return _utils2.fromSDK.sfixed32(args);
      case 'int64':
        return _utils2.fromSDK.int64(args);
      case 'sint64':
        return _utils2.fromSDK.sint64(args);
      case 'uint64':
        return _utils2.fromSDK.uint64(args);
      case 'fixed64':
        return _utils2.fromSDK.fixed64(args);
      case 'sfixed64':
        return _utils2.fromSDK.sfixed64(args);
      case 'Duration':
      case 'google.protobuf.Duration':
        return _utils2.fromSDK.duration(args);
      case 'Timestamp':
      case 'google.protobuf.Timestamp':
        return _utils2.fromSDK.timestamp(args);
      default:
        switch (field.parsedType.type) {
          case 'Enum':
            return _utils2.fromSDK["enum"](args);
          case 'Type':
            return _utils2.fromSDK.type(args);
        }
        return needsImplementation(fieldName, field);
    }
  });
  return fields;
};
exports.fromSDKMethodFields = fromSDKMethodFields;
var fromSDKMethod = function fromSDKMethod(context, name, proto) {
  var fields = fromSDKMethodFields(context, name, proto);
  var varName = 'object';
  if (!fields.length) {
    varName = '_';
  }
  var SDKTypeName = [name, 'SDKType'].filter(Boolean).join('');
  return (0, _utils.objectMethod)('method', t.identifier('fromSDK'), [(0, _utils.identifier)(varName, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(SDKTypeName))), false)], t.blockStatement([t.returnStatement(t.objectExpression(fields))]), false, false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))));
};
exports.fromSDKMethod = fromSDKMethod;