"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromAminoMessages = exports.fromAminoJSON = exports.arrayTypes = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../../utils");
var _types2 = require("../../types");
var _implements = require("../implements");
var _utils2 = require("@osmonauts/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var setProp = function setProp(args, callExpr) {
  var _getFieldNames = (0, _types2.getFieldNames)(args.field),
    propName = _getFieldNames.propName,
    origName = _getFieldNames.origName;
  var prop = t.objectProperty(t.identifier(propName), callExpr);
  if (args.isOptional) {
    return t.objectProperty(t.identifier(propName), t.conditionalExpression(t.optionalMemberExpression(t.identifier('object'), t.identifier(origName), false, true), callExpr, t.identifier('undefined')));
  }
  return prop;
};
var fromAminoJSON = {
  scalar: function scalar(args) {
    var _getFieldNames2 = (0, _types2.getFieldNames)(args.field),
      propName = _getFieldNames2.propName,
      origName = _getFieldNames2.origName;
    return t.objectProperty(t.identifier(propName), t.optionalMemberExpression(t.identifier('object'), t.identifier(origName), false, args.isOptional));
  },
  string: function string(args) {
    return fromAminoJSON.scalar(args);
  },
  number: function number(args) {
    return fromAminoJSON.scalar(args);
  },
  "double": function double(args) {
    return fromAminoJSON.scalar(args);
  },
  "float": function float(args) {
    return fromAminoJSON.scalar(args);
  },
  int32: function int32(args) {
    return fromAminoJSON.scalar(args);
  },
  sint32: function sint32(args) {
    return fromAminoJSON.scalar(args);
  },
  uint32: function uint32(args) {
    return fromAminoJSON.scalar(args);
  },
  fixed32: function fixed32(args) {
    return fromAminoJSON.scalar(args);
  },
  sfixed32: function sfixed32(args) {
    return fromAminoJSON.scalar(args);
  },
  bool: function bool(args) {
    return fromAminoJSON.scalar(args);
  },
  "long": function long(args) {
    var _getFieldNames3 = (0, _types2.getFieldNames)(args.field),
      origName = _getFieldNames3.origName;
    args.context.addUtil('Long');
    var callExpr = t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromString')), [t.memberExpression(t.identifier('object'), t.identifier(origName))]);
    return setProp(args, callExpr);
  },
  int64: function int64(args) {
    return fromAminoJSON["long"](args);
  },
  uint64: function uint64(args) {
    return fromAminoJSON["long"](args);
  },
  sint64: function sint64(args) {
    return fromAminoJSON["long"](args);
  },
  fixed64: function fixed64(args) {
    return fromAminoJSON["long"](args);
  },
  sfixed64: function sfixed64(args) {
    return fromAminoJSON["long"](args);
  },
  rawBytes: function rawBytes(args) {
    args.context.addUtil('toUtf8');
    var _getFieldNames4 = (0, _types2.getFieldNames)(args.field),
      origName = _getFieldNames4.origName;
    var expr = t.callExpression(t.identifier('toUtf8'), [t.callExpression(t.memberExpression(t.identifier('JSON'), t.identifier('stringify')), [t.memberExpression(t.identifier('object'), t.identifier(origName))])]);
    return setProp(args, expr);
  },
  wasmByteCode: function wasmByteCode(args) {
    args.context.addUtil('fromBase64');
    var _getFieldNames5 = (0, _types2.getFieldNames)(args.field),
      origName = _getFieldNames5.origName;
    var expr = t.callExpression(t.identifier('fromBase64'), [t.memberExpression(t.identifier('object'), t.identifier(origName))]);
    return setProp(args, expr);
  },
  pubkey: function pubkey(args) {
    args.context.addUtil('toBase64');
    args.context.addUtil('encodeBech32Pubkey');
    var _getFieldNames6 = (0, _types2.getFieldNames)(args.field),
      origName = _getFieldNames6.origName;
    var callExpr = t.callExpression(t.identifier('encodeBech32Pubkey'), [t.objectExpression([t.objectProperty(t.identifier('type'), t.stringLiteral('tendermint/PubKeySecp256k1')), t.objectProperty(t.identifier('value'), t.callExpression(t.identifier('toBase64'), [t.memberExpression(t.memberExpression(t.identifier('object'), t.identifier(origName)), t.identifier('value'))]))]),
    // TODO how to manage this?
    // 1. options.prefix
    // 2. look into prefix and how it's used across chains
    // 3. maybe AminoConverter is a class and has this.prefix!
    t.stringLiteral('cosmos')]);
    return setProp(args, callExpr);
  },
  protoType: function protoType(args) {
    var _getFieldNames7 = (0, _types2.getFieldNames)(args.field),
      propName = _getFieldNames7.propName,
      origName = _getFieldNames7.origName;
    var name = args.context.getTypeName(args.field);
    return t.objectProperty(t.identifier(propName), t.conditionalExpression(t.optionalMemberExpression(t.identifier('object'), t.identifier(origName), false, true), t.callExpression(t.memberExpression(t.identifier(name), t.identifier('fromAmino')), [t.memberExpression(t.identifier('object'), t.identifier(origName))]), t.identifier('undefined')));
  },
  anyType: function anyType(args) {
    var _getFieldNames8 = (0, _types2.getFieldNames)(args.field),
      propName = _getFieldNames8.propName,
      origName = _getFieldNames8.origName;
    // const typeMap = args.context.store.getTypeUrlMap(args.context.ref);
    // console.log(JSON.stringify(typeMap, null, 2));
    // console.log(JSON.stringify(args.field, null, 2));
    var interfaceName = args.field.options['(cosmos_proto.accepts_interface)'];
    var interfaceFnName = (0, _implements.getInterfaceFromAminoName)(interfaceName);
    return t.objectProperty(t.identifier(propName), t.conditionalExpression(t.optionalMemberExpression(t.identifier('object'), t.identifier(origName), false, true), t.callExpression(t.identifier(interfaceFnName), [t.memberExpression(t.identifier('object'), t.identifier(origName))]), t.identifier('undefined')));
  },
  type: function type(args) {
    if (args.context.options.aminoEncoding.useRecursiveV2encoding == true && args.context.options.interfaces.enabled == true && args.field.type === 'google.protobuf.Any' && args.field.options['(cosmos_proto.accepts_interface)']) {
      return fromAminoJSON.anyType(args);
    }
    return fromAminoJSON.protoType(args);
  },
  "enum": function _enum(args) {
    var _getFieldNames9 = (0, _types2.getFieldNames)(args.field),
      propName = _getFieldNames9.propName,
      origName = _getFieldNames9.origName;
    args.context.addUtil('isSet');
    var fromAminoJSONFuncName = args.context.getFromEnum(args.field);
    return t.objectProperty(t.identifier(propName), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(origName))]), t.callExpression(t.identifier(fromAminoJSONFuncName), [t.memberExpression(t.identifier('object'), t.identifier(origName))]), args.isOptional ? t.identifier('undefined') : t.numericLiteral(0)));
  },
  bytes: function bytes(args) {
    return fromAminoJSON.scalar(args);
  },
  duration: function duration(args) {
    return fromAminoJSON.type(args);
  },
  timestamp: function timestamp(args) {
    return fromAminoJSON.type(args);
  },
  //  labels: isObject(object.labels) ? Object.entries(object.labels).reduce<{
  //     [key: string]: string;
  //   }>((acc, [key, value]) => {
  //     acc[key] = String(value);
  //     return acc;
  //   }, {}) : {},
  //   referenceMap: isObject(object.referenceMap) ? Object.entries(object.referenceMap).reduce<{
  //     [key: Long]: Reference;
  //   }>((acc, [key, value]) => {
  //     acc[Number(key)] = Reference.fromAminoJSON(value);
  //     return acc;
  //   }, {}) : {},
  keyHash: function keyHash(args) {
    var _getFieldNames10 = (0, _types2.getFieldNames)(args.field),
      propName = _getFieldNames10.propName,
      origName = _getFieldNames10.origName;
    var keyType = args.field.keyType;
    var valueType = args.field.parsedType.name;
    args.context.addUtil('isObject');
    var fromAminoJSON = null;
    // valueTypeType: string for identifier
    var valueTypeType = valueType;
    switch (valueType) {
      case 'string':
        fromAminoJSON = t.callExpression(t.identifier('String'), [t.identifier('value')]);
        break;
      case 'int32':
      case 'uint32':
        valueTypeType = 'number';
        fromAminoJSON = t.callExpression(t.identifier('Number'), [t.identifier('value')]);
        break;
      case 'int64':
      case 'uint64':
        valueTypeType = 'Long';
        fromAminoJSON = t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromValue')), [t.tsAsExpression(t.identifier('value'), t.tsUnionType([t.tsTypeReference(t.identifier('Long')), t.tsStringKeyword()]))]);
        break;
      default:
        fromAminoJSON = t.callExpression(t.memberExpression(t.identifier(valueType), t.identifier('fromAmino')), [t.identifier('value')]);
    }
    var wrapKey = null;
    var keyTypeType = null;
    switch (keyType) {
      case 'string':
        wrapKey = function wrapKey(a) {
          return a;
        };
        keyTypeType = t.tsStringKeyword();
        break;
      case 'int64':
      case 'uint64':
        wrapKey = function wrapKey(a) {
          return t.callExpression(t.identifier('Number'), [a]);
        };
        keyTypeType = t.tsTypeReference(t.identifier('Long'));
        break;
      case 'uint32':
      case 'int32':
        wrapKey = function wrapKey(a) {
          return t.callExpression(t.identifier('Number'), [a]);
        };
        keyTypeType = t.tsTypeReference(t.identifier('number'));
        break;
      default:
        throw new Error('keyHash requires new type. Ask maintainers.');
    }
    return t.objectProperty(t.identifier(propName), t.conditionalExpression(t.callExpression(t.identifier('isObject'), [t.memberExpression(t.identifier('object'), t.identifier(origName))]), (0, _utils.callExpression)(t.memberExpression(t.callExpression(t.memberExpression(t.identifier('Object'), t.identifier('entries')), [t.memberExpression(t.identifier('object'), t.identifier(origName))]), t.identifier('reduce')), [t.arrowFunctionExpression([t.identifier('acc'), t.arrayPattern([t.identifier('key'), t.identifier('value')])], t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier('acc'), wrapKey(t.identifier('key')), true), fromAminoJSON)), t.returnStatement(t.identifier('acc'))])), t.objectExpression([])], t.tsTypeParameterInstantiation([t.tsTypeLiteral([t.tsIndexSignature([(0, _utils.identifier)('key', t.tsTypeAnnotation(keyTypeType))], t.tsTypeAnnotation(t.tsTypeReference(t.identifier(valueTypeType))))])])), t.objectExpression([])));
  },
  // codeIds: Array.isArray(object?.codeIds) ? object.codeIds.map((e: any) => Long.fromString(e)) : [],
  array: function array(args, expr) {
    var _getFieldNames11 = (0, _types2.getFieldNames)(args.field),
      propName = _getFieldNames11.propName,
      origName = _getFieldNames11.origName;
    return t.objectProperty(t.identifier(propName), t.conditionalExpression(t.callExpression(t.memberExpression(t.identifier('Array'), t.identifier('isArray')), [t.optionalMemberExpression(t.identifier('object'), t.identifier(origName), false, true)]), t.callExpression(t.memberExpression(t.memberExpression(t.identifier('object'), t.identifier(origName)), t.identifier('map')), [t.arrowFunctionExpression([(0, _utils.identifier)('e', t.tsTypeAnnotation(t.tsAnyKeyword()))], expr, false)]), t.arrayExpression([])));
  }
};
exports.fromAminoJSON = fromAminoJSON;
var arrayTypes = {
  scalar: function scalar() {
    return t.identifier('e');
  },
  string: function string() {
    return arrayTypes.scalar();
  },
  bool: function bool() {
    return arrayTypes.scalar();
  },
  bytes: function bytes(args) {
    return arrayTypes.scalar();
  },
  "long": function long() {
    return arrayTypes.scalar();
  },
  uint64: function uint64() {
    return arrayTypes.scalar();
  },
  int64: function int64() {
    return arrayTypes.scalar();
  },
  sint64: function sint64() {
    return arrayTypes.scalar();
  },
  fixed64: function fixed64() {
    return arrayTypes.scalar();
  },
  sfixed64: function sfixed64() {
    return arrayTypes.scalar();
  },
  number: function number() {
    return arrayTypes.scalar();
  },
  uint32: function uint32() {
    return arrayTypes.scalar();
  },
  int32: function int32() {
    return arrayTypes.scalar();
  },
  sint32: function sint32() {
    return arrayTypes.scalar();
  },
  fixed32: function fixed32() {
    return arrayTypes.scalar();
  },
  sfixed32: function sfixed32() {
    return arrayTypes.scalar();
  },
  "double": function double() {
    return arrayTypes.scalar();
  },
  "float": function float() {
    return arrayTypes.scalar();
  },
  "enum": function _enum(args) {
    var fromAminoJSONFuncName = args.context.getFromEnum(args.field);
    return t.callExpression(t.identifier(fromAminoJSONFuncName), [t.identifier('e')]);
  },
  // tokenInMaxs: Array.isArray(object?.tokenInMaxs) ? object.tokenInMaxs.map((e: any) => Coin.fromAminoJSON(e)) : []
  anyType: function anyType(args) {
    var interfaceName = args.field.options['(cosmos_proto.accepts_interface)'];
    var interfaceFnName = (0, _implements.getInterfaceFromAminoName)(interfaceName);
    return t.callExpression(t.identifier(interfaceFnName), [t.identifier('e')]);
  },
  protoType: function protoType(args) {
    var name = args.context.getTypeName(args.field);
    return t.callExpression(t.memberExpression(t.identifier(name), t.identifier('fromAmino')), [t.identifier('e')]);
  },
  type: function type(args) {
    if (args.context.options.aminoEncoding.useRecursiveV2encoding == true && args.context.options.interfaces.enabled == true && args.field.type === 'google.protobuf.Any' && args.field.options['(cosmos_proto.accepts_interface)']) {
      return arrayTypes.anyType(args);
    }
    return arrayTypes.protoType(args);
  }
};
exports.arrayTypes = arrayTypes;
var fromAminoMessages = {
  height: function height(context, name, proto) {
    context.addUtil('Long');
    var keepCase = context.options.prototypes.parser.keepCase;
    var casing = keepCase ? function (str) {
      return str;
    } : _utils2.camel;
    var makeField = function makeField(fieldName) {
      return t.objectProperty(t.identifier(casing(fieldName)), t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromString')), [t.logicalExpression('||', t.memberExpression(t.identifier('object'), t.identifier(fieldName)), t.stringLiteral('0')), t.booleanLiteral(true)]));
    };
    return [
    // return
    t.returnStatement(t.objectExpression([makeField('revision_number'), makeField('revision_height')]))];
  },
  duration: function duration(context, name, proto) {
    context.addUtil('Long');
    return [t.variableDeclaration('const', [t.variableDeclarator(t.identifier('value'), t.callExpression(t.identifier('parseInt'), [t.identifier('object')]))]),
    // return
    t.returnStatement(t.objectExpression([
    // seconds
    t.objectProperty(t.identifier('seconds'), t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromNumber')), [t.callExpression(t.memberExpression(t.identifier('Math'), t.identifier('floor')), [t.binaryExpression('/', t.identifier('value'), _utils.BILLION)])])),
    // nanos
    t.objectProperty(t.identifier('nanos'), t.binaryExpression('%', t.identifier('value'), _utils.BILLION))]))];
  }
};
exports.fromAminoMessages = fromAminoMessages;