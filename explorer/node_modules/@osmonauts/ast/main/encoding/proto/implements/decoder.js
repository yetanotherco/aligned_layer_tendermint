"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInterfaceDecoderName = exports.createInterfaceDecoderHelper = exports.createInterfaceDecoder = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("@osmonauts/utils");
var _utils2 = require("../../../utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var getMapFromTypeUrlMap = function getMapFromTypeUrlMap(urlMap, name) {
  var _urlMap$name$reduce, _urlMap$name;
  return (_urlMap$name$reduce = urlMap === null || urlMap === void 0 ? void 0 : (_urlMap$name = urlMap[name]) === null || _urlMap$name === void 0 ? void 0 : _urlMap$name.reduce(function (m, v) {
    v.types.forEach(function (type) {
      m[type.importAs] = type.typeUrl;
    });
    return m;
  }, {})) !== null && _urlMap$name$reduce !== void 0 ? _urlMap$name$reduce : {};
};
var firstUpper = function firstUpper(s) {
  return s = s.charAt(0).toUpperCase() + s.slice(1);
};
var getInterfaceDecoderName = function getInterfaceDecoderName(str) {
  return firstUpper((0, _utils.slugify)(str) + '_InterfaceDecoder');
};
exports.getInterfaceDecoderName = getInterfaceDecoderName;
var createInterfaceDecoder = function createInterfaceDecoder(context, ref, interfaceName) {
  var typeMap = context.store.getTypeUrlMap(ref);
  var typeRefs = typeMap[interfaceName];
  return createInterfaceDecoderHelper(context, getInterfaceDecoderName(interfaceName), typeRefs);
};
exports.createInterfaceDecoder = createInterfaceDecoder;
var createInterfaceDecoderHelper = function createInterfaceDecoderHelper(context, functionName, typeRefs) {
  var _typeRefs$reduce;
  context.addUtil('_m0');

  // MARKED AS NOT DRY
  var allTypes = (_typeRefs$reduce = typeRefs === null || typeRefs === void 0 ? void 0 : typeRefs.reduce(function (m, typeRef) {
    var _context$pluginValue, _context$pluginValue2;
    // check excludes
    var packages = (_context$pluginValue = context.pluginValue('prototypes.excluded.packages')) !== null && _context$pluginValue !== void 0 ? _context$pluginValue : [];
    var protos = (_context$pluginValue2 = context.pluginValue('prototypes.excluded.protos')) !== null && _context$pluginValue2 !== void 0 ? _context$pluginValue2 : [];
    var excluded = packages.includes(typeRef.pkg) || protos.includes(typeRef.ref);
    if (excluded) return m;
    return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(typeRef.types));
  }, [])) !== null && _typeRefs$reduce !== void 0 ? _typeRefs$reduce : [];
  var returnTypes = allTypes.map(function (type) {
    return type.importAs;
  });
  var decodeMessages = allTypes.map(function (type) {
    return type.typeUrl;
  });
  var switches = returnTypes.map(function (returnType, i) {
    return t.switchCase(t.stringLiteral(decodeMessages[i]), [t.returnStatement(t.callExpression(t.memberExpression(t.identifier(returnType), t.identifier('decode')), [t.memberExpression(t.identifier('data'), t.identifier('value'))]))]);
  });
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(functionName), (0, _utils2.arrowFunctionExpression)([(0, _utils2.identifier)('input', t.tsTypeAnnotation(t.tsUnionType([t.tsTypeReference(t.tsQualifiedName(t.identifier('_m0'), t.identifier('Reader'))), t.tsTypeReference(t.identifier('Uint8Array'))])), false)],
  // body
  t.blockStatement([
  /// READER
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('reader'), t.conditionalExpression(t.binaryExpression('instanceof', t.identifier('input'), t.memberExpression(t.identifier('_m0'), t.identifier('Reader'))), t.identifier('input'), t.newExpression(t.memberExpression(t.identifier('_m0'), t.identifier('Reader')), [t.identifier('input')])))]),
  // DATA
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('data'), t.callExpression(t.memberExpression(t.identifier('Any'), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32') // NOTE is it always uint32?
  ), [])]))]),
  // SWITCH
  t.switchStatement(t.memberExpression(t.identifier('data'), t.identifier('typeUrl')), [].concat((0, _toConsumableArray2["default"])(switches), [
  /////
  t.switchCase(null, [t.returnStatement(t.identifier('data'))])]))]),
  // return type
  t.tsTypeAnnotation(
  // do we need to use interfaces.useUnionTypes here ?
  t.tsUnionType([].concat((0, _toConsumableArray2["default"])(returnTypes.map(function (type) {
    return t.tsTypeReference(t.identifier(type));
  })), [t.tsTypeReference(t.identifier('Any'))])))))]));
};
exports.createInterfaceDecoderHelper = createInterfaceDecoderHelper;