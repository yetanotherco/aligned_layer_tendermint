"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInterfaceFromAminoName = exports.createInterfaceFromAminoHelper = exports.createInterfaceFromAmino = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("@osmonauts/utils");
var _utils2 = require("../../../utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var firstUpper = function firstUpper(s) {
  return s = s.charAt(0).toUpperCase() + s.slice(1);
};
var getInterfaceFromAminoName = function getInterfaceFromAminoName(str) {
  return firstUpper((0, _utils.slugify)(str) + '_FromAmino');
};
exports.getInterfaceFromAminoName = getInterfaceFromAminoName;
var makeFunctionWrapper = function makeFunctionWrapper(functionName, stmt) {
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(functionName), t.arrowFunctionExpression([(0, _utils2.identifier)('content', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('AnyAmino'))))], t.blockStatement([stmt])))]));
};
var createInterfaceFromAmino = function createInterfaceFromAmino(context, ref, interfaceName) {
  if (interfaceName === 'cosmos.crypto.PubKey') {
    // return a helper!
    context.addUtil('toBase64');
    context.addUtil('encodeBech32Pubkey');
    var functionName = getInterfaceFromAminoName(interfaceName);
    return makeFunctionWrapper(functionName, t.returnStatement(t.callExpression(t.identifier('encodeBech32Pubkey'), [t.objectExpression([t.objectProperty(t.identifier('type'), t.stringLiteral('tendermint/PubKeySecp256k1')), t.objectProperty(t.identifier('value'), t.callExpression(t.identifier('toBase64'), [t.memberExpression(t.identifier('content'), t.identifier('value'))]))]),
    // TODO how to manage this?
    // 1. options.prefix
    // 2. look into prefix and how it's used across chains
    // 3. maybe AminoConverter is a class and has this.prefix!
    t.stringLiteral('cosmos')])));
  }
  var typeMap = context.store.getTypeUrlMap(ref);
  var typeRefs = typeMap[interfaceName];
  return createInterfaceFromAminoHelper(context, getInterfaceFromAminoName(interfaceName), typeRefs);
};
exports.createInterfaceFromAmino = createInterfaceFromAmino;
var createInterfaceFromAminoHelper = function createInterfaceFromAminoHelper(context, functionName, typeRefs) {
  var _typeRefs$reduce;
  context.addUtil('DeepPartial');

  // MARKED AS NOT DRY
  var allTypes = (_typeRefs$reduce = typeRefs === null || typeRefs === void 0 ? void 0 : typeRefs.reduce(function (m, typeRef) {
    var _context$pluginValue, _context$pluginValue2;
    // check excludes
    var packages = (_context$pluginValue = context.pluginValue('prototypes.excluded.packages')) !== null && _context$pluginValue !== void 0 ? _context$pluginValue : [];
    var protos = (_context$pluginValue2 = context.pluginValue('prototypes.excluded.protos')) !== null && _context$pluginValue2 !== void 0 ? _context$pluginValue2 : [];
    var excluded = packages.includes(typeRef.pkg) || protos.includes(typeRef.ref);
    if (excluded) return m;
    return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(typeRef.types));
  }, [])) !== null && _typeRefs$reduce !== void 0 ? _typeRefs$reduce : [];
  var switchCases = allTypes.map(function (type) {
    if (!type.aminoType) return;
    return t.switchCase(t.stringLiteral(type.aminoType), [t.returnStatement(t.callExpression(t.memberExpression(t.identifier('Any'), t.identifier('fromPartial')), [t.objectExpression([t.objectProperty(t.identifier('typeUrl'), t.stringLiteral(type.typeUrl)), t.objectProperty(t.identifier('value'), t.callExpression(t.memberExpression(t.callExpression(t.memberExpression(t.identifier(type.importAs), t.identifier('encode')), [t.callExpression(t.memberExpression(t.identifier(type.importAs), t.identifier('fromPartial')), [t.callExpression(t.memberExpression(t.identifier(type.importAs), t.identifier('fromAmino')), [t.memberExpression(t.identifier('content'), t.identifier('value'))])])]), t.identifier('finish')), []))])]))]);
  }).filter(Boolean);
  var ast;
  if (!switchCases.length) {
    ast = t.returnStatement(t.callExpression(t.memberExpression(t.identifier('Any'), t.identifier('fromAmino')), [t.identifier('content')]));
  } else {
    ast = t.switchStatement(t.memberExpression(t.identifier('content'), t.identifier('type')), [].concat((0, _toConsumableArray2["default"])(switchCases), [
    /// default
    t.switchCase(null, [t.returnStatement(t.callExpression(t.memberExpression(t.identifier('Any'), t.identifier('fromAmino')), [t.identifier('content')]))])]));
  }
  return makeFunctionWrapper(functionName, ast);
};
exports.createInterfaceFromAminoHelper = createInterfaceFromAminoHelper;