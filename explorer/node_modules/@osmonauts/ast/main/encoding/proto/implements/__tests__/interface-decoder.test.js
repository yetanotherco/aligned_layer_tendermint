"use strict";

var _protoParser = require("@osmonauts/proto-parser");
var _testUtils = require("../../../../../test-utils/");
var _context = require("../../../context");
var _object = require("../../../object");
var _decoder = require("../decoder");
var store = (0, _testUtils.getTestProtoStore)();
store.options.aminoEncoding.useRecursiveV2encoding = true;
store.options.interfaces.enabled = true;
store.traverseAll();
var typeMap = {
  PoolI: [{
    ref: 'a/b/c.proto',
    pkg: 'a.b.c',
    types: [{
      typeUrl: '/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool',
      aminoType: 'osmo-sdk/StablePool',
      type: 'Pool',
      importAs: 'Pool1'
    }, {
      typeUrl: '/osmosis.gamm.v1beta1.Pool',
      aminoType: 'osmo-sdk/Pool',
      type: 'Pool',
      importAs: 'Pool2'
    }]
  }]
};
describe('PoolI', function () {
  var queryRef = store.findProto('osmosis/gamm/v1beta1/query.proto');
  var queryContext = new _context.ProtoParseContext(queryRef, store, store.options);
  it('getMapFromTypeUrlMap', function () {
    (0, _testUtils.expectCode)((0, _decoder.createInterfaceDecoder)(queryContext, queryRef, 'PoolI'));
  });
  it('PoolI', function () {
    (0, _testUtils.expectCode)((0, _decoder.createInterfaceDecoderHelper)(queryContext, 'PoolI_InterfaceDecoder', typeMap['PoolI']));
  });
  it('objects', function () {
    (0, _testUtils.expectCode)((0, _object.createObjectWithMethods)(queryContext, 'QueryPoolsResponse', (0, _protoParser.getNestedProto)(queryRef.traversed).QueryPoolsResponse));
  });
});