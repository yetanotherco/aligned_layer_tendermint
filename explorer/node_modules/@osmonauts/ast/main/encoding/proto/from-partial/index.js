"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromPartialMethodFields = exports.fromPartialMethod = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var t = _interopRequireWildcard(require("@babel/types"));
var _ = require("..");
var _utils = require("../../../utils");
var _types2 = require("../types");
var _utils2 = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var needsImplementation = function needsImplementation(name, field) {
  throw new Error("need to implement fromPartial (".concat(field.type, " rules[").concat(field.rule, "] name[").concat(name, "])"));
};
var fromPartialMethodFields = function fromPartialMethodFields(context, name, proto) {
  var _proto$fields;
  var oneOfs = (0, _.getOneOfs)(proto);
  var fields = Object.keys((_proto$fields = proto.fields) !== null && _proto$fields !== void 0 ? _proto$fields : {}).map(function (fieldName) {
    var field = _objectSpread({
      name: fieldName
    }, proto.fields[fieldName]);
    var isOneOf = oneOfs.includes(fieldName);
    var isOptional = (0, _.getFieldOptionality)(context, field, isOneOf);
    var args = {
      context: context,
      field: field,
      isOneOf: isOneOf,
      isOptional: isOptional
    };
    if (field.rule === 'repeated') {
      switch (field.type) {
        case 'string':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.string());
        case 'bool':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.bool());
        case 'bytes':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.bytes());
        case 'float':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes["float"]());
        case 'double':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes["double"]());
        case 'int32':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.int32());
        case 'sint32':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.sint32());
        case 'uint32':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.uint32());
        case 'fixed32':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.fixed32());
        case 'sfixed32':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.sfixed32());
        case 'int64':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.int64());
        case 'sint64':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.sint64());
        case 'uint64':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.uint64());
        case 'fixed64':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.fixed64());
        case 'sfixed64':
          return _utils2.fromPartial.array(args, _utils2.arrayTypes.sfixed64());
        default:
          switch (field.parsedType.type) {
            case 'Enum':
              return _utils2.fromPartial.array(args, _utils2.arrayTypes["enum"]());
            case 'Type':
              return _utils2.fromPartial.array(args, _utils2.arrayTypes.type(args));
          }
          return needsImplementation(fieldName, field);
      }
    }
    if (field.keyType) {
      switch (field.keyType) {
        case 'string':
        case 'int32':
        case 'sint32':
        case 'uint32':
        case 'fixed32':
        case 'sfixed32':
        case 'int64':
        case 'sint64':
        case 'uint64':
        case 'fixed64':
        case 'sfixed64':
          return _utils2.fromPartial.keyHash(args);
        default:
          return needsImplementation(fieldName, field);
      }
    }
    switch (field.type) {
      case 'string':
        return _utils2.fromPartial.string(args);
      case 'bytes':
        return _utils2.fromPartial.bytes(args);
      case 'bool':
        return _utils2.fromPartial.bool(args);
      case 'double':
        return _utils2.fromPartial["double"](args);
      case 'float':
        return _utils2.fromPartial["float"](args);
      case 'int32':
        return _utils2.fromPartial.int32(args);
      case 'sint32':
        return _utils2.fromPartial.sint32(args);
      case 'uint32':
        return _utils2.fromPartial.uint32(args);
      case 'fixed32':
        return _utils2.fromPartial.fixed32(args);
      case 'sfixed32':
        return _utils2.fromPartial.sfixed32(args);
      case 'int64':
        return _utils2.fromPartial.int64(args);
      case 'sint64':
        return _utils2.fromPartial.sint64(args);
      case 'uint64':
        return _utils2.fromPartial.uint64(args);
      case 'fixed64':
        return _utils2.fromPartial.fixed64(args);
      case 'sfixed64':
        return _utils2.fromPartial.sfixed64(args);
      case 'google.protobuf.Duration':
      case 'Duration':
        return _utils2.fromPartial.duration(args);
      case 'google.protobuf.Timestamp':
      case 'Timestamp':
        return _utils2.fromPartial.timestamp(args);
      default:
        switch (field.parsedType.type) {
          case 'Enum':
            return _utils2.fromPartial["enum"](args);
          case 'Type':
            return _utils2.fromPartial.type(args);
        }
        return needsImplementation(fieldName, field);
    }
  });
  return fields;
};
exports.fromPartialMethodFields = fromPartialMethodFields;
var fromPartialMethod = function fromPartialMethod(context, name, proto) {
  var useDeepPartial = context.pluginValue('prototypes.typingsFormat.useDeepPartial');
  var partialName = 'Partial';
  if (useDeepPartial) {
    context.addUtil('DeepPartial');
    partialName = 'DeepPartial';
  }
  var fields = fromPartialMethodFields(context, name, proto);
  var varName = 'object';
  if (!fields.length) {
    varName = '_';
  }
  var typeParameters = undefined;
  var param = null;
  var useExact = context.pluginValue('prototypes.typingsFormat.useExact');
  if (useExact === true) {
    context.addUtil('Exact');

    // type params
    typeParameters = t.tsTypeParameterDeclaration([t.tsTypeParameter(t.tsTypeReference(t.identifier('Exact'), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(partialName), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(name))])), t.tsTypeReference(t.identifier('I'))])), null, 'I')]);
    // param
    param = (0, _utils.identifier)(varName, t.tsTypeAnnotation(t.tsTypeReference(t.identifier('I'))));
  } else {
    // param
    param = (0, _utils.identifier)(varName, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(partialName), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(name))]))));
  }
  return (0, _utils.objectMethod)('method', t.identifier('fromPartial'), [param], t.blockStatement([
  // init 
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('message'), t.callExpression(t.identifier((0, _types2.getBaseCreateTypeFuncName)(name)), []))])].concat((0, _toConsumableArray2["default"])(fields), [
  // RETURN 
  t.returnStatement(t.identifier('message'))])), false, false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))), typeParameters);
};
exports.fromPartialMethod = fromPartialMethod;