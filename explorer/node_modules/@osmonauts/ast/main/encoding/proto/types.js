"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.types = exports.isScalarField = exports.isEnumField = exports.isArrayField = exports.getWireNumber = exports.getTagNumber = exports.getPackedWireNumber = exports.getOneOfs = exports.getKeyTypeEntryName = exports.getFieldsTypeName = exports.getFieldOptionalityForDefaults = exports.getFieldOptionality = exports.getEnumToJsonName = exports.getEnumFromJsonName = exports.getBaseCreateTypeFuncName = exports.SCALAR_TYPES = exports.GOOGLE_TYPES = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _case = require("case");
var SCALAR_TYPES = ['string', 'double', 'float', 'int32', 'uint32', 'sint32', 'fixed32', 'sfixed32', 'int64', 'uint64', 'sint64', 'fixed64', 'sfixed64', 'bytes', 'bool'];
exports.SCALAR_TYPES = SCALAR_TYPES;
var GOOGLE_TYPES = ['google.protobuf.Timestamp', 'google.protobuf.Duration', 'google.protobuf.Any'];

// https://github.com/protobufjs/protobuf.js/blob/master/src/types.js#L38-L54
exports.GOOGLE_TYPES = GOOGLE_TYPES;
var types = {
  basic: {
    "double": 1,
    "float": 5,
    int32: 0,
    uint32: 0,
    sint32: 0,
    fixed32: 5,
    sfixed32: 5,
    int64: 0,
    uint64: 0,
    sint64: 0,
    fixed64: 1,
    sfixed64: 1,
    bool: 0,
    string: 2,
    bytes: 2
  },
  defaults: {
    "double": 0,
    "float": 0,
    int32: 0,
    uint32: 0,
    sint32: 0,
    fixed32: 0,
    sfixed32: 0,
    int64: 0,
    uint64: 0,
    sint64: 0,
    fixed64: 0,
    sfixed64: 0,
    bool: false,
    string: '',
    bytes: [],
    undefined: null
  },
  "long": {
    int64: 0,
    uint64: 0,
    sint64: 0,
    fixed64: 1,
    sfixed64: 1
  },
  mapKey: {
    int32: 0,
    uint32: 0,
    sint32: 0,
    fixed32: 5,
    sfixed32: 5,
    int64: 0,
    uint64: 0,
    sint64: 0,
    fixed64: 1,
    sfixed64: 1,
    bool: 0,
    string: 2
  },
  packed: {
    "double": 1,
    "float": 5,
    int32: 0,
    uint32: 0,
    sint32: 0,
    fixed32: 5,
    sfixed32: 5,
    int64: 0,
    uint64: 0,
    sint64: 0,
    fixed64: 1,
    sfixed64: 1,
    bool: 0
  }
};
exports.types = types;
var getWireNumber = function getWireNumber(type) {
  if (types.basic.hasOwnProperty(type)) {
    return types.basic[type];
  }
  return 2;
};
exports.getWireNumber = getWireNumber;
var getPackedWireNumber = function getPackedWireNumber(type) {
  if (types.packed.hasOwnProperty(type)) {
    return types.packed[type];
  }
  return 2;
};
exports.getPackedWireNumber = getPackedWireNumber;
var getTagNumber = function getTagNumber(field) {
  var wire = getWireNumber(field.type);
  if (field.parsedType.type === 'Enum') {
    wire = 0;
  }
  if (field.rule === 'repeated') {
    wire = 2;
  }
  return (field.id << 3 | wire) >>> 0;
};
exports.getTagNumber = getTagNumber;
var lowerFirst = function lowerFirst(str) {
  return str.charAt(0).toLowerCase() + str.substring(1);
};
var upperFirst = function upperFirst(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
};
var getEnumToJsonName = function getEnumToJsonName(name) {
  return lowerFirst(name) + 'ToJSON';
};
exports.getEnumToJsonName = getEnumToJsonName;
var getEnumFromJsonName = function getEnumFromJsonName(name) {
  return lowerFirst(name) + 'FromJSON';
};
exports.getEnumFromJsonName = getEnumFromJsonName;
var getFieldsTypeName = function getFieldsTypeName(field) {
  if ((field === null || field === void 0 ? void 0 : field.scope.length) <= 1) return field.parsedType.name;
  var _field$scope = (0, _toArray2["default"])(field.scope),
    _pkg = _field$scope[0],
    scopes = _field$scope.slice(1);
  return [].concat((0, _toConsumableArray2["default"])(scopes), [field.parsedType.name]).join('_');
};
exports.getFieldsTypeName = getFieldsTypeName;
var getKeyTypeEntryName = function getKeyTypeEntryName(typeName, prop) {
  return "".concat(typeName, "_").concat((0, _case.pascal)(prop), "Entry");
};
exports.getKeyTypeEntryName = getKeyTypeEntryName;
var getBaseCreateTypeFuncName = function getBaseCreateTypeFuncName(name) {
  return "createBase".concat(upperFirst(name));
};
exports.getBaseCreateTypeFuncName = getBaseCreateTypeFuncName;
var getOneOfs = function getOneOfs(type) {
  var _type$oneofs;
  var keys = Object.keys((_type$oneofs = type.oneofs) !== null && _type$oneofs !== void 0 ? _type$oneofs : {});
  if (!keys.length) return [];
  if (keys.length !== 1) throw new Error('getOneOfs() oneofs cardinality not known!');
  return type.oneofs[keys[0]].oneof;
};
exports.getOneOfs = getOneOfs;
var getFieldOptionality = function getFieldOptionality(context, field, isOneOf) {
  // const useOptionalNullable = context.pluginValue('prototypes.useOptionalNullable');
  // const fieldDefaultIsOptional = context.pluginValue('prototypes.fieldDefaultIsOptional');
  // const isNullable = field?.options?.['(gogoproto.nullable)'] ?? fieldDefaultIsOptional;

  if (isArrayField(field) || isEnumField(field) || isScalarField(field)) {
    // these field types are required by default!
    if (isOneOf) {
      return true;
    }
    return false;
  }
  return true;
};
exports.getFieldOptionality = getFieldOptionality;
var isScalarField = function isScalarField(field) {
  return SCALAR_TYPES.includes(field.type);
};
exports.isScalarField = isScalarField;
var isArrayField = function isArrayField(field) {
  return field.rule === 'repeated';
};
exports.isArrayField = isArrayField;
var isEnumField = function isEnumField(field) {
  var _field$parsedType;
  return ((_field$parsedType = field.parsedType) === null || _field$parsedType === void 0 ? void 0 : _field$parsedType.type) === 'Enum';
};
exports.isEnumField = isEnumField;
var getFieldOptionalityForDefaults = function getFieldOptionalityForDefaults(context, field, isOneOf) {
  var _field$options2;
  var fieldDefaultIsOptional = context.pluginValue('prototypes.fieldDefaultIsOptional');
  var useOptionalNullable = context.pluginValue('prototypes.useOptionalNullable');
  if (isArrayField(field) || isEnumField(field) || isScalarField(field)) {
    var _field$options;
    // these field types are required by default!

    if (isOneOf || useOptionalNullable && field !== null && field !== void 0 && (_field$options = field.options) !== null && _field$options !== void 0 && _field$options['(gogoproto.nullable)']) {
      return true;
    }
    return false;
  }
  return isOneOf || useOptionalNullable && (field === null || field === void 0 ? void 0 : (_field$options2 = field.options) === null || _field$options2 === void 0 ? void 0 : _field$options2['(gogoproto.nullable)']) ||
  // this would only happen if previous predicate is false,
  // so lets ensure not to override required properties when gogoproto.nullable=false
  !useOptionalNullable && fieldDefaultIsOptional;
};
exports.getFieldOptionalityForDefaults = getFieldOptionalityForDefaults;