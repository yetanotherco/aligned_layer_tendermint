"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.switchTagDelimArray = exports.switchProtoTypeArray = exports.switchOnTagTakesArray = exports.switchOnTag = exports.switchArray = exports.switchAnyTypeArray = exports.decode = exports.baseTypes = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _ = require("..");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var decode = {
  string: function string(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.string(args));
  },
  bool: function bool(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.bool(args));
  },
  "double": function double(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes["double"](args));
  },
  "float": function float(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes["float"](args));
  },
  int32: function int32(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.int32(args));
  },
  sint32: function sint32(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.sint32(args));
  },
  uint32: function uint32(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.uint32(args));
  },
  fixed32: function fixed32(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.fixed32(args));
  },
  sfixed32: function sfixed32(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.sfixed32(args));
  },
  int64: function int64(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.int64(args));
  },
  sint64: function sint64(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.sint64(args));
  },
  uint64: function uint64(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.uint64(args));
  },
  fixed64: function fixed64(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.fixed64(args));
  },
  sfixed64: function sfixed64(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.sfixed64(args));
  },
  duration: function duration(args) {
    var num = args.field.id;
    var prop = args.field.name;
    var durationFormat = args.context.pluginValue('prototypes.typingsFormat.duration');
    switch (durationFormat) {
      case 'string':
        return switchOnTag(num, prop, baseTypes.durationString(args));
      case 'duration':
      default:
        return switchOnTag(num, prop, baseTypes.type(args));
    }
  },
  timestamp: function timestamp(args) {
    var num = args.field.id;
    var prop = args.field.name;
    var timestampFormat = args.context.pluginValue('prototypes.typingsFormat.timestamp');
    switch (timestampFormat) {
      case 'timestamp':
        return switchOnTag(num, prop, baseTypes.timestamp(args));
      case 'date':
      default:
        return switchOnTag(num, prop, baseTypes.timestampDate(args));
    }
  },
  type: function type(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.type(args));
  },
  "enum": function _enum(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes["enum"](args));
  },
  bytes: function bytes(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTag(num, prop, baseTypes.bytes(args));
  },
  keyHash: function keyHash(args) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchOnTagTakesArray(num, prop, baseTypes.keyHash(args));
  },
  tagDelimArray: function tagDelimArray(args, expr) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchTagDelimArray(num, prop, expr);
  },
  array: function array(args, expr) {
    var num = args.field.id;
    var prop = args.field.name;
    return switchArray(num, prop, expr);
  },
  typeArray: function typeArray(args) {
    var num = args.field.id;
    var prop = args.field.name;
    var name = args.context.getTypeName(args.field);
    if (args.context.options.aminoEncoding.useRecursiveV2encoding == true && args.context.options.interfaces.enabled == true && args.field.type === 'google.protobuf.Any' && args.field.options['(cosmos_proto.accepts_interface)']) {
      var interfaceName = args.field.options['(cosmos_proto.accepts_interface)'];
      var interfaceFnName = (0, _.getInterfaceDecoderName)(interfaceName);
      return switchAnyTypeArray(num, prop, interfaceFnName);
    }
    return switchProtoTypeArray(num, prop, name);
  }
};
exports.decode = decode;
var baseTypes = {
  // reader.string();
  string: function string(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('string')), []);
  },
  // reader.bool();
  bool: function bool(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('bool')), []);
  },
  // reader.double();
  "double": function double(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('double')), []);
  },
  // reader.float();
  "float": function float(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('float')), []);
  },
  // reader.int32();
  int32: function int32(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('int32')), []);
  },
  // reader.sint32();
  sint32: function sint32(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('sint32')), []);
  },
  // reader.uint32();
  uint32: function uint32(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), []);
  },
  // reader.fixed32();
  fixed32: function fixed32(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('fixed32')), []);
  },
  // reader.sfixed32();
  sfixed32: function sfixed32(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('sfixed32')), []);
  },
  // (reader.int64() as Long);
  int64: function int64(args) {
    args.context.addUtil('Long');
    return t.tsAsExpression(t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('int64')), []), t.tsTypeReference(t.identifier('Long')));
  },
  // (reader.sint64() as Long);
  sint64: function sint64(args) {
    args.context.addUtil('Long');
    return t.tsAsExpression(t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('sint64')), []), t.tsTypeReference(t.identifier('Long')));
  },
  // (reader.uint64() as Long);
  uint64: function uint64(args) {
    args.context.addUtil('Long');
    return t.tsAsExpression(t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint64')), []), t.tsTypeReference(t.identifier('Long')));
  },
  // (reader.fixed64() as Long);
  fixed64: function fixed64(args) {
    args.context.addUtil('Long');
    return t.tsAsExpression(t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('fixed64')), []), t.tsTypeReference(t.identifier('Long')));
  },
  // (reader.sfixed64() as Long);
  sfixed64: function sfixed64(args) {
    args.context.addUtil('Long');
    return t.tsAsExpression(t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('sfixed64')), []), t.tsTypeReference(t.identifier('Long')));
  },
  // SignDocDirectAux.decode(reader, reader.uint32());
  protoType: function protoType(args) {
    var name = args.context.getTypeName(args.field);
    return t.callExpression(t.memberExpression(t.identifier(name), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), [])]);
  },
  anyType: function anyType(args) {
    // const { propName, origName } = getFieldNames(args.field);
    // const typeMap = args.context.store.getTypeUrlMap(args.context.ref);
    // console.log(JSON.stringify(typeMap, null, 2));
    // console.log(JSON.stringify(args.field, null, 2));
    var interfaceName = args.field.options['(cosmos_proto.accepts_interface)'];
    var interfaceFnName = (0, _.getInterfaceDecoderName)(interfaceName);
    return t.tsAsExpression(t.callExpression(t.identifier(interfaceFnName), [t.identifier('reader')]), t.tsTypeReference(t.identifier('Any')));
  },
  type: function type(args) {
    if (args.context.options.aminoEncoding.useRecursiveV2encoding == true && args.context.options.interfaces.enabled == true && args.field.type === 'google.protobuf.Any' && args.field.options['(cosmos_proto.accepts_interface)']) {
      return baseTypes.anyType(args);
    }
    return baseTypes.protoType(args);
  },
  // (reader.int32() as any);
  "enum": function _enum(args) {
    return t.tsAsExpression(t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('int32')), []), t.tsAnyKeyword());
  },
  // reader.bytes()
  bytes: function bytes(args) {
    return t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('bytes')), []);
  },
  // message.period = fromDuration(Duration.decode(reader, reader.uint32()));
  durationString: function durationString(args) {
    args.context.addUtil('fromDuration');
    return t.callExpression(t.identifier('fromDuration'), [t.callExpression(t.memberExpression(t.identifier('Duration'), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), [])])]);
  },
  // message.periodReset = Timestamp.decode(reader, reader.uint32());
  timestamp: function timestamp(args) {
    return t.callExpression(t.memberExpression(t.identifier('Timestamp'), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), [])]);
  },
  timestampDate: function timestampDate(args) {
    args.context.addUtil('fromTimestamp');
    return t.callExpression(t.identifier('fromTimestamp'), [t.callExpression(t.memberExpression(t.identifier('Timestamp'), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), [])])]);
  },
  // const entry1 = LogEntry_LabelsEntry.decode(reader, reader.uint32());
  // if (entry1.value !== undefined) {
  //     message.labels[entry13.key] = entry13.value;
  // }
  keyHash: function keyHash(args) {
    var prop = args.field.name;
    var name = args.typeName;
    var id = args.field.id;
    var entryVariable = "entry".concat(id);
    return [t.variableDeclaration('const', [t.variableDeclarator(t.identifier(entryVariable), t.callExpression(t.memberExpression(t.identifier((0, _.getKeyTypeEntryName)(name, prop)), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), [])]))]), t.ifStatement(t.binaryExpression('!==', t.memberExpression(t.identifier(entryVariable), t.identifier('value')), t.identifier('undefined')), t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.memberExpression(t.identifier(entryVariable), t.identifier('key')), true), t.memberExpression(t.identifier(entryVariable), t.identifier('value'))))]))];
  }
};
exports.baseTypes = baseTypes;
var switchOnTag = function switchOnTag(num, prop, expr) {
  return t.switchCase(t.numericLiteral(num), [t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier('message'), t.identifier(prop)), expr)), t.breakStatement()]);
};
exports.switchOnTag = switchOnTag;
var switchOnTagTakesArray = function switchOnTagTakesArray(num, prop, expr) {
  return t.switchCase(t.numericLiteral(num), [].concat((0, _toConsumableArray2["default"])(expr), [t.breakStatement()]));
};

//    message.tokenInMaxs.push(Coin.decode(reader, reader.uint32()));
exports.switchOnTagTakesArray = switchOnTagTakesArray;
var switchProtoTypeArray = function switchProtoTypeArray(num, prop, name) {
  return t.switchCase(t.numericLiteral(num), [t.expressionStatement(t.callExpression(t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.identifier('push')), [t.callExpression(t.memberExpression(t.identifier(name), t.identifier('decode')), [t.identifier('reader'), t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), [])])])), t.breakStatement()]);
};
exports.switchProtoTypeArray = switchProtoTypeArray;
var switchAnyTypeArray = function switchAnyTypeArray(num, prop, name) {
  return t.switchCase(t.numericLiteral(num), [t.expressionStatement(t.callExpression(t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.identifier('push')), [t.tsAsExpression(t.callExpression(t.identifier(name), [t.identifier('reader')]), t.tsTypeReference(t.identifier('Any')))])), t.breakStatement()]);
};

// if ((tag & 7) === 2) {
//     const end2 = reader.uint32() + reader.pos;

//     while (reader.pos < end2) {
//         message.codeIds.push((reader.uint64() as Long));
//     }
// } else {
//     message.codeIds.push((reader.uint64() as Long));
// }
exports.switchAnyTypeArray = switchAnyTypeArray;
var switchTagDelimArray = function switchTagDelimArray(num, prop, expr) {
  var blockStmt = t.blockStatement([t.expressionStatement(t.callExpression(t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.identifier('push')), [expr]))]);
  return t.switchCase(t.numericLiteral(num), [t.ifStatement(t.binaryExpression('===', t.binaryExpression('&', t.identifier('tag'), t.numericLiteral(7)), t.numericLiteral(2)), t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('end2'), t.binaryExpression('+', t.callExpression(t.memberExpression(t.identifier('reader'), t.identifier('uint32')), []), t.memberExpression(t.identifier('reader'), t.identifier('pos'))))]),
  // while loop

  t.whileStatement(t.binaryExpression('<', t.memberExpression(t.identifier('reader'), t.identifier('pos')), t.identifier('end2')), blockStmt)]), blockStmt), t.breakStatement()]);
};
exports.switchTagDelimArray = switchTagDelimArray;
var switchArray = function switchArray(num, prop, expr) {
  return t.switchCase(t.numericLiteral(num), [t.expressionStatement(t.callExpression(t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.identifier('push')), [expr])), t.breakStatement()]);
};
exports.switchArray = switchArray;