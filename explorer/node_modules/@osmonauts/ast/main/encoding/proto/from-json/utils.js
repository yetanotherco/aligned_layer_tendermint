"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromJSON = exports.arrayTypes = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../../utils");
var _types2 = require("../../types");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var getPropNames = function getPropNames(field) {
  var _field$options$json_n, _field$options;
  var messageProp = field.name;
  var objProp = (_field$options$json_n = (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options.json_name) !== null && _field$options$json_n !== void 0 ? _field$options$json_n : field.name;
  return {
    messageProp: messageProp,
    objProp: objProp
  };
};
var fromJSON = {
  // sender: isSet(object.sender) ? String(object.sender) : ""
  string: function string(args) {
    var _getPropNames = getPropNames(args.field),
      messageProp = _getPropNames.messageProp,
      objProp = _getPropNames.objProp;
    args.context.addUtil('isSet');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier('String'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOneOf)));
  },
  number: function number(args) {
    var _getPropNames2 = getPropNames(args.field),
      messageProp = _getPropNames2.messageProp,
      objProp = _getPropNames2.objProp;
    args.context.addUtil('isSet');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier('Number'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOneOf)));
  },
  "double": function double(args) {
    return fromJSON.number(args);
  },
  "float": function float(args) {
    return fromJSON.number(args);
  },
  int32: function int32(args) {
    return fromJSON.number(args);
  },
  sint32: function sint32(args) {
    return fromJSON.number(args);
  },
  uint32: function uint32(args) {
    return fromJSON.number(args);
  },
  fixed32: function fixed32(args) {
    return fromJSON.number(args);
  },
  sfixed32: function sfixed32(args) {
    return fromJSON.number(args);
  },
  // disableMacros: isSet(object.disableMacros) ? Boolean(object.disableMacros) : false
  bool: function bool(args) {
    var _getPropNames3 = getPropNames(args.field),
      messageProp = _getPropNames3.messageProp,
      objProp = _getPropNames3.objProp;
    args.context.addUtil('isSet');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier('Boolean'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOneOf)));
  },
  // int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : Long.UZERO,
  "long": function long(args) {
    var _getPropNames4 = getPropNames(args.field),
      messageProp = _getPropNames4.messageProp,
      objProp = _getPropNames4.objProp;
    args.context.addUtil('isSet');
    args.context.addUtil('Long');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromValue')), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOneOf)));
  },
  int64: function int64(args) {
    return fromJSON["long"](args);
  },
  // uint64Value: isSet(object.uint64Value) ? Long.fromString(object.uint64Value) : Long.ZERO,
  uint64: function uint64(args) {
    return fromJSON["long"](args);
  },
  sint64: function sint64(args) {
    return fromJSON["long"](args);
  },
  fixed64: function fixed64(args) {
    return fromJSON["long"](args);
  },
  sfixed64: function sfixed64(args) {
    return fromJSON["long"](args);
  },
  // signDoc: isSet(object.signDoc) ? SignDocDirectAux.fromJSON(object.signDoc) : undefined,
  type: function type(args) {
    var _getPropNames5 = getPropNames(args.field),
      messageProp = _getPropNames5.messageProp,
      objProp = _getPropNames5.objProp;
    var name = args.context.getTypeName(args.field);
    args.context.addUtil('isSet');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.memberExpression(t.identifier(name), t.identifier('fromJSON')), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.identifier('undefined')));
  },
  // mode: isSet(object.mode) ? signModeFromJSON(object.mode) : 0,
  "enum": function _enum(args) {
    var _getPropNames6 = getPropNames(args.field),
      messageProp = _getPropNames6.messageProp,
      objProp = _getPropNames6.objProp;
    args.context.addUtil('isSet');
    var fromJSONFuncName = args.context.getFromEnum(args.field);
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier(fromJSONFuncName), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), args.isOptional ? t.identifier('undefined') : t.numericLiteral(0)));
  },
  // queryData: isSet(object.queryData) ? bytesFromBase64(object.queryData) : new Uint8Array()
  bytes: function bytes(args) {
    var _getPropNames7 = getPropNames(args.field),
      messageProp = _getPropNames7.messageProp,
      objProp = _getPropNames7.objProp;
    args.context.addUtil('isSet');
    args.context.addUtil('bytesFromBase64');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier('bytesFromBase64'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOneOf)));
  },
  // period: isSet(object.period) ? Duration.fromJSON(object.period) : undefined,
  duration: function duration(args) {
    var durationFormat = args.context.pluginValue('prototypes.typingsFormat.duration');
    switch (durationFormat) {
      case 'string':
        return fromJSON.durationString(args);
      case 'duration':
      default:
        return fromJSON.type(args);
    }
  },
  // period: isSet(object.period) ? String(object.period) : undefined,
  durationString: function durationString(args) {
    var _getPropNames8 = getPropNames(args.field),
      messageProp = _getPropNames8.messageProp,
      objProp = _getPropNames8.objProp;
    args.context.addUtil('isSet');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier('String'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.identifier('undefined')));
  },
  // periodReset: isSet(object.periodReset) ? fromJsonTimestamp(object.periodReset) : undefined
  timestamp: function timestamp(args) {
    var _getPropNames9 = getPropNames(args.field),
      messageProp = _getPropNames9.messageProp,
      objProp = _getPropNames9.objProp;
    args.context.addUtil('isSet');
    args.context.addUtil('fromJsonTimestamp');
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isSet'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.callExpression(t.identifier('fromJsonTimestamp'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.identifier('undefined')));
  },
  //  labels: isObject(object.labels) ? Object.entries(object.labels).reduce<{
  //     [key: string]: string;
  //   }>((acc, [key, value]) => {
  //     acc[key] = String(value);
  //     return acc;
  //   }, {}) : {},
  //   referenceMap: isObject(object.referenceMap) ? Object.entries(object.referenceMap).reduce<{
  //     [key: Long]: Reference;
  //   }>((acc, [key, value]) => {
  //     acc[Number(key)] = Reference.fromJSON(value);
  //     return acc;
  //   }, {}) : {},
  keyHash: function keyHash(args) {
    var _getPropNames10 = getPropNames(args.field),
      messageProp = _getPropNames10.messageProp,
      objProp = _getPropNames10.objProp;
    var keyType = args.field.keyType;
    var valueType = args.field.parsedType.name;
    args.context.addUtil('isObject');
    var fromJSON = null;
    // valueTypeType: string for identifier
    var valueTypeType = valueType;
    switch (valueType) {
      case 'string':
        fromJSON = t.callExpression(t.identifier('String'), [t.identifier('value')]);
        break;
      case 'int32':
      case 'uint32':
        valueTypeType = 'number';
        fromJSON = t.callExpression(t.identifier('Number'), [t.identifier('value')]);
        break;
      case 'int64':
      case 'uint64':
        valueTypeType = 'Long';
        fromJSON = t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromValue')), [t.tsAsExpression(t.identifier('value'), t.tsUnionType([t.tsTypeReference(t.identifier('Long')), t.tsStringKeyword()]))]);
        break;
      default:
        fromJSON = t.callExpression(t.memberExpression(t.identifier(valueType), t.identifier('fromJSON')), [t.identifier('value')]);
    }
    var wrapKey = null;
    var keyTypeType = null;
    switch (keyType) {
      case 'string':
        wrapKey = function wrapKey(a) {
          return a;
        };
        keyTypeType = t.tsStringKeyword();
        break;
      case 'int64':
      case 'uint64':
        wrapKey = function wrapKey(a) {
          return t.callExpression(t.identifier('Number'), [a]);
        };
        keyTypeType = t.tsTypeReference(t.identifier('Long'));
        break;
      case 'uint32':
      case 'int32':
        wrapKey = function wrapKey(a) {
          return t.callExpression(t.identifier('Number'), [a]);
        };
        keyTypeType = t.tsTypeReference(t.identifier('number'));
        break;
      default:
        throw new Error('keyHash requires new type. Ask maintainers.');
    }
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.identifier('isObject'), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), (0, _utils.callExpression)(t.memberExpression(t.callExpression(t.memberExpression(t.identifier('Object'), t.identifier('entries')), [t.memberExpression(t.identifier('object'), t.identifier(objProp))]), t.identifier('reduce')), [t.arrowFunctionExpression([t.identifier('acc'), t.arrayPattern([t.identifier('key'), t.identifier('value')])], t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier('acc'), wrapKey(t.identifier('key')), true), fromJSON)), t.returnStatement(t.identifier('acc'))])), t.objectExpression([])], t.tsTypeParameterInstantiation([t.tsTypeLiteral([t.tsIndexSignature([(0, _utils.identifier)('key', t.tsTypeAnnotation(keyTypeType))], t.tsTypeAnnotation(t.tsTypeReference(t.identifier(valueTypeType))))])])), t.objectExpression([])));
  },
  // codeIds: Array.isArray(object?.codeIds) ? object.codeIds.map((e: any) => Long.fromString(e)) : [],
  array: function array(args, expr) {
    var _getPropNames11 = getPropNames(args.field),
      messageProp = _getPropNames11.messageProp,
      objProp = _getPropNames11.objProp;
    return t.objectProperty(t.identifier(messageProp), t.conditionalExpression(t.callExpression(t.memberExpression(t.identifier('Array'), t.identifier('isArray')), [t.optionalMemberExpression(t.identifier('object'), t.identifier(objProp), false, true)]), t.callExpression(t.memberExpression(t.memberExpression(t.identifier('object'), t.identifier(objProp)), t.identifier('map')), [t.arrowFunctionExpression([(0, _utils.identifier)('e', t.tsTypeAnnotation(t.tsAnyKeyword()))], expr, false)]), t.arrayExpression([])));
  }
};
exports.fromJSON = fromJSON;
var arrayTypes = {
  string: function string() {
    return t.callExpression(t.identifier('String'), [t.identifier('e')]);
  },
  bool: function bool() {
    return t.callExpression(t.identifier('Boolean'), [t.identifier('e')]);
  },
  // myBytesArray: Array.isArray(object?.myBytesArray) ? object.myBytesArray.map((e: any) => bytesFromBase64(e)) : [],
  bytes: function bytes(args) {
    args.context.addUtil('bytesFromBase64');
    return t.callExpression(t.identifier('bytesFromBase64'), [t.identifier('e')]);
  },
  // codeIds: Array.isArray(object?.codeIds) ? object.codeIds.map((e: any) => Long.fromValue(e)) : [],
  "long": function long() {
    return t.callExpression(t.memberExpression(t.identifier('Long'), t.identifier('fromValue')), [t.identifier('e')]);
  },
  uint64: function uint64() {
    return arrayTypes["long"]();
  },
  int64: function int64() {
    return arrayTypes["long"]();
  },
  sint64: function sint64() {
    return arrayTypes["long"]();
  },
  fixed64: function fixed64() {
    return arrayTypes["long"]();
  },
  sfixed64: function sfixed64() {
    return arrayTypes["long"]();
  },
  // myUint32Array: Array.isArray(object?.myUint32Array) ? object.myUint32Array.map((e: any) => Number(e)) : [],
  number: function number() {
    return t.callExpression(t.identifier('Number'), [t.identifier('e')]);
  },
  // myDoubleArray: Array.isArray(object?.myDoubleArray) ? object.myDoubleArray.map((e: any) => Number(e)) : [],
  uint32: function uint32() {
    return arrayTypes.number();
  },
  int32: function int32() {
    return arrayTypes.number();
  },
  sint32: function sint32() {
    return arrayTypes.number();
  },
  fixed32: function fixed32() {
    return arrayTypes.number();
  },
  sfixed32: function sfixed32() {
    return arrayTypes.number();
  },
  "double": function double() {
    return arrayTypes.number();
  },
  "float": function float() {
    return arrayTypes.number();
  },
  // arrayField: Array.isArray(object?.arrayField) ? object.arrayField.map((e: any) => scalarTypeFromJSON(e)) : []
  "enum": function _enum(args) {
    var fromJSONFuncName = args.context.getFromEnum(args.field);
    return t.callExpression(t.identifier(fromJSONFuncName), [t.identifier('e')]);
  },
  // tokenInMaxs: Array.isArray(object?.tokenInMaxs) ? object.tokenInMaxs.map((e: any) => Coin.fromJSON(e)) : []
  type: function type(args) {
    var name = args.context.getTypeName(args.field);
    return t.callExpression(t.memberExpression(t.identifier(name), t.identifier('fromJSON')), [t.identifier('e')]);
  }
};
exports.arrayTypes = arrayTypes;