"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPluginValue = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var dotty = _interopRequireWildcard(require("dotty"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var getAllPackageParts = function getAllPackageParts(name, list) {
  if (!list) list = [name];
  var newParts = name.split('.');
  newParts.pop();
  if (!newParts.length) return (0, _toConsumableArray2["default"])(list);
  var newName = newParts.join('.');
  return getAllPackageParts(newName, [].concat((0, _toConsumableArray2["default"])(list), [newName]));
};
var getPluginValue = function getPluginValue(optionName, currentPkg, options) {
  var pkgOpts = options.packages;
  var value;
  getAllPackageParts(currentPkg).some(function (pkg, i) {
    if (dotty.exists(pkgOpts, pkg)) {
      var obj = dotty.get(pkgOpts, pkg);
      if (dotty.exists(obj, optionName)) {
        value = dotty.get(obj, optionName);
        return true;
      }
    }
  });
  if (value === undefined) {
    var defaultValue = dotty.exists(options, optionName) ? dotty.get(options, optionName) : undefined;
    value = defaultValue;
  }
  return value;
};
exports.getPluginValue = getPluginValue;