"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schemata = exports.interfaces = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// export const mutations: Mutation[] = [
//     { methodName: 'joinPool', typeUrl: '/cosmos.pools.transfer.v1.MsgJoinPool', TypeName: 'MsgJoinPool' },
//     { methodName: 'exitPool', typeUrl: '/cosmos.pools.transfer.v1.MsgExitPool', TypeName: 'MsgExitPool' }
// ];

// export const enums: Enum[] = [
//     {
//         name: 'VoteOption',
//         node: null,
//         filename: 'myfile.ts',
//         to: {
//             convertType: 'to',
//             funcName: 'voteOptionToJSON',
//             type: 'any'
//         },
//         from: {
//             convertType: 'from',
//             funcName: 'voteOptionFromJSON',
//             type: 'string'
//         }
//     }
// ];

var interfaces = [{
  name: 'Description',
  fields: [{
    type: 'string',
    name: 'moniker',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'identity',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'website',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'securityContact',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'details',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'CommissionRate',
    name: 'superNested',
    node: t.tsTypeReference(t.identifier('CommissionRate'))
  }, {
    type: 'CommissionRate[]',
    name: 'manyComissions',
    node: t.tsArrayType(t.tsTypeReference(t.identifier('CommissionRate')))
  }]
}, {
  name: 'CommissionRate',
  fields: [{
    type: 'string',
    name: 'rate',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'maxRate',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'maxChangeRate',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'SpecialType[]',
    name: 'specialPropertyHere',
    node: t.tsArrayType(t.tsTypeReference(t.identifier('SpecialType')))
  }]
}, {
  name: 'SpecialType',
  fields: [{
    type: 'string',
    name: 'rate',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'maxRate',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'string',
    name: 'maxChangeRate',
    node: _utils.FieldTypeAsts.string()
  }]
}];
exports.interfaces = interfaces;
var schemata = [{
  typeUrl: '/cosmos.some.MsgThing',
  name: 'MstThing',
  fields: [{
    type: 'Long',
    name: 'durationCamelCase',
    node: _utils.FieldTypeAsts.Long()
  }, {
    type: 'Coin[]',
    name: 'coinsCamelCase',
    node: _utils.FieldTypeAsts.array('Coin')
  }, {
    type: 'Duration',
    name: 'someDuration',
    node: _utils.FieldTypeAsts.array('Duration')
  }, {
    type: 'Height',
    name: 'someHeight',
    node: _utils.FieldTypeAsts.array('Height')
  }, {
    type: 'Coin',
    name: 'myCoin',
    node: _utils.FieldTypeAsts.Coin()
  }, {
    type: 'string',
    name: 'camelCaseName',
    node: _utils.FieldTypeAsts.string()
  }, {
    type: 'VoteOption',
    name: 'voteValue',
    node: t.tsTypeReference(t.identifier('VoteOption'))
  }, {
    type: 'VoteOption[]',
    name: 'previousVotes',
    node: t.tsArrayType(t.tsTypeReference(t.identifier('VoteOption')))
  }, {
    type: 'Description',
    name: 'desc',
    node: t.tsTypeReference(t.identifier('Description'))
  }, {
    type: 'CommissionRate',
    name: 'commission',
    node: t.tsTypeReference(t.identifier('CommissionRate'))
  }, {
    type: 'string',
    name: 'str',
    node: _utils.FieldTypeAsts.string()
  }]
}];
exports.schemata = schemata;