"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _protoParser = require("@osmonauts/proto-parser");
var _types = require("@osmonauts/types");
var _testUtils = require("../../../test-utils");
var _encoding = require("../../encoding");
var _mobx = require("./mobx");
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
it('builds stores.', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var ref, res, service, context;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ref = store.findProto('cosmos/auth/v1beta1/query.proto');
          res = (0, _protoParser.traverse)(store, ref);
          service = (0, _protoParser.getNestedProto)(res).Query;
          context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
          (0, _testUtils.expectCode)((0, _mobx.buildRpcStores)(context, service));
        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));