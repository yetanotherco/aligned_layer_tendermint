"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _testUtils = require("../../../test-utils");
var t = _interopRequireWildcard(require("@babel/types"));
var _scopedBundle = require("./scoped-bundle");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
it('builds stores.', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var context;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          context = (0, _testUtils.getGenericParseContext)();
          (0, _testUtils.expectCode)(t.program((0, _scopedBundle.createMobxQueryFactory)(context, {
            cosmos: {
              bank: {
                v1beta1: './proto/cosmos/bank/v1beta1/a.lcd'
              },
              gov: {
                v1beta1: './proto/cosmos/bank/v1beta1/b.lcd'
              }
            },
            osmosis: {
              gamm: {
                v1beta1: './proto/cosmos/bank/v1beta1/c.lcd'
              }
            }
          })));
        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));