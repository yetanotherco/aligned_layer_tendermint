"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpcHookTmNestedImportObject = exports.rpcHookRecursiveObjectProps = exports.rpcHookNewTmRequire = exports.rpcHookFuncArguments = exports.rpcHookClassArguments = exports.createScopedRpcHookFactory = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../utils");
var _utils2 = require("@osmonauts/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var rpcHookFuncArguments = function rpcHookFuncArguments() {
  return [(0, _utils.objectPattern)([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)], t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('rpc'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Rpc'))))])))];
};
exports.rpcHookFuncArguments = rpcHookFuncArguments;
var rpcHookClassArguments = function rpcHookClassArguments() {
  return [t.objectExpression([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)])];
};

/**
 * Create an AST for a certain key and hook.
 * eg: __fixtures__/output1/hooks.ts
 * v1beta2: _AkashAuditV1beta2Queryrpc.createRpcQueryHooks(rpc)
 * @param {Object=} imports - imports array reference for generating imports.
 * @param {Object=} path - filename of a package.
 * @param {string} methodName - hook method name of packages
 * @returns {ParseResult} created AST
 */
exports.rpcHookClassArguments = rpcHookClassArguments;
var rpcHookNewTmRequire = function rpcHookNewTmRequire(imports, path, methodName) {
  imports.push({
    as: (0, _utils2.variableSlug)(path),
    path: path
  });
  return t.callExpression(t.memberExpression(t.identifier((0, _utils2.variableSlug)(path)), t.identifier(methodName)), [t.identifier('rpc')]);
};
exports.rpcHookNewTmRequire = rpcHookNewTmRequire;
var rpcHookRecursiveObjectProps = function rpcHookRecursiveObjectProps(names, leaf) {
  var _names = (0, _toArray2["default"])(names),
    name = _names[0],
    rest = _names.slice(1);
  var baseComponent;
  if (names.length === 1) {
    baseComponent = leaf ? leaf : t.identifier(name);
  } else {
    baseComponent = rpcHookRecursiveObjectProps(rest, leaf);
  }
  return t.objectExpression([t.objectProperty(t.identifier(name), baseComponent)]);
};

/**
 * Create an ASTs for hooks of packages recursively, and get imports of packages.
 * eg: __fixtures__/output1/hooks.ts
 * export const createRpcQueryHooks = ...
 * @param {Object=} imports - imports array reference for generating imports.
 * @param {Object=} obj - mapping of packages and rpc query filenames
 * @param {string} methodName - hook method name of packages
 * @returns {ParseResult} created AST
 */
exports.rpcHookRecursiveObjectProps = rpcHookRecursiveObjectProps;
var rpcHookTmNestedImportObject = function rpcHookTmNestedImportObject(imports, obj, methodName) {
  //if obj is a path, end recursion and get the mapping.
  if (typeof obj === 'string') {
    return rpcHookNewTmRequire(imports, obj, methodName);
  }
  var keys = Object.keys(obj);

  // get hooks for keys of the obj.
  return t.objectExpression(keys.map(function (name) {
    return t.objectProperty(t.identifier(name), rpcHookTmNestedImportObject(imports, obj[name], methodName));
  }));
};
exports.rpcHookTmNestedImportObject = rpcHookTmNestedImportObject;
/**
 * Create an ASTs for createRpcQueryHooks and imports of related packages.
 * eg: __fixtures__/output1/hooks.ts
 * import * as _AkashAuditV1beta2Queryrpc from ...
 * export const createRpcQueryHooks = ...
 * @param {Object=} context - context of generating the file
 * @param {Object=} obj - mapping of packages and rpc query filenames
 * @param {string} identifier - name of function creating hooks. eg: createRpcQueryHooks
 * @returns {ParseResult} created AST
 */
var createScopedRpcHookFactory = function createScopedRpcHookFactory(context, obj, identifier) {
  return (0, _utils.buildExportCreators)(context, obj, identifier, ['ProtobufRpcClient']);
};
exports.createScopedRpcHookFactory = createScopedRpcHookFactory;