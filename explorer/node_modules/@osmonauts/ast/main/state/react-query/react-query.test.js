"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _protoParser = require("@osmonauts/proto-parser");
var _types = require("@osmonauts/types");
var _testUtils = require("../../../test-utils");
var _encoding = require("../../encoding");
var _reactQuery = require("./react-query");
var t = _interopRequireWildcard(require("@babel/types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
it('createRpcQueryHooks', function () {
  var ref = store.findProto('cosmos/auth/v1beta1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  (0, _testUtils.expectCode)((0, _reactQuery.createRpcQueryHooks)(context, service));
});
it('createRpcQueryHookInterfaces', function () {
  var ref = store.findProto('cosmos/auth/v1beta1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  (0, _testUtils.expectCode)(t.program((0, _toConsumableArray2["default"])((0, _reactQuery.createRpcQueryHookInterfaces)(context, service))));
});