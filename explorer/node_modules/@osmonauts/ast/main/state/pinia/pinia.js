"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPiniaStore = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("@osmonauts/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var firstLower = function firstLower(s) {
  return s = s.charAt(0).toLowerCase() + s.slice(1);
};
var firstUpper = function firstUpper(s) {
  return s = s.charAt(0).toUpperCase() + s.slice(1);
};
function buildState(methods) {
  var fields = methods.map(function (x) {
    return t.objectProperty(t.identifier(x.name), t.tsAsExpression(t.identifier("{}"), t.tsUnionType([t.tsTypeReference(t.identifier("".concat(x.method.responseType, "SDKType")))])));
  });
  return t.arrowFunctionExpression([], t.blockStatement([t.returnStatement(t.objectExpression(fields))]));
}
function buildAction(methods) {
  var fields = methods.map(function (x) {
    return t.objectMethod('method', t.identifier("fetch".concat(firstUpper(x.name))), [t.identifier("param : ".concat(x.method.requestType, "SDKType"))], t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.thisExpression(), t.identifier(x.name)), t.awaitExpression(t.callExpression(t.memberExpression(t.memberExpression(t.thisExpression(), t.identifier('lcdClient')), t.identifier(x.name)), [t.identifier('param')])))), t.returnStatement(t.memberExpression(t.thisExpression(), t.identifier(x.name)))]), false, false, true);
  });
  return t.objectExpression(fields);
}
function buildGetter(method) {
  return t.objectExpression([t.objectMethod('method', t.identifier('lcdClient'), [], t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('requestClient'), t.memberExpression(t.callExpression(t.identifier('useEndpoint'), []), t.identifier('restClient')))]), t.returnStatement(t.newExpression(t.identifier('LCDQueryClient'), [t.identifier('{ requestClient }')]))]))]);
}
function getStoreName(key) {
  var names = key.split('/');
  return "use".concat(firstUpper(names[0])).concat(firstUpper(names[1]));
}
var createPiniaStore = function createPiniaStore(context, service) {
  var _service$methods;
  context.addUtil('LCDClient');
  context.addUtil('useEndpoint');
  var key = context.ref.filename;
  var storeName = 'usePiniaStore';
  // const storeName = getStoreName(key)

  var methods = Object.keys((_service$methods = service.methods) !== null && _service$methods !== void 0 ? _service$methods : {}).map(function (key) {
    var method = service.methods[key];
    // console.log('method:', method)
    var name = (0, _utils.camel)(key);
    return {
      name: name,
      method: method
    };
  });
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(storeName), t.callExpression(t.identifier('defineStore'), [t.identifier("'".concat(key, "'")), t.objectExpression([t.objectProperty(t.identifier('state'), buildState(methods)), t.objectProperty(t.identifier('getters'), buildGetter(methods)), t.objectProperty(t.identifier('actions'), buildAction(methods))])]))]));
};
exports.createPiniaStore = createPiniaStore;