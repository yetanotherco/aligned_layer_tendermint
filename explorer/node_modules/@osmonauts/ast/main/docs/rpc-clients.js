"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.documentRpcClientsReadme = exports.documentRpcClients = exports.documentRpcClient = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _utils = require("../utils");
var _generator = _interopRequireDefault(require("@babel/generator"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils2 = require("@osmonauts/utils");
var _protoParser = require("@osmonauts/proto-parser");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var documentRpcClient = function documentRpcClient(context, service) {
  var methods = Object.entries(service.svc.methods).reduce(function (m, _ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      key = _ref2[0],
      method = _ref2[1];
    var variable = t.variableDeclaration('const', [t.variableDeclarator((0, _utils.identifier)('request', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(method.requestType)))))]);
    if (method.comment) {
      variable.leadingComments = [(0, _utils.makeCommentBlock)(method.comment)];
    } else {
      variable.leadingComments = [(0, _utils.makeCommentBlock)(method.name)];
    }
    var methodName = context.pluginValue('rpcClients.camelCase') ? (0, _utils2.camel)(method.name) : method.name;
    return [].concat((0, _toConsumableArray2["default"])(m), [{
      service: service,
      method: method,
      methodName: methodName,
      asts: [variable,
      //
      t.variableDeclaration('const', [t.variableDeclarator(t.identifier('result'), t.awaitExpression(t.callExpression((0, _utils.memberExpressionOrIdentifier)([methodName].concat((0, _toConsumableArray2["default"])(service.ref.proto["package"].split('.').reverse()))), [t.identifier('request')])))])]
    }]);
  }, []);
  return methods;
};
exports.documentRpcClient = documentRpcClient;
var documentRpcClients = function documentRpcClients(context, myBase, store) {
  var svcs = store.getServices(myBase);
  var services = Object.entries(svcs).reduce(function (m, _ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
      pkg = _ref4[0],
      refs = _ref4[1];
    var res = refs.reduce(function (m2, ref) {
      var proto = (0, _protoParser.getNestedProto)(ref.proto);
      // TODO generic service types...
      if (proto.Query) {
        return [].concat((0, _toConsumableArray2["default"])(m2), [{
          svc: proto.Query,
          ref: ref
        }]);
      }
      if (proto.Service) {
        return [].concat((0, _toConsumableArray2["default"])(m2), [{
          svc: proto.Service,
          ref: ref
        }]);
      }
      return m2;
    }, []);
    return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(res));
  }, []);

  //////
  return services.reduce(function (m, svc) {
    return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(documentRpcClient(context, svc)));
  }, []);
};
exports.documentRpcClients = documentRpcClients;
var replaceChars = function replaceChars(str) {
  return str.split(' ').map(function (s) {
    return s.replace(/\W/g, '');
  }).join('-').toLowerCase();
};
var documentRpcClientsReadme = function documentRpcClientsReadme(context, myBase, store) {
  var results = documentRpcClients(context, myBase, store);
  var toc = results.map(function (res) {
    var pkg = res.service.ref.proto["package"];
    var slug = replaceChars("".concat(pkg, ".").concat(res.methodName, " RPC"));
    return "[`".concat(pkg, ".").concat(res.methodName, "()` RPC](#").concat(slug, ")");
  });
  var lines = results.map(function (res) {
    var pkg = res.service.ref.proto["package"];
    var ast = t.program(res.asts);
    var code = (0, _generator["default"])(ast).code;
    return "##### `".concat(pkg, ".").concat(res.methodName, "()` RPC\n        \n").concat(res.method.name, "\n\n```js\n").concat(code, "\n```\n");
  });
  var pkg = results[0].service.ref.proto["package"];
  return "\n## Table of Contents\n\n".concat(toc.join('\n'), "\n\n### `").concat(pkg, "` RPC\n\n").concat(lines.join('\n'), "\n");
};
exports.documentRpcClientsReadme = documentRpcClientsReadme;