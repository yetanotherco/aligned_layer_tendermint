"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readme = void 0;
var replaceChars = function replaceChars(str) {
  return str.split(' ').map(function (s) {
    return s.replace(/\W/g, '');
  }).join('-').toLowerCase();
};
var readme = function readme(_ref) {
  var imgSrc = _ref.imgSrc,
    description = _ref.description,
    libName = _ref.libName,
    libPrettyName = _ref.libPrettyName,
    baseModule = _ref.baseModule,
    exampleAddr = _ref.exampleAddr,
    signingBaseClient = _ref.signingBaseClient,
    chainName = _ref.chainName,
    denom = _ref.denom;
  return "\n# ".concat(libPrettyName, "\n\n<p align=\"center\">\n    <img src=\"").concat(imgSrc, "\" width=\"80\"><br />\n    ").concat(description, "\n</p>\n\n\n## install\n\n```sh\nnpm install ").concat(libName, "\n```\n## Table of contents\n\n- [").concat(libPrettyName, "](#").concat(replaceChars(libName), ")\n    - [Install](#install)\n    - [Table of contents](#table-of-contents)\n- [Usage](#usage)\n    - [RPC Clients](#rpc-clients)\n    - [Composing Messages](#composing-messages)\n        - ").concat(baseModule, "\n        - Cosmos, CosmWasm, and IBC\n            - [CosmWasm](#cosmwasm-messages)\n            - [IBC](#ibc-messages)\n            - [Cosmos](#cosmos-messages)\n- [Wallets and Signers](#connecting-with-wallets-and-signing-messages)\n    - [Stargate Client](#initializing-the-stargate-client)\n    - [Creating Signers](#creating-signers)\n    - [Broadcasting Messages](#broadcasting-messages)\n- [Advanced Usage](#advanced-usage)\n- [Developing](#developing)\n- [Credits](#credits)\n\n## Usage\n\n### RPC Clients\n\n```js\nimport { ").concat(baseModule, " } from '").concat(libName, "';\n\nconst { createRPCQueryClient } = ").concat(baseModule, ".ClientFactory; \nconst client = await createRPCQueryClient({ rpcEndpoint: RPC_ENDPOINT });\n\n// now you can query the cosmos modules\nconst balance = await client.cosmos.bank.v1beta1\n    .allBalances({ address: '").concat(exampleAddr, "' });\n\n// you can also query the ").concat(baseModule, " modules\nconst balances = await client.").concat(baseModule, ".exchange.v1beta1\n    .exchangeBalances()\n```\n\n### Composing Messages\n\nImport the `").concat(baseModule, "` object from `").concat(libName, "`. \n\n```js\nimport { ").concat(baseModule, " } from '").concat(libName, "';\n\nconst {\n    createSpotLimitOrder,\n    createSpotMarketOrder,\n    deposit\n} = ").concat(baseModule, ".exchange.v1beta1.MessageComposer.withTypeUrl;\n```\n\n#### Auction Messages\n\n```js\nconst {\n    bid\n} = ").concat(baseModule, ".auction.v1beta1.MessageComposer.withTypeUrl;\n```\n\n#### CosmWasm Messages\n\n```js\nimport { cosmwasm } from \"").concat(libName, "\";\n\nconst {\n    clearAdmin,\n    executeContract,\n    instantiateContract,\n    migrateContract,\n    storeCode,\n    updateAdmin\n} = cosmwasm.wasm.v1.MessageComposer.withTypeUrl;\n```\n\n#### IBC Messages\n\n```js\nimport { ibc } from '").concat(libName, "';\n\nconst {\n    transfer\n} = ibc.applications.transfer.v1.MessageComposer.withTypeUrl\n```\n\n#### Cosmos Messages\n\n```js\nimport { cosmos } from '").concat(libName, "';\n\nconst {\n    fundCommunityPool,\n    setWithdrawAddress,\n    withdrawDelegatorReward,\n    withdrawValidatorCommission\n} = cosmos.distribution.v1beta1.MessageComposer.fromPartial;\n\nconst {\n    multiSend,\n    send\n} = cosmos.bank.v1beta1.MessageComposer.fromPartial;\n\nconst {\n    beginRedelegate,\n    createValidator,\n    delegate,\n    editValidator,\n    undelegate\n} = cosmos.staking.v1beta1.MessageComposer.fromPartial;\n\nconst {\n    deposit,\n    submitProposal,\n    vote,\n    voteWeighted\n} = cosmos.gov.v1beta1.MessageComposer.fromPartial;\n```\n\n## Connecting with Wallets and Signing Messages\n\n\u26A1\uFE0F For web interfaces, we recommend using [cosmos-kit](https://github.com/cosmology-tech/cosmos-kit). Continue below to see how to manually construct signers and clients.\n\nHere are the docs on [creating signers](https://github.com/cosmology-tech/cosmos-kit/tree/main/packages/react#signing-clients) in cosmos-kit that can be used with Keplr and other wallets.\n\n### Initializing the Stargate Client\n\nUse `").concat(signingBaseClient, "` to get your `SigningStargateClient`, with the proto/amino messages full-loaded. No need to manually add amino types, just require and initialize the client:\n\n```js\nimport { ").concat(signingBaseClient, " } from '").concat(libName, "';\n\nconst stargateClient = await ").concat(signingBaseClient, "({\n    rpcEndpoint,\n    signer // OfflineSigner\n});\n```\n### Creating Signers\n\nTo broadcast messages, you can create signers with a variety of options:\n\n* [cosmos-kit](https://github.com/cosmology-tech/cosmos-kit/tree/main/packages/react#signing-clients) (recommended)\n* [keplr](https://docs.keplr.app/api/cosmjs.html)\n* [cosmjs](https://gist.github.com/webmaster128/8444d42a7eceeda2544c8a59fbd7e1d9)\n### Amino Signer\n\nLikely you'll want to use the Amino, so unless you need proto, you should use this one:\n\n```js\nimport { getOfflineSignerAmino as getOfflineSigner } from 'cosmjs-utils';\n```\n### Proto Signer\n\n```js\nimport { getOfflineSignerProto as getOfflineSigner } from 'cosmjs-utils';\n```\n\nWARNING: NOT RECOMMENDED TO USE PLAIN-TEXT MNEMONICS. Please take care of your security and use best practices such as AES encryption and/or methods from 12factor applications.\n\n```js\nimport { chains } from 'chain-registry';\n\nconst mnemonic =\n    'unfold client turtle either pilot stock floor glow toward bullet car science';\n    const chain = chains.find(({ chain_name }) => chain_name === '").concat(chainName, "');\n    const signer = await getOfflineSigner({\n    mnemonic,\n    chain\n    });\n```\n### Broadcasting Messages\n\nNow that you have your `stargateClient`, you can broadcast messages:\n\n```js\nconst { send } = cosmos.bank.v1beta1.MessageComposer.withTypeUrl;\n\nconst msg = send({\n    amount: [\n    {\n        denom: '").concat(denom, "',\n        amount: '1000'\n    }\n    ],\n    toAddress: address,\n    fromAddress: address\n});\n\nconst fee: StdFee = {\n    amount: [\n    {\n        denom: '").concat(denom, "',\n        amount: '864'\n    }\n    ],\n    gas: '86364' // this may need to be adjusted\n};\nconst response = await stargateClient.signAndBroadcast(address, [msg], fee);\n```\n\n## Advanced Usage\n\n\nIf you want to manually construct a stargate client\n\n```js\nimport { OfflineSigner, GeneratedType, Registry } from \"@cosmjs/proto-signing\";\nimport { AminoTypes, SigningStargateClient } from \"@cosmjs/stargate\";\n\nimport { \n    cosmosAminoConverters,\n    cosmosProtoRegistry,\n    cosmwasmAminoConverters,\n    cosmwasmProtoRegistry,\n    ibcProtoRegistry,\n    ibcAminoConverters,\n    ").concat(baseModule, "AminoConverters,\n    ").concat(baseModule, "ProtoRegistry\n} from '").concat(libName, "';\n\nconst signer: OfflineSigner = /* create your signer (see above)  */\nconst rpcEndpoint = 'https://rpc.cosmos.directory/").concat(baseModule, "'; // or another URL\n\nconst protoRegistry: ReadonlyArray<[string, GeneratedType]> = [\n    ...cosmosProtoRegistry,\n    ...cosmwasmProtoRegistry,\n    ...ibcProtoRegistry,\n    ...").concat(baseModule, "ProtoRegistry\n];\n\nconst aminoConverters = {\n    ...cosmosAminoConverters,\n    ...cosmwasmAminoConverters,\n    ...ibcAminoConverters,\n    ...").concat(baseModule, "AminoConverters\n};\n\nconst registry = new Registry(protoRegistry);\nconst aminoTypes = new AminoTypes(aminoConverters);\n\nconst stargateClient = await SigningStargateClient.connectWithSigner(rpcEndpoint, signer, {\n    registry,\n    aminoTypes\n});\n```\n\n## Developing\n\nWhen first cloning the repo:\n\n```\nyarn\nyarn build\n```\n\n### Codegen\n\nContract schemas live in `./contracts`, and protos in `./proto`. Look inside of `scripts/codegen.js` and configure the settings for bundling your SDK and contracts into `").concat(libName, "`:\n\n```\nyarn codegen\n```\n\n### Publishing\n\nBuild the types and then publish:\n\n```\nyarn build:ts\nyarn publish\n```\n\n## Credits\n\n\uD83D\uDEE0 Built by Cosmology \u2014\xA0if you like our tools, please consider delegating to [our validator \u269B\uFE0F](https://cosmology.tech/validator)\n\nCode built with the help of these related projects:\n\n* [@cosmwasm/ts-codegen](https://github.com/CosmWasm/ts-codegen) for generated CosmWasm contract Typescript classes\n* [@osmonauts/telescope](https://github.com/osmosis-labs/telescope) a \"babel for the Cosmos\", Telescope is a TypeScript Transpiler for Cosmos Protobufs.\n* [cosmos-kit](https://github.com/cosmology-tech/cosmos-kit) A wallet connector for the Cosmos \u269B\uFE0F\n\n    ");
};
exports.readme = readme;