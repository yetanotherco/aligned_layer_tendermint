"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recursiveModuleBundle = exports.importNamespace = void 0;
var _path = require("path");
var t = _interopRequireWildcard(require("@babel/types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var recursiveModuleBundle = function recursiveModuleBundle(options, obj) {
  return Object.keys(obj).map(function (key) {
    var _obj$key;
    if ((_obj$key = obj[key]) !== null && _obj$key !== void 0 && _obj$key.__export) {
      // e.g. abci
      // 1. create variable for abci
      // 2. splat ALL _0, parms into abci
      // 3. export that variable

      var nmspc = t.variableDeclaration('const', [t.variableDeclarator(t.identifier(key), t.objectExpression(Object.keys(obj[key]).filter(function (a) {
        return a !== '__export';
      }).filter(function (a) {
        return a.startsWith('_');
      }).map(function (a) {
        return t.spreadElement(t.identifier(a));
      })))]);
      var others = Object.keys(obj[key]).filter(function (a) {
        return a !== '__export';
      }).filter(function (a) {
        return !a.startsWith('_');
      });
      if (others.length) {
        if (!options.experimentalGlobalProtoNamespace) {
          throw new Error('namespace and package not supported, yet.');
        }
      }

      // return nmspc;
      return t.exportNamedDeclaration(nmspc, []);
    } else {
      // you can make a namespace for obj[key]
      // e.g. libs
      return t.exportNamedDeclaration(t.tsModuleDeclaration(t.identifier(key), t.tsModuleBlock(recursiveModuleBundle(options, obj[key]))));
    }
  });
};
exports.recursiveModuleBundle = recursiveModuleBundle;
var importNamespace = function importNamespace(ident, path) {
  return t.importDeclaration([t.importNamespaceSpecifier(t.identifier(ident))], t.stringLiteral(path.replace((0, _path.extname)(path), '')));
};
exports.importNamespace = importNamespace;