"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _generator = _interopRequireDefault(require("@babel/generator"));
var _jestInCase = _interopRequireDefault(require("jest-in-case"));
var t = _interopRequireWildcard(require("@babel/types"));
var _bundle = require("./bundle");
var _testUtils = require("../../test-utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var preview = function preview(ast) {
  return (0, _generator["default"])(t.program(ast)).code;
};
var context = (0, _testUtils.getGenericParseContext)();
(0, _jestInCase["default"])("recursiveModuleBundle", function (opts) {
  expect(preview((0, _bundle.recursiveModuleBundle)(context.options, opts.data))).toMatchSnapshot();
}, [{
  name: 'root',
  data: {
    osmosis: {
      __export: true,
      _0: true
    },
    tendermint: {
      __export: true,
      _0: true
    }
  }
}, {
  name: 'single',
  data: {
    ics23: {
      __export: true,
      _0: true
    }
  }
}, {
  name: 'tendermint',
  data: {
    tendermint: {
      abci: {
        __export: true,
        _223: true
      },
      crypto: {
        __export: true,
        _224: true,
        _225: true
      },
      libs: {
        bits: {
          __export: true,
          _226: true
        }
      },
      p2p: {
        __export: true,
        _227: true
      },
      types: {
        __export: true,
        _228: true,
        _229: true,
        _230: true,
        _231: true,
        _232: true
      },
      version: {
        __export: true,
        _233: true
      }
    }
  }
}, {
  name: 'osmo',
  data: {
    osmosis: {
      claim: {
        v1beta1: {
          __export: true,
          _177: true,
          _178: true,
          _179: true,
          _180: true
        }
      },
      epochs: {
        v1beta1: {
          __export: true,
          _181: true,
          _182: true
        }
      },
      gamm: {
        v1beta1: {
          __export: true,
          _183: true,
          _184: true,
          _185: true,
          _186: true,
          _187: true
        }
      },
      incentives: {
        __export: true,
        _188: true,
        _189: true,
        _190: true,
        _191: true,
        _192: true
      },
      lockup: {
        __export: true,
        _193: true,
        _194: true,
        _195: true,
        _196: true
      },
      mint: {
        v1beta1: {
          __export: true,
          _197: true,
          _198: true,
          _199: true
        }
      },
      poolincentives: {
        v1beta1: {
          __export: true,
          _200: true,
          _201: true,
          _202: true,
          _203: true
        }
      },
      store: {
        v1beta1: {
          __export: true,
          _204: true
        }
      },
      superfluid: {
        __export: true,
        _205: true,
        _206: true,
        _207: true,
        _208: true,
        _209: true
      },
      txfees: {
        v1beta1: {
          __export: true,
          _210: true,
          _211: true,
          _212: true,
          _213: true
        }
      }
    }
  }
}]);