"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHelperObject = exports.addToJSONMethod = exports.addMsgMethod = exports.addJsonMethod = exports.addFromPartialMethod = exports.addFromJSONMethod = exports.addEncodedMethod = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../utils");
var _utils2 = require("@osmonauts/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var addMsgMethod = function addMsgMethod(_ref) {
  var methodName = _ref.methodName,
    typeUrl = _ref.typeUrl,
    TypeName = _ref.TypeName,
    methodToCall = _ref.methodToCall;
  return t.objectMethod('method', t.identifier(methodName), [(0, _utils.identifier)('value', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(TypeName))))], t.blockStatement([t.returnStatement(t.objectExpression([t.objectProperty(t.identifier('typeUrl'), t.stringLiteral(typeUrl)), t.objectProperty(t.identifier('value'), t.callExpression(t.memberExpression(t.identifier(TypeName), t.identifier(methodToCall)), [t.identifier('value')]))]))]));
};
exports.addMsgMethod = addMsgMethod;
var addFromJSONMethod = function addFromJSONMethod(_ref2) {
  var methodName = _ref2.methodName,
    typeUrl = _ref2.typeUrl,
    TypeName = _ref2.TypeName;
  return t.objectMethod('method', t.identifier(methodName), [(0, _utils.identifier)('value', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('any'))))], t.blockStatement([t.returnStatement(t.objectExpression([t.objectProperty(t.identifier('typeUrl'), t.stringLiteral(typeUrl)), t.objectProperty(t.identifier('value'), t.callExpression(t.memberExpression(t.identifier(TypeName), t.identifier('fromJSON')), [t.identifier('value')]))]))]));
};
exports.addFromJSONMethod = addFromJSONMethod;
var addFromPartialMethod = function addFromPartialMethod(_ref3) {
  var methodName = _ref3.methodName,
    typeUrl = _ref3.typeUrl,
    TypeName = _ref3.TypeName;
  return addMsgMethod({
    methodName: methodName,
    typeUrl: typeUrl,
    TypeName: TypeName,
    methodToCall: 'fromPartial'
  });
};
exports.addFromPartialMethod = addFromPartialMethod;
var addToJSONMethod = function addToJSONMethod(_ref4) {
  var methodName = _ref4.methodName,
    typeUrl = _ref4.typeUrl,
    TypeName = _ref4.TypeName;
  return addMsgMethod({
    methodName: methodName,
    typeUrl: typeUrl,
    TypeName: TypeName,
    methodToCall: 'toJSON'
  });
};
exports.addToJSONMethod = addToJSONMethod;
var addJsonMethod = function addJsonMethod(_ref5) {
  var methodName = _ref5.methodName,
    typeUrl = _ref5.typeUrl,
    TypeName = _ref5.TypeName;
  return t.objectMethod('method', t.identifier(methodName), [(0, _utils.identifier)('value', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(TypeName))))], t.blockStatement([t.returnStatement(t.objectExpression([t.objectProperty(t.identifier('typeUrl'), t.stringLiteral(typeUrl)), t.objectProperty(t.identifier('value'), t.identifier('value'), false, true)]))]));
};
exports.addJsonMethod = addJsonMethod;
var addEncodedMethod = function addEncodedMethod(_ref6) {
  var methodName = _ref6.methodName,
    typeUrl = _ref6.typeUrl,
    TypeName = _ref6.TypeName;
  return t.objectMethod('method', t.identifier(methodName), [(0, _utils.identifier)('value', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(TypeName))))], t.blockStatement([t.returnStatement(t.objectExpression([t.objectProperty(t.identifier('typeUrl'), t.stringLiteral(typeUrl)), t.objectProperty(t.identifier('value'), t.callExpression(t.memberExpression(t.callExpression(t.memberExpression(t.identifier(TypeName), t.identifier('encode')), [t.identifier('value')]), t.identifier('finish')), []))]))]));
};
exports.addEncodedMethod = addEncodedMethod;
var createHelperObject = function createHelperObject(_ref7) {
  var context = _ref7.context,
    name = _ref7.name,
    mutations = _ref7.mutations;
  mutations = mutations.map(function (mutation) {
    return _objectSpread(_objectSpread({}, mutation), {}, {
      methodName: (0, _utils2.camel)(mutation.methodName)
    });
  });
  var methods = [context.pluginValue('prototypes.methods.encode') && t.objectProperty(t.identifier('encoded'), t.objectExpression(mutations.map(function (mutation) {
    return addEncodedMethod(mutation);
  }))), t.objectProperty(t.identifier('withTypeUrl'), t.objectExpression(mutations.map(function (mutation) {
    return addJsonMethod(mutation);
  }))), context.pluginValue('prototypes.methods.toJSON') && t.objectProperty(t.identifier('toJSON'), t.objectExpression(mutations.map(function (mutation) {
    return addToJSONMethod(mutation);
  }))), context.pluginValue('prototypes.methods.fromJSON') && t.objectProperty(t.identifier('fromJSON'), t.objectExpression(mutations.map(function (mutation) {
    return addFromJSONMethod(mutation);
  }))), context.pluginValue('prototypes.methods.fromPartial') && t.objectProperty(t.identifier('fromPartial'), t.objectExpression(mutations.map(function (mutation) {
    return addFromPartialMethod(mutation);
  })))].filter(Boolean);
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(name), t.objectExpression(methods))]));
};
exports.createHelperObject = createHelperObject;