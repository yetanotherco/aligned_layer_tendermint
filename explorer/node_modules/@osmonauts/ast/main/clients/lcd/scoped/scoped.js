"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lcdRecursiveObjectProps = exports.lcdNewAwaitImport = exports.lcdNestedImportObject = exports.lcdFuncArguments = exports.lcdClassArguments = exports.lcdArguments = exports.createScopedLCDFactory = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../../utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var lcdArguments = function lcdArguments() {
  return [t.objectProperty(t.identifier('requestClient'), t.identifier('requestClient'), false, true)];
};
exports.lcdArguments = lcdArguments;
var lcdFuncArguments = function lcdFuncArguments() {
  return [(0, _utils.objectPattern)([t.objectProperty(t.identifier('restEndpoint'), t.identifier('restEndpoint'), false, true)], t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('restEndpoint'), t.tsTypeAnnotation(t.tsStringKeyword()))])))];
};
exports.lcdFuncArguments = lcdFuncArguments;
var lcdClassArguments = function lcdClassArguments() {
  return [t.objectExpression(lcdArguments())];
};
exports.lcdClassArguments = lcdClassArguments;
var lcdNewAwaitImport = function lcdNewAwaitImport(path, className, _arguments) {
  return t.newExpression(t.memberExpression(t.awaitExpression(t.callExpression(t["import"](), [t.stringLiteral(path)])), t.identifier(className), false), _arguments);
};
exports.lcdNewAwaitImport = lcdNewAwaitImport;
var lcdRecursiveObjectProps = function lcdRecursiveObjectProps(names, leaf) {
  var _names = (0, _toArray2["default"])(names),
    name = _names[0],
    rest = _names.slice(1);
  var baseComponent;
  if (names.length === 1) {
    baseComponent = leaf ? leaf : t.identifier(name);
  } else {
    baseComponent = lcdRecursiveObjectProps(rest, leaf);
  }
  return t.objectExpression([t.objectProperty(t.identifier(name), baseComponent)]);
};
exports.lcdRecursiveObjectProps = lcdRecursiveObjectProps;
var lcdNestedImportObject = function lcdNestedImportObject(obj, className, _arguments) {
  if (typeof obj === 'string') {
    return lcdNewAwaitImport(obj, className, _arguments);
  }
  var keys = Object.keys(obj);
  return t.objectExpression(keys.map(function (name) {
    return t.objectProperty(t.identifier(name), lcdNestedImportObject(obj[name], className, _arguments));
  }));
};
exports.lcdNestedImportObject = lcdNestedImportObject;
var createScopedLCDFactory = function createScopedLCDFactory(context, obj, identifier, className) {
  context.addUtil('LCDClient');
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(identifier), t.arrowFunctionExpression(lcdFuncArguments(),
  //

  t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('requestClient'), t.newExpression(t.identifier('LCDClient'), [t.objectExpression([t.objectProperty(t.identifier('restEndpoint'), t.identifier('restEndpoint'), false, true)])]))]),
  ////
  t.returnStatement(lcdNestedImportObject(obj, className, lcdClassArguments()))]),
  // lcdNestedImportObject(
  //     obj,
  //     className,
  //     lcdClassArguments()
  // ),
  true))]));
};
exports.createScopedLCDFactory = createScopedLCDFactory;