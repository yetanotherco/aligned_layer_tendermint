"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderTemplateTag = void 0;
var _lcd = require("./lcd");
var _generator = _interopRequireDefault(require("@babel/generator"));
var _testUtils = require("../../../../test-utils");
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
var renderTemplateTag = function renderTemplateTag(info) {
  return (0, _generator["default"])((0, _lcd.makeTemplateTag)(info)).code;
};
exports.renderTemplateTag = renderTemplateTag;
it('/osmosis/{gamm}/v1beta1/estimate/swap_exact_amount_in', function () {
  expect((0, _lcd.getUrlTemplateString)('/osmosis/{gamm}/v1beta1/estimate/swap_exact_amount_in')).toMatchSnapshot();
});
it('/osmosis/{gamm}/v1beta1/{estimate}/swap_exact_amount_in', function () {
  expect((0, _lcd.getUrlTemplateString)('/osmosis/{gamm}/v1beta1/{estimate}/swap_exact_amount_in')).toMatchSnapshot();
});
it('/osmosis/{gamm}/{v1beta1}/{estimate}/{swap_exact_amount_in}', function () {
  expect((0, _lcd.getUrlTemplateString)('/osmosis/{gamm}/{v1beta1}/{estimate}/{swap_exact_amount_in}')).toMatchSnapshot();
});
it('/osmosis/gamm/v1beta1/estimate/{swap_exact_amount_in}', function () {
  expect((0, _lcd.getUrlTemplateString)('/osmosis/gamm/v1beta1/estimate/{swap_exact_amount_in}')).toMatchSnapshot();
});
it('/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}', function () {
  expect((0, _lcd.getUrlTemplateString)('/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}')).toMatchSnapshot();
});
it('/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}', function () {
  expect((0, _lcd.getUrlTemplateString)('/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}')).toMatchSnapshot();
});
it('/cosmos/gov/v1beta1/proposals/{proposal_id}/tally', function () {
  expect((0, _lcd.getUrlTemplateString)('/cosmos/gov/v1beta1/proposals/{proposal_id}/tally')).toMatchSnapshot();
});
it('/cosmos/staking/v1beta1/validators/{validator_addr}/delegations', function () {
  expect((0, _lcd.getUrlTemplateString)('/cosmos/staking/v1beta1/validators/{validator_addr}/delegations')).toMatchSnapshot();
});
it('/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}', function () {
  expect((0, _lcd.getUrlTemplateString)('/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}')).toMatchSnapshot();
});
it('/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}', function () {
  expect((0, _lcd.getUrlTemplateString)('/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}')).toMatchSnapshot();
});
it('1', function () {
  expect(renderTemplateTag({
    method: 'get',
    url: '/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}',
    pathParams: ['proposal_id', 'voter'],
    queryParams: [],
    paramMap: {
      proposal_id: 'proposalId',
      voter: 'voter'
    },
    casing: {
      proposal_id: 'proposal_id',
      voter: 'voter'
    }
  })).toEqual("`cosmos/group/v1/vote_by_proposal_voter/${params.proposal_id}/${params.voter}`");
});
it('2', function () {
  expect(renderTemplateTag({
    method: 'get',
    url: '/cosmos/gov/v1beta1/proposals/{proposal_id}/tally',
    pathParams: ['proposal_id'],
    queryParams: [],
    paramMap: {
      proposal_id: 'proposalId'
    },
    casing: {
      proposal_id: 'proposal_id'
    }
  })).toEqual("`cosmos/gov/v1beta1/proposals/${params.proposal_id}/tally`");
});
it('3', function () {
  expect(renderTemplateTag({
    method: 'get',
    url: '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations',
    pathParams: ['validator_addr'],
    queryParams: ['pagination'],
    paramMap: {
      validator_addr: 'validatorAddr',
      pagination: 'pagination'
    },
    casing: {
      validator_addr: 'validatorAddr',
      pagination: 'pagination'
    }
  })).toEqual("`cosmos/staking/v1beta1/validators/${params.validatorAddr}/delegations`");
});
it('4', function () {
  expect(renderTemplateTag({
    method: 'get',
    url: '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}',
    pathParams: ['validator_addr', 'delegator_addr'],
    queryParams: [],
    paramMap: {
      delegator_addr: 'delegatorAddr',
      validator_addr: 'validatorAddr'
    },
    casing: {
      delegator_addr: 'delegatorAddr',
      validator_addr: 'validatorAddr'
    }
  })).toEqual("`cosmos/staking/v1beta1/validators/${params.validatorAddr}/delegations/${params.delegatorAddr}`");
});
it('5', function () {
  expect(renderTemplateTag({
    method: 'get',
    url: '/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}',
    pathParams: ['proposal_id', 'voter'],
    queryParams: [],
    paramMap: {
      proposal_id: 'proposalId',
      voter: 'voter'
    },
    casing: {
      proposal_id: 'proposal_id',
      voter: 'voter'
    }
  })).toEqual("`cosmos/gov/v1beta1/proposals/${params.proposal_id}/votes/${params.voter}`");
});