"use strict";

var _lcd = require("./lcd");
var _protoParser = require("@osmonauts/proto-parser");
var _types = require("@osmonauts/types");
var _encoding = require("../../../encoding");
var _testUtils = require("../../../../test-utils");
var store = (0, _testUtils.getTestProtoStore)();
store.traverseAll();
it('service info template', function () {
  expect((0, _lcd.getUrlTemplateString)('/osmosis/{gamm}/v1beta1/estimate/swap_exact_amount_in')).toMatchSnapshot();
  expect((0, _lcd.getUrlTemplateString)('/osmosis/{gamm}/v1beta1/{estimate}/swap_exact_amount_in')).toMatchSnapshot();
  expect((0, _lcd.getUrlTemplateString)('/osmosis/{gamm}/{v1beta1}/{estimate}/{swap_exact_amount_in}')).toMatchSnapshot();
  expect((0, _lcd.getUrlTemplateString)('/osmosis/gamm/v1beta1/estimate/{swap_exact_amount_in}')).toMatchSnapshot();
  expect((0, _lcd.getUrlTemplateString)('/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}')).toMatchSnapshot();
});
it('template tags', function () {
  var info = {
    url: '/{cosmos}/feegrant/v1beta1/{allowance}/{granter}/{grantee}',
    pathParams: ['cosmos', 'allowance', 'granter', 'grantee']
  };
  // @ts-ignore
  (0, _testUtils.expectCode)((0, _lcd.makeTemplateTagLegacy)(info));
});
it('osmosis LCDClient', function () {
  var ref = store.findProto('osmosis/gamm/v1beta1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});
it('cosmos LCDClient', function () {
  var ref = store.findProto('cosmos/bank/v1beta1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});
it('cosmos fee LCDClient', function () {
  var ref = store.findProto('cosmos/feegrant/v1beta1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});
it('cosmos/staking/v1beta1/query.proto', function () {
  var ref = store.findProto('cosmos/staking/v1beta1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});
it('cosmos/app/v1alpha1/query.proto', function () {
  var ref = store.findProto('cosmos/app/v1alpha1/query.proto');
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});
it('cosmos/group/v1/query.proto', function () {
  var ref = store.findProto('cosmos/group/v1/query.proto');
  store.options.prototypes.parser.keepCase = true;
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});
it('cosmos/gov/v1beta1/query.proto', function () {
  var ref = store.findProto('cosmos/gov/v1beta1/query.proto');
  store.options.prototypes.parser.keepCase = true;
  var res = (0, _protoParser.traverse)(store, ref);
  var service = (0, _protoParser.getNestedProto)(res).Query;
  var context = new _encoding.GenericParseContext(ref, store, _types.defaultTelescopeOptions);
  var ast = (0, _lcd.createLCDClient)(context, service);
  (0, _testUtils.expectCode)(ast);
});