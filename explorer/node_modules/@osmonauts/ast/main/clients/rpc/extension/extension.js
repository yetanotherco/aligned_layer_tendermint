"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../../utils");
var _utils2 = require("@osmonauts/utils");
var _tendermint = require("../class/tendermint");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var rpcExtensionMethod = function rpcExtensionMethod(name, svc) {
  var _svc$fields;
  var requestType = svc.requestType;
  var responseType = svc.responseType;
  var fieldNames = Object.keys((_svc$fields = svc.fields) !== null && _svc$fields !== void 0 ? _svc$fields : {});
  var hasParams = fieldNames.length > 0;
  var optional = false;
  // // if no params, then let's default to empty object for cleaner API
  if (!hasParams) {
    optional = true;
  } else if (hasParams && fieldNames.length === 1 && fieldNames.includes('pagination')) {
    // if only argument "required" is pagination
    // also default to empty
    optional = true;
  }
  var methodArgs = (0, _utils.identifier)('request', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(requestType))), optional);
  return (0, _utils.objectMethod)('method', t.identifier(name), [methodArgs], t.blockStatement([t.returnStatement(t.callExpression(t.memberExpression(t.identifier('queryService'), t.identifier(name)), [t.identifier('request')]))]), false, false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Promise'), t.tsTypeParameterInstantiation([t.tsTypeReference(
  // t.identifier(responseType + 'SDKType')
  t.identifier(responseType))]))));
};
var createRpcQueryExtension = function createRpcQueryExtension(context, service) {
  var _service$methods;
  context.addUtil('QueryClient');
  context.addUtil('createProtobufRpcClient');
  var camelRpcMethods = context.pluginValue('rpcClients.camelCase');
  // const name = service.name + 'ClientImpl';
  // const implementsName = service.name;
  // const methodNames = Object.keys(service.methods ?? {})
  //     .map(key => {
  //         return camelRpcMethods ? camel(key) : key
  //     });
  var methods = Object.keys((_service$methods = service.methods) !== null && _service$methods !== void 0 ? _service$methods : {}).map(function (key) {
    var method = service.methods[key];
    var name = camelRpcMethods ? (0, _utils2.camel)(key) : key;
    return rpcExtensionMethod(name, method);
  });
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier('createRpcQueryExtension'), t.arrowFunctionExpression([(0, _utils.identifier)('base', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('QueryClient'))))], t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('rpc'), t.callExpression(t.identifier('createProtobufRpcClient'), [t.identifier('base')]))]),
  //////
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('queryService'), t.newExpression(t.identifier((0, _tendermint.getRpcClassName)(service)), [t.identifier('rpc')]))]), t.returnStatement(t.objectExpression((0, _toConsumableArray2["default"])(methods)))])))]));
};
exports.createRpcQueryExtension = createRpcQueryExtension;