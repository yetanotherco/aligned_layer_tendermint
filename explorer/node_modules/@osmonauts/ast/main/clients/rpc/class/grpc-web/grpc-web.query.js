"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGrpcWebQueryInterface = exports.createGrpcWebQueryClass = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _utils = require("../../../../utils");
var _utils2 = require("@osmonauts/utils");
var _rpc = require("../utils/rpc");
var _utils3 = require("./utils");
var t = _interopRequireWildcard(require("@babel/types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var gRPCWebMethodDefinition = function gRPCWebMethodDefinition(context, name, msg, svc, packageImport, trailingComments, leadingComments) {
  var _svc$fields;
  var requestType = svc.requestType;
  var responseType = svc.responseType;

  //interface body is empty so nothing here
  var body = t.blockStatement([]);
  var optional = false;
  var fieldNames = Object.keys((_svc$fields = svc.fields) !== null && _svc$fields !== void 0 ? _svc$fields : {});
  var hasParams = fieldNames.length > 0;
  if (!hasParams) {
    optional = true;
  } else if (hasParams && fieldNames.length === 1 && fieldNames.includes('pagination')) {
    // if only argument "required" is pagination
    // also default to empty
    optional = true;
  }
  var methodArgs = (0, _utils.identifier)('request', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('DeepPartial'), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(requestType))]))), optional);
  var metadataArgs = _utils3.metadata;
  return (0, _utils.tsMethodSignature)(t.identifier(name), null, [methodArgs, metadataArgs], (0, _rpc.returnReponseType)(responseType), trailingComments, leadingComments);
};
var createGrpcWebQueryInterface = function createGrpcWebQueryInterface(context, service) {
  var _service$methods;
  var camelRpcMethods = context.pluginValue('rpcClients.camelCase');
  var keys = Object.keys((_service$methods = service.methods) !== null && _service$methods !== void 0 ? _service$methods : {});
  var methods = keys.map(function (key) {
    var method = service.methods[key];
    var name = camelRpcMethods ? (0, _utils2.camel)(key) : key;
    var leadingComments = method.comment ? [(0, _utils.commentBlock)((0, _rpc.processRpcComment)(method))] : [];
    var trailingComments = [];
    return gRPCWebMethodDefinition(context, name, key, method, context.ref.proto["package"] + '.' + service.name, trailingComments, leadingComments);
  });
  var obj = t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(service.name), null, [], t.tsInterfaceBody((0, _toConsumableArray2["default"])(methods))));
  if (service.comment) {
    obj.leadingComments = [(0, _utils.commentBlock)("* ".concat(service.comment, " "))];
  }
  return obj;
};
exports.createGrpcWebQueryInterface = createGrpcWebQueryInterface;
var rpcClassConstructor = function rpcClassConstructor(context, methods) {
  var bound = [];
  if (!context.pluginValue('classesUseArrowFunctions')) {
    bound = methods.map(function (method) {
      return (0, _utils3.bindThis)(method);
    });
  }
  return (0, _utils.classMethod)('constructor', t.identifier('constructor'), [(0, _utils.identifier)('rpc', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Rpc'))))], t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.thisExpression(), t.identifier('rpc')), t.identifier('rpc')))].concat((0, _toConsumableArray2["default"])(bound))));
};
var GrpcWebClassMethod = function GrpcWebClassMethod(context, name, msg, svc, packageImport) {
  var _svc$comment, _svc$fields2;
  var partialName = 'DeepPartial';
  var optional = false;
  var requestType = svc.requestType;
  var responseType = svc.responseType;
  var comment = (_svc$comment = svc.comment) !== null && _svc$comment !== void 0 ? _svc$comment : svc.name;
  var methodArgs = (0, _utils.identifier)('request', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(partialName), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(requestType))]))), optional);
  var metadataArgs = _utils3.metadata;
  var fieldNames = Object.keys((_svc$fields2 = svc.fields) !== null && _svc$fields2 !== void 0 ? _svc$fields2 : {});
  var hasParams = fieldNames.length > 0;

  // if no params, then let's default to empty object for cleaner API
  if (!hasParams) {
    methodArgs = t.assignmentPattern(methodArgs, t.objectExpression([]));
  } else if (hasParams && fieldNames.length === 1 && fieldNames.includes('pagination')) {
    // if only argument "required" is pagination
    // also default to empty
    methodArgs = t.assignmentPattern(methodArgs, t.objectExpression([t.objectProperty(t.identifier('pagination'), t.identifier('undefined'), false, false)]));
  }

  /* 
  return this.rpc.unary(
    QueryParamsDesc,
    QueryParamsRequest.fromPartial(request),
    metadata,
  );
  */
  var body = t.blockStatement([t.returnStatement(t.callExpression(t.memberExpression(t.memberExpression(t.thisExpression(), t.identifier('rpc')), t.identifier('unary')), [
  //No Desc field so we need to modify it
  t.identifier(requestType.replace('Request', 'Desc')), t.callExpression(t.memberExpression(t.identifier(requestType), t.identifier('fromPartial')), [t.identifier('request')]), t.identifier('metadata')]))]);
  if (context.pluginValue('classesUseArrowFunctions')) {
    return (0, _utils.classProperty)(t.identifier(name), (0, _utils.arrowFunctionExpression)([methodArgs], body, (0, _rpc.returnReponseType)(responseType), true), undefined, undefined, undefined, undefined, undefined, undefined, (0, _utils3.makeComment)(comment));
  }
  return (0, _utils.classMethod)('method', t.identifier(name), [methodArgs, metadataArgs], body, (0, _rpc.returnReponseType)(responseType));
};
var createGrpcWebQueryClass = function createGrpcWebQueryClass(context, service) {
  var _service$methods2, _service$methods3;
  //adding import 
  context.addUtil('_m0');
  context.addUtil('grpc');
  context.addUtil('UnaryMethodDefinitionish'); // for other descriptor
  //use type DeepPartial
  context.addUtil('DeepPartial');
  var partialName = 'DeepPartial';
  var camelRpcMethods = context.pluginValue('rpcClients.camelCase');
  var name = (0, _utils3.getRpcClassName)(service);
  var implementsName = service.name;
  var methodNames = Object.keys((_service$methods2 = service.methods) !== null && _service$methods2 !== void 0 ? _service$methods2 : {}).map(function (key) {
    return camelRpcMethods ? (0, _utils2.camel)(key) : key;
  });
  var methods = Object.keys((_service$methods3 = service.methods) !== null && _service$methods3 !== void 0 ? _service$methods3 : {}).map(function (key) {
    var method = service.methods[key];
    var name = camelRpcMethods ? (0, _utils2.camel)(key) : key;
    return GrpcWebClassMethod(context, name, key, method, context.ref.proto["package"] + '.' + service.name);
  });
  return t.exportNamedDeclaration((0, _utils.classDeclaration)(t.identifier(name), null, t.classBody([(0, _utils.classProperty)(t.identifier('rpc'), null, t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Rpc'))), null, false, false, true, 'private'),
  // CONSTRUCTOR
  rpcClassConstructor(context, methodNames)].concat((0, _toConsumableArray2["default"])(methods))), null, [t.tsExpressionWithTypeArguments(t.identifier(implementsName))]));
};
exports.createGrpcWebQueryClass = createGrpcWebQueryClass;