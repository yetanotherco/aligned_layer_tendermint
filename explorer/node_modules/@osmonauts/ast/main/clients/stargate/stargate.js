"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStargateClientProtoRegistry = exports.createStargateClientOptions = exports.createStargateClientAminoRegistry = exports.createStargateClient = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _utils = require("../../utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var createStargateClient = function createStargateClient(_ref) {
  var name = _ref.name,
    options = _ref.options,
    context = _ref.context;
  var includeDefaults = context.pluginValue('stargateClients.includeCosmosDefaultTypes');
  var optsFuncArgs = [];
  if (includeDefaults) {
    context.addUtil('defaultRegistryTypes');
    optsFuncArgs = [t.objectExpression([t.objectProperty(t.identifier('defaultTypes'), t.identifier('defaultTypes'), false, true)])];
  }
  context.addUtil('GeneratedType');
  context.addUtil('OfflineSigner');
  context.addUtil('Registry');
  context.addUtil('AminoTypes');
  context.addUtil('SigningStargateClient');
  context.addUtil('HttpEndpoint');
  var prop = t.tsPropertySignature(t.identifier('defaultTypes'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('ReadonlyArray'), t.tsTypeParameterInstantiation([t.tsTupleType([t.tsStringKeyword(), t.tsTypeReference(t.identifier('GeneratedType'))])]))));
  prop.optional = true;
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(name), t.arrowFunctionExpression([(0, _utils.objectPattern)([t.objectProperty(t.identifier('rpcEndpoint'), t.identifier('rpcEndpoint'), false, true), t.objectProperty(t.identifier('signer'), t.identifier('signer'), false, true), includeDefaults && t.objectProperty(t.identifier('defaultTypes'), t.assignmentPattern(t.identifier('defaultTypes'), t.identifier('defaultRegistryTypes')), false, true)].filter(Boolean), t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('rpcEndpoint'), t.tsTypeAnnotation(t.tsUnionType([t.tsStringKeyword(), t.tsTypeReference(t.identifier('HttpEndpoint'))]))), t.tsPropertySignature(t.identifier('signer'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('OfflineSigner')))), includeDefaults && prop].filter(Boolean))))], t.blockStatement([
  // props
  t.variableDeclaration('const', [t.variableDeclarator(t.objectPattern([t.objectProperty(t.identifier('registry'), t.identifier('registry'), false, true), t.objectProperty(t.identifier('aminoTypes'), t.identifier('aminoTypes'), false, true)]), t.callExpression(t.identifier(options), optsFuncArgs))]),
  // client
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('client'), t.awaitExpression(t.callExpression(t.memberExpression(t.identifier('SigningStargateClient'), t.identifier('connectWithSigner')), [t.identifier('rpcEndpoint'), t.identifier('signer'), t.objectExpression([t.objectProperty(t.identifier('registry'), t.identifier('registry'), false, true), t.objectProperty(t.identifier('aminoTypes'), t.identifier('aminoTypes'), false, true)])])))]),
  // return 
  t.returnStatement(t.identifier('client'))]), true))]));
};
exports.createStargateClient = createStargateClient;
var createStargateClientAminoRegistry = function createStargateClientAminoRegistry(_ref2) {
  var aminos = _ref2.aminos,
    aminoConverters = _ref2.aminoConverters,
    context = _ref2.context;
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(aminoConverters), t.objectExpression((0, _toConsumableArray2["default"])(aminos.map(function (pkg) {
    return t.spreadElement((0, _utils.memberExpressionOrIdentifier)("".concat(pkg, ".AminoConverter").split('.').reverse()));
  }))))]));
};
exports.createStargateClientAminoRegistry = createStargateClientAminoRegistry;
var createStargateClientProtoRegistry = function createStargateClientProtoRegistry(_ref3) {
  var registries = _ref3.registries,
    protoTypeRegistry = _ref3.protoTypeRegistry,
    context = _ref3.context;
  context.addUtil('GeneratedType');
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator((0, _utils.identifier)(protoTypeRegistry, t.tsTypeAnnotation(t.tsTypeReference(t.identifier('ReadonlyArray'), t.tsTypeParameterInstantiation([t.tsTupleType([t.tsStringKeyword(), t.tsTypeReference(t.identifier('GeneratedType'))])])))), t.arrayExpression((0, _toConsumableArray2["default"])(registries.map(function (pkg) {
    return t.spreadElement((0, _utils.memberExpressionOrIdentifier)("".concat(pkg, ".registry").split('.').reverse()));
  }))))]));
};
exports.createStargateClientProtoRegistry = createStargateClientProtoRegistry;
var createStargateClientOptions = function createStargateClientOptions(_ref4) {
  var name = _ref4.name,
    aminoConverters = _ref4.aminoConverters,
    protoTypeRegistry = _ref4.protoTypeRegistry,
    context = _ref4.context;
  var includeDefaults = context.pluginValue('stargateClients.includeCosmosDefaultTypes');
  if (includeDefaults) {
    context.addUtil('defaultRegistryTypes');
  }
  context.addUtil('GeneratedType');
  context.addUtil('Registry');
  context.addUtil('AminoTypes');
  context.addUtil('SigningStargateClient');
  var prop = t.tsPropertySignature(t.identifier('defaultTypes'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('ReadonlyArray'), t.tsTypeParameterInstantiation([t.tsTupleType([t.tsStringKeyword(), t.tsTypeReference(t.identifier('GeneratedType'))])]))));
  prop.optional = true;
  var funcArgs = [];
  if (includeDefaults) {
    var args = [t.objectProperty(t.identifier('defaultTypes'), t.assignmentPattern(t.identifier('defaultTypes'), t.identifier('defaultRegistryTypes')), false, true)];
    //
    var funcTypes = t.tsTypeAnnotation(t.tsTypeLiteral([prop].filter(Boolean)));
    funcArgs = [t.assignmentPattern((0, _utils.objectPattern)(args, funcTypes), t.objectExpression([]))];
  }
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(name), (0, _utils.arrowFunctionExpression)(funcArgs, t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('registry'), t.newExpression(t.identifier('Registry'), [t.arrayExpression([includeDefaults && t.spreadElement(t.identifier('defaultTypes')), t.spreadElement(t.identifier(protoTypeRegistry))].filter(Boolean))]))]),
  // amino
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('aminoTypes'), t.newExpression(t.identifier('AminoTypes'), [t.objectExpression([t.spreadElement(t.identifier(aminoConverters))])]))]),
  // NEW CODE
  // return 
  t.returnStatement(t.objectExpression([t.objectProperty(t.identifier('registry'), t.identifier('registry'), false, true), t.objectProperty(t.identifier('aminoTypes'), t.identifier('aminoTypes'), false, true)]))]), t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('registry'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Registry')))), t.tsPropertySignature(t.identifier('aminoTypes'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('AminoTypes'))))])), false))]));
};
exports.createStargateClientOptions = createStargateClientOptions;