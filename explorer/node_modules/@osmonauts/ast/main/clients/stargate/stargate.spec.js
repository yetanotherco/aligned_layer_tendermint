"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _testUtils = require("../../../test-utils");
var _stargate = require("./stargate");
it('createStargateClient', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'osmosis.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          (0, _testUtils.expectCode)((0, _stargate.createStargateClient)({
            context: context,
            name: 'getSigningOsmosisClient',
            options: 'getSigningOsmosisClientOptions'
          }));
          expect(context.utils).toMatchSnapshot();
        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
it('createStargateClientOptions', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'somepackage1.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          context.options.stargateClients.includeCosmosDefaultTypes = true;
          (0, _testUtils.expectCode)((0, _stargate.createStargateClientOptions)({
            context: context,
            aminoConverters: 'aminoConverters',
            protoTypeRegistry: 'protoTypeRegistry',
            name: 'getSigningOsmosisClientOptions'
          }));
          expect(context.utils).toMatchSnapshot();
        case 5:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
it('createStargateClientAminoRegistry', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'somepackage1.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          context.options.stargateClients.includeCosmosDefaultTypes = true;
          (0, _testUtils.expectCode)((0, _stargate.createStargateClientAminoRegistry)({
            context: context,
            aminoConverters: 'aminoConverters',
            aminos: ['somepackage1.gamm.v1beta1', 'somepackage1.superfluid.v1beta1', 'somepackage1.lockup']
          }));
          expect(context.utils).toMatchSnapshot();
        case 5:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
})));
it('createStargateClientProtoRegistry', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'somepackage1.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          context.options.stargateClients.includeCosmosDefaultTypes = true;
          (0, _testUtils.expectCode)((0, _stargate.createStargateClientProtoRegistry)({
            context: context,
            protoTypeRegistry: 'protoTypeRegistry',
            registries: ['somepackage1.gamm.v1beta1', 'somepackage1.superfluid.v1beta1', 'somepackage1.lockup']
          }));
          expect(context.utils).toMatchSnapshot();
        case 5:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4);
})));
it('createStargateClient w/o defaults', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'otherpackage1.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          context.options.stargateClients.includeCosmosDefaultTypes = false;
          (0, _testUtils.expectCode)((0, _stargate.createStargateClient)({
            context: context,
            name: 'getSigningOsmosisClient',
            options: 'getSigningOsmosisClientOptions'
          }));
          (0, _testUtils.expectCode)((0, _stargate.createStargateClientOptions)({
            context: context,
            name: 'getSigningOsmosisClientOptions',
            aminoConverters: 'aminoConverters',
            protoTypeRegistry: 'protoTypeRegistry'
          }));
          expect(context.utils).toMatchSnapshot();
        case 6:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5);
})));