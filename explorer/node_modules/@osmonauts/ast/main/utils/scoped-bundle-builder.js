"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildSingleCreator = exports.buildNestedCreator = exports.buildExportCreators = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
var _ = require(".");
var _utils = require("@osmonauts/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var DEFAULT_RPC_PARAM_NAME = 'rpc';

/**
 * Create an AST for a certain key and method.
 * eg: __fixtures__/output1/hooks.ts
 * v1beta2: _AkashAuditV1beta2Queryrpc.createRpcQueryHooks(rpc)
 * @param {Object=} imports - imports array reference for generating imports.
 * @param {Object=} path - filename of a package.
 * @param {string} methodName - hook method name of packages
 * @returns {ParseResult} created AST
 */
var buildSingleCreator = function buildSingleCreator(imports, path, methodName) {
  imports.push({
    as: (0, _utils.variableSlug)(path),
    path: path
  });
  return t.callExpression(t.memberExpression(t.identifier((0, _utils.variableSlug)(path)), t.identifier(methodName)), [t.identifier(DEFAULT_RPC_PARAM_NAME)]);
};

/**
 * Create an ASTs for method creators of packages recursively, and get imports of packages.
 * eg: __fixtures__/output1/hooks.ts
 * export const createRpcQueryHooks = ...
 * @param {Object=} imports - imports array reference for generating imports.
 * @param {Object=} obj - mapping of packages and rpc query filenames
 * @param {string} methodName - hook method name of packages
 * @returns {ParseResult} created AST
 */
exports.buildSingleCreator = buildSingleCreator;
var buildNestedCreator = function buildNestedCreator(imports, obj, methodName) {
  //if obj is a path, end recursion and get the mapping.
  if (typeof obj === 'string') {
    return buildSingleCreator(imports, obj, methodName);
  }
  var keys = Object.keys(obj);

  // get hooks for keys of the obj.
  return t.objectExpression(keys.map(function (name) {
    return t.objectProperty(t.identifier(name), buildNestedCreator(imports, obj[name], methodName));
  }));
};
exports.buildNestedCreator = buildNestedCreator;
/**
 * Create an ASTs for export creators.
 * Generating files like:
 * __fixtures__/output1/hooks.ts
 * @param {Object=} context - context of generating the file
 * @param {Object=} obj - mapping of packages and rpc query filenames
 * @param {string} identifier - name of function creating hooks. eg: createRpcQueryHooks
 * @param {string[]} utils - name of imported utils.
 * @param {string} methodName - name of a certain method that creates a store or hook. eg: createRpcQueryHooks
 * @returns {ParseResult} created AST
 */
var buildExportCreators = function buildExportCreators(context, obj, identifier, utils) {
  var methodName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'createRpcQueryHooks';
  // add imports
  utils.forEach(function (util) {
    context.addUtil(util);
  });
  var hookImports = [];
  var ast = t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(
  // eg: createRPCQueryHooks
  t.identifier(identifier), t.arrowFunctionExpression([(0, _.objectPattern)([t.objectProperty(t.identifier(DEFAULT_RPC_PARAM_NAME), t.identifier(DEFAULT_RPC_PARAM_NAME), false, true)], t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier(DEFAULT_RPC_PARAM_NAME), t.tsTypeAnnotation(t.tsUnionType([t.tsTypeReference(t.identifier('ProtobufRpcClient')), t.tsUndefinedKeyword()])))])))], t.blockStatement([t.returnStatement(buildNestedCreator(hookImports, obj, methodName))]), false))]));

  // generate imports for packages.
  var imports = hookImports.map(function (hookport) {
    return {
      type: 'ImportDeclaration',
      importKind: 'value',
      specifiers: [{
        type: 'ImportNamespaceSpecifier',
        local: {
          type: 'Identifier',
          name: hookport.as
        }
      }],
      source: {
        type: 'StringLiteral',
        value: hookport.path
      }
    };
  });
  return [].concat((0, _toConsumableArray2["default"])(imports), [ast]);
};
exports.buildExportCreators = buildExportCreators;