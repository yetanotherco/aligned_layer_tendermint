"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shorthandProperty = exports.renderNameSafely = exports.recursiveNamespace = exports.promiseTypeAnnotation = exports.memberExpressionOrIdentifierAminoCasing = exports.memberExpressionOrIdentifierAminoCaseField = exports.memberExpressionOrIdentifier = exports.makeCommentBlock = exports.importStmt = exports.getProtoFieldTypeName = exports.cleanComment = exports.bindMethod = exports.BILLION = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var t = _interopRequireWildcard(require("@babel/types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var BILLION = t.numericLiteral(1000000000);
exports.BILLION = BILLION;
BILLION.extra = {
  raw: "1_000_000_000",
  rawValue: 1000000000
};
var cleanComment = function cleanComment(str) {
  return str.replace(/\*\//g, '*\\\/');
};
exports.cleanComment = cleanComment;
var ensureOneSpace = function ensureOneSpace(str) {
  if (/^[\s\n\t]+/.test(str)) return str;
  return " ".concat(str);
};
var makeCommentBlock = function makeCommentBlock(comment) {
  if (!/[\n]+/.test(comment)) {
    return {
      type: 'CommentBlock',
      value: "* ".concat(cleanComment(comment), " "),
      start: null,
      end: null,
      loc: null
    };
  }
  var lines = comment.split('\n');
  lines = ['*'].concat((0, _toConsumableArray2["default"])(lines), [' ']);
  var comments = lines.map(function (line, i) {
    if (i == 0) return line;
    if (i == 1) return " *".concat(ensureOneSpace(cleanComment(line)));
    if (i == lines.length - 1) return cleanComment(line);
    return " *".concat(ensureOneSpace(cleanComment(line)));
  });
  return {
    type: 'CommentBlock',
    value: comments.join('\n'),
    start: null,
    end: null,
    loc: null
  };
};
exports.makeCommentBlock = makeCommentBlock;
var renderNameSafely = function renderNameSafely(name) {
  return name.split('_').map(function (str) {
    var parts = str.split('.');
    str = parts[parts.length - 1];
    return str;
  }).join('_');
};
exports.renderNameSafely = renderNameSafely;
var getProtoFieldTypeName = function getProtoFieldTypeName(context, field) {
  var name = context.getTypeName(field);
  return renderNameSafely(name);
};
exports.getProtoFieldTypeName = getProtoFieldTypeName;
var recursiveNamespace = function recursiveNamespace(names, moduleBlockBody) {
  if (!names || !names.length) return moduleBlockBody;
  var name = names.pop();
  var body = [t.exportNamedDeclaration(t.tsModuleDeclaration(t.identifier(name), t.tsModuleBlock(recursiveNamespace(names, moduleBlockBody))))];
  return body;
};
exports.recursiveNamespace = recursiveNamespace;
var bindMethod = function bindMethod(name) {
  return t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.thisExpression(), t.identifier(name)), t.callExpression(t.memberExpression(t.memberExpression(t.thisExpression(), t.identifier(name)), t.identifier('bind')), [t.thisExpression()])));
};
exports.bindMethod = bindMethod;
var shorthandProperty = function shorthandProperty(prop) {
  return t.objectProperty(t.identifier(prop), t.identifier(prop), false, true);
};
exports.shorthandProperty = shorthandProperty;
var importStmt = function importStmt(names, path) {
  return t.importDeclaration(names.map(function (name) {
    return t.importSpecifier(t.identifier(name), t.identifier(name));
  }), t.stringLiteral(path));
};
exports.importStmt = importStmt;
var memberExpressionOrIdentifier = function memberExpressionOrIdentifier(names) {
  if (names.length === 1) {
    return t.identifier(names[0]);
  }
  if (names.length === 2) {
    var _names = (0, _slicedToArray2["default"])(names, 2),
      b = _names[0],
      a = _names[1];
    return t.memberExpression(t.identifier(a), t.identifier(b));
  }
  var _names2 = (0, _toArray2["default"])(names),
    name = _names2[0],
    rest = _names2.slice(1);
  return t.memberExpression(memberExpressionOrIdentifier(rest), t.identifier(name));
};
exports.memberExpressionOrIdentifier = memberExpressionOrIdentifier;
var memberExpressionOrIdentifierAminoCasing = function memberExpressionOrIdentifierAminoCasing(names, aminoCasingFn) {
  if (names.length === 1) {
    return t.identifier(aminoCasingFn(names[0]));
  }
  if (names.length === 2) {
    var _names3 = (0, _slicedToArray2["default"])(names, 2),
      b = _names3[0],
      a = _names3[1];
    return t.memberExpression(t.identifier(aminoCasingFn(a)), t.identifier(aminoCasingFn(b)));
  }
  var _names4 = (0, _toArray2["default"])(names),
    name = _names4[0],
    rest = _names4.slice(1);
  return t.memberExpression(memberExpressionOrIdentifierAminoCasing(rest, aminoCasingFn), t.identifier(aminoCasingFn(name)));
};
exports.memberExpressionOrIdentifierAminoCasing = memberExpressionOrIdentifierAminoCasing;
var memberExpressionOrIdentifierAminoCaseField = function memberExpressionOrIdentifierAminoCaseField(fields, aminoCaseFunc) {
  if (fields.length === 1) {
    return t.identifier(aminoCaseFunc(fields[0]));
  }
  if (fields.length === 2) {
    var _fields = (0, _slicedToArray2["default"])(fields, 2),
      b = _fields[0],
      a = _fields[1];
    return t.memberExpression(t.identifier(aminoCaseFunc(a)), t.identifier(aminoCaseFunc(b)));
  }
  var _fields2 = (0, _toArray2["default"])(fields),
    field = _fields2[0],
    rest = _fields2.slice(1);
  return t.memberExpression(memberExpressionOrIdentifierAminoCaseField(rest, aminoCaseFunc), t.identifier(aminoCaseFunc(field)));
};
exports.memberExpressionOrIdentifierAminoCaseField = memberExpressionOrIdentifierAminoCaseField;
var promiseTypeAnnotation = function promiseTypeAnnotation(name) {
  return t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Promise'), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(name))])));
};
exports.promiseTypeAnnotation = promiseTypeAnnotation;