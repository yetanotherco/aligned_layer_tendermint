"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultTelescopeOptions = exports.TelescopeLogLevel = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _aminos = require("./aminos");

var _case = require("case");

var _utils = require("@osmonauts/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var TelescopeLogLevel;
exports.TelescopeLogLevel = TelescopeLogLevel;

(function (TelescopeLogLevel) {
  TelescopeLogLevel[TelescopeLogLevel["None"] = 0] = "None";
  TelescopeLogLevel[TelescopeLogLevel["Info"] = 1] = "Info";
  TelescopeLogLevel[TelescopeLogLevel["Warn"] = 2] = "Warn";
  TelescopeLogLevel[TelescopeLogLevel["Error"] = 3] = "Error";
  TelescopeLogLevel[TelescopeLogLevel["Debug"] = 4] = "Debug";
})(TelescopeLogLevel || (exports.TelescopeLogLevel = TelescopeLogLevel = {}));

var defaultTelescopeOptions = {
  // global options (can be overridden through plugins)
  experimentalGlobalProtoNamespace: false,
  removeUnusedImports: true,
  classesUseArrowFunctions: false,
  useSDKTypes: true,
  includeExternalHelpers: false,
  logLevel: TelescopeLogLevel.None,
  interfaces: {
    enabled: false,
    useUnionTypes: false
  },
  prototypes: {
    enabled: true,
    parser: {
      keepCase: false,
      alternateCommentMode: true,
      preferTrailingComment: false
    },
    methods: {
      encode: true,
      decode: true,
      fromJSON: false,
      toJSON: false,
      fromPartial: true,
      toSDK: false,
      fromSDK: false,
      toAmino: false,
      fromAmino: false,
      toProto: false,
      fromProto: false
    },
    includePackageVar: false,
    fieldDefaultIsOptional: false,
    allowUndefinedTypes: false,
    useOptionalNullable: true,
    addTypeUrlToObjects: false,
    addAminoTypeToObjects: false,
    addTypeUrlToDecoders: false,
    optionalQueryParams: false,
    optionalPageRequests: false,
    typingsFormat: {
      useDeepPartial: true,
      useExact: false,
      timestamp: 'date',
      duration: 'duration',
      updatedDuration: false
    }
  },
  bundle: {
    enabled: true
  },
  tsDisable: {
    files: [],
    patterns: [],
    disableAll: false
  },
  eslintDisable: {
    files: [],
    patterns: [],
    disableAll: false
  },
  stargateClients: {
    enabled: true,
    includeCosmosDefaultTypes: true
  },
  aminoEncoding: {
    enabled: true,
    casingFn: _case.snake,
    exceptions: _objectSpread({}, _aminos.DEFAULT_AMINO_EXCEPTIONS),
    useRecursiveV2encoding: false
  },
  lcdClients: {
    bundle: true,
    enabled: true,
    scopedIsExclusive: true
  },
  rpcClients: {
    type: 'tendermint',
    enabled: true,
    extensions: true,
    inline: false,
    bundle: true,
    camelCase: true,
    enabledServices: ['Msg', 'Query', 'Service'],
    scopedIsExclusive: true
  },
  reactQuery: {
    enabled: false,
    include: {
      patterns: [],
      packages: [],
      protos: []
    }
  },
  mobx: {
    enabled: false,
    include: {
      patterns: [],
      packages: [],
      protos: []
    }
  },
  pinia: {
    enabled: false,
    include: {
      patterns: [],
      packages: [],
      protos: []
    }
  },
  // packages
  packages: {
    cosmos: {
      stargateClients: {
        enabled: true,
        includeCosmosDefaultTypes: false
      }
    },
    osmosis: {
      aminoEncoding: {
        casingFn: _utils.camel
      }
    }
  }
};
exports.defaultTelescopeOptions = defaultTelescopeOptions;